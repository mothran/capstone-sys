/* automatically generated by rust-bindgen */

pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type va_list = __builtin_va_list;
/// Handle using with all API
pub type csh = usize;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
/// Architecture type
pub enum cs_arch {
    /// ARM architecture (including Thumb, Thumb-2)
    CS_ARCH_ARM = 0,
    /// ARM-64, also called AArch64
    CS_ARCH_ARM64 = 1,
    /// Mips architecture
    CS_ARCH_MIPS = 2,
    /// X86 architecture (including x86 & x86-64)
    CS_ARCH_X86 = 3,
    /// PowerPC architecture
    CS_ARCH_PPC = 4,
    /// Sparc architecture
    CS_ARCH_SPARC = 5,
    /// SystemZ architecture
    CS_ARCH_SYSZ = 6,
    /// XCore architecture
    CS_ARCH_XCORE = 7,
    CS_ARCH_MAX = 8,
    /// All architectures - for cs_support()
    CS_ARCH_ALL = 65535,
}
/// little-endian mode (default mode)
pub const CS_MODE_LITTLE_ENDIAN: cs_mode = cs_mode(0);
/// 32-bit ARM
pub const CS_MODE_ARM: cs_mode = cs_mode(0);
/// 16-bit mode (X86)
pub const CS_MODE_16: cs_mode = cs_mode(2);
/// 32-bit mode (X86)
pub const CS_MODE_32: cs_mode = cs_mode(4);
/// 64-bit mode (X86, PPC)
pub const CS_MODE_64: cs_mode = cs_mode(8);
/// ARM's Thumb mode, including Thumb-2
pub const CS_MODE_THUMB: cs_mode = cs_mode(16);
/// ARM's Cortex-M series
pub const CS_MODE_MCLASS: cs_mode = cs_mode(32);
/// ARMv8 A32 encodings for ARM
pub const CS_MODE_V8: cs_mode = cs_mode(64);
/// MicroMips mode (MIPS)
pub const CS_MODE_MICRO: cs_mode = cs_mode(16);
/// Mips III ISA
pub const CS_MODE_MIPS3: cs_mode = cs_mode(32);
/// Mips32r6 ISA
pub const CS_MODE_MIPS32R6: cs_mode = cs_mode(64);
/// MicroMips mode (MIPS)
pub const CS_MODE_MIPSGP64: cs_mode = cs_mode(128);
/// SparcV9 mode (Sparc)
pub const CS_MODE_V9: cs_mode = cs_mode(16);
/// big-endian mode
pub const CS_MODE_BIG_ENDIAN: cs_mode = cs_mode(-2147483648);
/// Mips32 ISA (Mips)
pub const CS_MODE_MIPS32: cs_mode = cs_mode(4);
/// Mips64 ISA (Mips)
pub const CS_MODE_MIPS64: cs_mode = cs_mode(8);
impl ::std::ops::BitOr<cs_mode> for cs_mode {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        cs_mode(self.0 | other.0)
    }
}
impl ::std::ops::BitOrAssign for cs_mode {
    #[inline]
    fn bitor_assign(&mut self, rhs: cs_mode) {
        self.0 |= rhs.0;
    }
}
impl ::std::ops::BitAnd<cs_mode> for cs_mode {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        cs_mode(self.0 & other.0)
    }
}
impl ::std::ops::BitAndAssign for cs_mode {
    #[inline]
    fn bitand_assign(&mut self, rhs: cs_mode) {
        self.0 &= rhs.0;
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
/// Mode type
pub struct cs_mode(pub i32);
pub type cs_malloc_t =
    ::std::option::Option<unsafe extern "C" fn(size: usize) -> *mut ::std::os::raw::c_void>;
pub type cs_calloc_t = ::std::option::Option<
    unsafe extern "C" fn(nmemb: usize, size: usize) -> *mut ::std::os::raw::c_void,
>;
pub type cs_realloc_t = ::std::option::Option<
    unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void, size: usize)
        -> *mut ::std::os::raw::c_void,
>;
pub type cs_free_t = ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void)>;
pub type cs_vsnprintf_t = ::std::option::Option<
    unsafe extern "C" fn(
        str: *mut ::std::os::raw::c_char,
        size: usize,
        format: *const ::std::os::raw::c_char,
        ap: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy)]
/// User-defined dynamic memory related functions: malloc/calloc/realloc/free/vsnprintf()
///
/// By default, Capstone uses system's malloc(), calloc(), realloc(), free() & vsnprintf().
pub struct cs_opt_mem {
    pub malloc: cs_malloc_t,
    pub calloc: cs_calloc_t,
    pub realloc: cs_realloc_t,
    pub free: cs_free_t,
    pub vsnprintf: cs_vsnprintf_t,
}
impl Clone for cs_opt_mem {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
/// Runtime option for the disassembled engine
pub enum cs_opt_type {
    CS_OPT_INVALID = 0,
    CS_OPT_SYNTAX = 1,
    CS_OPT_DETAIL = 2,
    CS_OPT_MODE = 3,
    CS_OPT_MEM = 4,
    CS_OPT_SKIPDATA = 5,
    CS_OPT_SKIPDATA_SETUP = 6,
}
/// Runtime option value (associated with option type above)
pub mod cs_opt_value {
    pub type Type = u32;
    pub const CS_OPT_OFF: Type = 0;
    pub const CS_OPT_ON: Type = 3;
    pub const CS_OPT_SYNTAX_DEFAULT: Type = 0;
    pub const CS_OPT_SYNTAX_INTEL: Type = 1;
    pub const CS_OPT_SYNTAX_ATT: Type = 2;
    pub const CS_OPT_SYNTAX_NOREGNAME: Type = 3;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
/// Common instruction operand types - to be consistent across all architectures.
pub enum cs_op_type {
    CS_OP_INVALID = 0,
    CS_OP_REG = 1,
    CS_OP_IMM = 2,
    CS_OP_MEM = 3,
    CS_OP_FP = 4,
}
/// Common instruction groups - to be consistent across all architectures.
pub mod cs_group_type {
    pub type Type = u32;
    pub const CS_GRP_INVALID: Type = 0;
    pub const CS_GRP_JUMP: Type = 1;
    pub const CS_GRP_CALL: Type = 2;
    pub const CS_GRP_RET: Type = 3;
    pub const CS_GRP_INT: Type = 4;
    pub const CS_GRP_IRET: Type = 5;
}
/// User-defined callback function for SKIPDATA option.
/// See tests/test_skipdata.c for sample code demonstrating this API.
///
/// * @code: the input buffer containing code to be disassembled.
///        This is the same buffer passed to cs_disasm().
/// * @code_size: size (in bytes) of the above @code buffer.
/// * @offset: the position of the currently-examining byte in the input
///      buffer @code mentioned above.
/// * @user_data: user-data passed to cs_option() via @user_data field in
///      cs_opt_skipdata struct below.
///
/// @return: return number of bytes to skip, or 0 to immediately stop disassembling.
pub type cs_skipdata_cb_t = ::std::option::Option<
    unsafe extern "C" fn(
        code: *const u8,
        code_size: usize,
        offset: usize,
        user_data: *mut ::std::os::raw::c_void,
    ) -> usize,
>;
#[repr(C)]
#[derive(Debug, Copy)]
/// User-customized setup for SKIPDATA option
pub struct cs_opt_skipdata {
    /// Capstone considers data to skip as special "instructions".
    /// User can specify the string for this instruction's "mnemonic" here.
    /// By default (if @mnemonic is NULL), Capstone use ".byte".
    pub mnemonic: *const ::std::os::raw::c_char,

    /// User-defined callback function to be called when Capstone hits data.
    /// If the returned value from this callback is positive (>0), Capstone
    /// will skip exactly that number of bytes & continue. Otherwise, if
    /// the callback returns 0, Capstone stops disassembling and returns
    /// immediately from cs_disasm()
    ///
    /// NOTE: if this callback pointer is NULL, Capstone would skip a number
    /// of bytes depending on architectures, as following:
    ///
    /// * Arm:     2 bytes (Thumb mode) or 4 bytes.
    /// * Arm64:   4 bytes.
    /// * Mips:    4 bytes.
    /// * PowerPC: 4 bytes.
    /// * Sparc:   4 bytes.
    /// * SystemZ: 2 bytes.
    /// * X86:     1 bytes.
    /// * XCore:   2 bytes.
    pub callback: cs_skipdata_cb_t,

    /// User-defined data to be passed to @callback function pointer.
    pub user_data: *mut ::std::os::raw::c_void,
}
impl Clone for cs_opt_skipdata {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum arm_shifter {
    ARM_SFT_INVALID = 0,
    ARM_SFT_ASR = 1,
    ARM_SFT_LSL = 2,
    ARM_SFT_LSR = 3,
    ARM_SFT_ROR = 4,
    ARM_SFT_RRX = 5,
    ARM_SFT_ASR_REG = 6,
    ARM_SFT_LSL_REG = 7,
    ARM_SFT_LSR_REG = 8,
    ARM_SFT_ROR_REG = 9,
    ARM_SFT_RRX_REG = 10,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum arm_cc {
    ARM_CC_INVALID = 0,
    ARM_CC_EQ = 1,
    ARM_CC_NE = 2,
    ARM_CC_HS = 3,
    ARM_CC_LO = 4,
    ARM_CC_MI = 5,
    ARM_CC_PL = 6,
    ARM_CC_VS = 7,
    ARM_CC_VC = 8,
    ARM_CC_HI = 9,
    ARM_CC_LS = 10,
    ARM_CC_GE = 11,
    ARM_CC_LT = 12,
    ARM_CC_GT = 13,
    ARM_CC_LE = 14,
    ARM_CC_AL = 15,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum arm_sysreg {
    ARM_SYSREG_INVALID = 0,
    ARM_SYSREG_SPSR_C = 1,
    ARM_SYSREG_SPSR_X = 2,
    ARM_SYSREG_SPSR_S = 4,
    ARM_SYSREG_SPSR_F = 8,
    ARM_SYSREG_CPSR_C = 16,
    ARM_SYSREG_CPSR_X = 32,
    ARM_SYSREG_CPSR_S = 64,
    ARM_SYSREG_CPSR_F = 128,
    ARM_SYSREG_APSR = 256,
    ARM_SYSREG_APSR_G = 257,
    ARM_SYSREG_APSR_NZCVQ = 258,
    ARM_SYSREG_APSR_NZCVQG = 259,
    ARM_SYSREG_IAPSR = 260,
    ARM_SYSREG_IAPSR_G = 261,
    ARM_SYSREG_IAPSR_NZCVQG = 262,
    ARM_SYSREG_EAPSR = 263,
    ARM_SYSREG_EAPSR_G = 264,
    ARM_SYSREG_EAPSR_NZCVQG = 265,
    ARM_SYSREG_XPSR = 266,
    ARM_SYSREG_XPSR_G = 267,
    ARM_SYSREG_XPSR_NZCVQG = 268,
    ARM_SYSREG_IPSR = 269,
    ARM_SYSREG_EPSR = 270,
    ARM_SYSREG_IEPSR = 271,
    ARM_SYSREG_MSP = 272,
    ARM_SYSREG_PSP = 273,
    ARM_SYSREG_PRIMASK = 274,
    ARM_SYSREG_BASEPRI = 275,
    ARM_SYSREG_BASEPRI_MAX = 276,
    ARM_SYSREG_FAULTMASK = 277,
    ARM_SYSREG_CONTROL = 278,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum arm_mem_barrier {
    ARM_MB_INVALID = 0,
    ARM_MB_RESERVED_0 = 1,
    ARM_MB_OSHLD = 2,
    ARM_MB_OSHST = 3,
    ARM_MB_OSH = 4,
    ARM_MB_RESERVED_4 = 5,
    ARM_MB_NSHLD = 6,
    ARM_MB_NSHST = 7,
    ARM_MB_NSH = 8,
    ARM_MB_RESERVED_8 = 9,
    ARM_MB_ISHLD = 10,
    ARM_MB_ISHST = 11,
    ARM_MB_ISH = 12,
    ARM_MB_RESERVED_12 = 13,
    ARM_MB_LD = 14,
    ARM_MB_ST = 15,
    ARM_MB_SY = 16,
}
pub mod arm_op_type {
    pub type Type = u32;
    pub const ARM_OP_INVALID: Type = 0;
    pub const ARM_OP_REG: Type = 1;
    pub const ARM_OP_IMM: Type = 2;
    pub const ARM_OP_MEM: Type = 3;
    pub const ARM_OP_FP: Type = 4;
    pub const ARM_OP_CIMM: Type = 64;
    pub const ARM_OP_PIMM: Type = 65;
    pub const ARM_OP_SETEND: Type = 66;
    pub const ARM_OP_SYSREG: Type = 67;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum arm_setend_type {
    ARM_SETEND_INVALID = 0,
    ARM_SETEND_BE = 1,
    ARM_SETEND_LE = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum arm_cpsmode_type {
    ARM_CPSMODE_INVALID = 0,
    ARM_CPSMODE_IE = 2,
    ARM_CPSMODE_ID = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum arm_cpsflag_type {
    ARM_CPSFLAG_INVALID = 0,
    ARM_CPSFLAG_F = 1,
    ARM_CPSFLAG_I = 2,
    ARM_CPSFLAG_A = 4,
    ARM_CPSFLAG_NONE = 16,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum arm_vectordata_type {
    ARM_VECTORDATA_INVALID = 0,
    ARM_VECTORDATA_I8 = 1,
    ARM_VECTORDATA_I16 = 2,
    ARM_VECTORDATA_I32 = 3,
    ARM_VECTORDATA_I64 = 4,
    ARM_VECTORDATA_S8 = 5,
    ARM_VECTORDATA_S16 = 6,
    ARM_VECTORDATA_S32 = 7,
    ARM_VECTORDATA_S64 = 8,
    ARM_VECTORDATA_U8 = 9,
    ARM_VECTORDATA_U16 = 10,
    ARM_VECTORDATA_U32 = 11,
    ARM_VECTORDATA_U64 = 12,
    ARM_VECTORDATA_P8 = 13,
    ARM_VECTORDATA_F32 = 14,
    ARM_VECTORDATA_F64 = 15,
    ARM_VECTORDATA_F16F64 = 16,
    ARM_VECTORDATA_F64F16 = 17,
    ARM_VECTORDATA_F32F16 = 18,
    ARM_VECTORDATA_F16F32 = 19,
    ARM_VECTORDATA_F64F32 = 20,
    ARM_VECTORDATA_F32F64 = 21,
    ARM_VECTORDATA_S32F32 = 22,
    ARM_VECTORDATA_U32F32 = 23,
    ARM_VECTORDATA_F32S32 = 24,
    ARM_VECTORDATA_F32U32 = 25,
    ARM_VECTORDATA_F64S16 = 26,
    ARM_VECTORDATA_F32S16 = 27,
    ARM_VECTORDATA_F64S32 = 28,
    ARM_VECTORDATA_S16F64 = 29,
    ARM_VECTORDATA_S16F32 = 30,
    ARM_VECTORDATA_S32F64 = 31,
    ARM_VECTORDATA_U16F64 = 32,
    ARM_VECTORDATA_U16F32 = 33,
    ARM_VECTORDATA_U32F64 = 34,
    ARM_VECTORDATA_F64U16 = 35,
    ARM_VECTORDATA_F32U16 = 36,
    ARM_VECTORDATA_F64U32 = 37,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct arm_op_mem {
    pub base: ::std::os::raw::c_uint,
    pub index: ::std::os::raw::c_uint,
    pub scale: ::std::os::raw::c_int,
    pub disp: ::std::os::raw::c_int,
}
impl Clone for arm_op_mem {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct cs_arm_op {
    pub vector_index: ::std::os::raw::c_int,
    pub shift: cs_arm_op__bindgen_ty_1,
    pub type_: arm_op_type::Type,
    pub __bindgen_anon_1: cs_arm_op__bindgen_ty_2,
    pub subtracted: bool,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct cs_arm_op__bindgen_ty_1 {
    pub type_: arm_shifter,
    pub value: ::std::os::raw::c_uint,
}
impl Clone for cs_arm_op__bindgen_ty_1 {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Copy)]
pub union cs_arm_op__bindgen_ty_2 {
    pub reg: ::std::os::raw::c_uint,
    pub imm: i32,
    pub fp: f64,
    pub mem: arm_op_mem,
    pub setend: arm_setend_type,
    _bindgen_union_align: [u64; 2usize],
}
impl Clone for cs_arm_op__bindgen_ty_2 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::fmt::Debug for cs_arm_op__bindgen_ty_2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "cs_arm_op__bindgen_ty_2 {{ union }}")
    }
}
impl Clone for cs_arm_op {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::fmt::Debug for cs_arm_op {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write ! ( f , "cs_arm_op {{ vector_index: {:?}, shift: {:?}, type: {:?}, __bindgen_anon_1: {:?}, subtracted: {:?} }}" , self . vector_index , self . shift , self . type_ , self . __bindgen_anon_1 , self . subtracted )
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct cs_arm {
    pub usermode: bool,
    pub vector_size: ::std::os::raw::c_int,
    pub vector_data: arm_vectordata_type,
    pub cps_mode: arm_cpsmode_type,
    pub cps_flag: arm_cpsflag_type,
    pub cc: arm_cc,
    pub update_flags: bool,
    pub writeback: bool,
    pub mem_barrier: arm_mem_barrier,
    pub op_count: u8,
    pub operands: [cs_arm_op; 36usize],
}
impl Clone for cs_arm {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::fmt::Debug for cs_arm {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write ! ( f , "cs_arm {{ usermode: {:?}, vector_size: {:?}, vector_data: {:?}, cps_mode: {:?}, cps_flag: {:?}, cc: {:?}, update_flags: {:?}, writeback: {:?}, mem_barrier: {:?}, op_count: {:?}, operands: [{}] }}" , self . usermode , self . vector_size , self . vector_data , self . cps_mode , self . cps_flag , self . cc , self . update_flags , self . writeback , self . mem_barrier , self . op_count , self . operands . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) )
    }
}
pub mod arm_reg {
    pub type Type = u32;
    pub const ARM_REG_INVALID: Type = 0;
    pub const ARM_REG_APSR: Type = 1;
    pub const ARM_REG_APSR_NZCV: Type = 2;
    pub const ARM_REG_CPSR: Type = 3;
    pub const ARM_REG_FPEXC: Type = 4;
    pub const ARM_REG_FPINST: Type = 5;
    pub const ARM_REG_FPSCR: Type = 6;
    pub const ARM_REG_FPSCR_NZCV: Type = 7;
    pub const ARM_REG_FPSID: Type = 8;
    pub const ARM_REG_ITSTATE: Type = 9;
    pub const ARM_REG_LR: Type = 10;
    pub const ARM_REG_PC: Type = 11;
    pub const ARM_REG_SP: Type = 12;
    pub const ARM_REG_SPSR: Type = 13;
    pub const ARM_REG_D0: Type = 14;
    pub const ARM_REG_D1: Type = 15;
    pub const ARM_REG_D2: Type = 16;
    pub const ARM_REG_D3: Type = 17;
    pub const ARM_REG_D4: Type = 18;
    pub const ARM_REG_D5: Type = 19;
    pub const ARM_REG_D6: Type = 20;
    pub const ARM_REG_D7: Type = 21;
    pub const ARM_REG_D8: Type = 22;
    pub const ARM_REG_D9: Type = 23;
    pub const ARM_REG_D10: Type = 24;
    pub const ARM_REG_D11: Type = 25;
    pub const ARM_REG_D12: Type = 26;
    pub const ARM_REG_D13: Type = 27;
    pub const ARM_REG_D14: Type = 28;
    pub const ARM_REG_D15: Type = 29;
    pub const ARM_REG_D16: Type = 30;
    pub const ARM_REG_D17: Type = 31;
    pub const ARM_REG_D18: Type = 32;
    pub const ARM_REG_D19: Type = 33;
    pub const ARM_REG_D20: Type = 34;
    pub const ARM_REG_D21: Type = 35;
    pub const ARM_REG_D22: Type = 36;
    pub const ARM_REG_D23: Type = 37;
    pub const ARM_REG_D24: Type = 38;
    pub const ARM_REG_D25: Type = 39;
    pub const ARM_REG_D26: Type = 40;
    pub const ARM_REG_D27: Type = 41;
    pub const ARM_REG_D28: Type = 42;
    pub const ARM_REG_D29: Type = 43;
    pub const ARM_REG_D30: Type = 44;
    pub const ARM_REG_D31: Type = 45;
    pub const ARM_REG_FPINST2: Type = 46;
    pub const ARM_REG_MVFR0: Type = 47;
    pub const ARM_REG_MVFR1: Type = 48;
    pub const ARM_REG_MVFR2: Type = 49;
    pub const ARM_REG_Q0: Type = 50;
    pub const ARM_REG_Q1: Type = 51;
    pub const ARM_REG_Q2: Type = 52;
    pub const ARM_REG_Q3: Type = 53;
    pub const ARM_REG_Q4: Type = 54;
    pub const ARM_REG_Q5: Type = 55;
    pub const ARM_REG_Q6: Type = 56;
    pub const ARM_REG_Q7: Type = 57;
    pub const ARM_REG_Q8: Type = 58;
    pub const ARM_REG_Q9: Type = 59;
    pub const ARM_REG_Q10: Type = 60;
    pub const ARM_REG_Q11: Type = 61;
    pub const ARM_REG_Q12: Type = 62;
    pub const ARM_REG_Q13: Type = 63;
    pub const ARM_REG_Q14: Type = 64;
    pub const ARM_REG_Q15: Type = 65;
    pub const ARM_REG_R0: Type = 66;
    pub const ARM_REG_R1: Type = 67;
    pub const ARM_REG_R2: Type = 68;
    pub const ARM_REG_R3: Type = 69;
    pub const ARM_REG_R4: Type = 70;
    pub const ARM_REG_R5: Type = 71;
    pub const ARM_REG_R6: Type = 72;
    pub const ARM_REG_R7: Type = 73;
    pub const ARM_REG_R8: Type = 74;
    pub const ARM_REG_R9: Type = 75;
    pub const ARM_REG_R10: Type = 76;
    pub const ARM_REG_R11: Type = 77;
    pub const ARM_REG_R12: Type = 78;
    pub const ARM_REG_S0: Type = 79;
    pub const ARM_REG_S1: Type = 80;
    pub const ARM_REG_S2: Type = 81;
    pub const ARM_REG_S3: Type = 82;
    pub const ARM_REG_S4: Type = 83;
    pub const ARM_REG_S5: Type = 84;
    pub const ARM_REG_S6: Type = 85;
    pub const ARM_REG_S7: Type = 86;
    pub const ARM_REG_S8: Type = 87;
    pub const ARM_REG_S9: Type = 88;
    pub const ARM_REG_S10: Type = 89;
    pub const ARM_REG_S11: Type = 90;
    pub const ARM_REG_S12: Type = 91;
    pub const ARM_REG_S13: Type = 92;
    pub const ARM_REG_S14: Type = 93;
    pub const ARM_REG_S15: Type = 94;
    pub const ARM_REG_S16: Type = 95;
    pub const ARM_REG_S17: Type = 96;
    pub const ARM_REG_S18: Type = 97;
    pub const ARM_REG_S19: Type = 98;
    pub const ARM_REG_S20: Type = 99;
    pub const ARM_REG_S21: Type = 100;
    pub const ARM_REG_S22: Type = 101;
    pub const ARM_REG_S23: Type = 102;
    pub const ARM_REG_S24: Type = 103;
    pub const ARM_REG_S25: Type = 104;
    pub const ARM_REG_S26: Type = 105;
    pub const ARM_REG_S27: Type = 106;
    pub const ARM_REG_S28: Type = 107;
    pub const ARM_REG_S29: Type = 108;
    pub const ARM_REG_S30: Type = 109;
    pub const ARM_REG_S31: Type = 110;
    pub const ARM_REG_ENDING: Type = 111;
    pub const ARM_REG_R13: Type = 12;
    pub const ARM_REG_R14: Type = 10;
    pub const ARM_REG_R15: Type = 11;
    pub const ARM_REG_SB: Type = 75;
    pub const ARM_REG_SL: Type = 76;
    pub const ARM_REG_FP: Type = 77;
    pub const ARM_REG_IP: Type = 78;
}
pub mod arm_insn {
    pub type Type = u32;
    pub const ARM_INS_INVALID: Type = 0;
    pub const ARM_INS_ADC: Type = 1;
    pub const ARM_INS_ADD: Type = 2;
    pub const ARM_INS_ADR: Type = 3;
    pub const ARM_INS_AESD: Type = 4;
    pub const ARM_INS_AESE: Type = 5;
    pub const ARM_INS_AESIMC: Type = 6;
    pub const ARM_INS_AESMC: Type = 7;
    pub const ARM_INS_AND: Type = 8;
    pub const ARM_INS_BFC: Type = 9;
    pub const ARM_INS_BFI: Type = 10;
    pub const ARM_INS_BIC: Type = 11;
    pub const ARM_INS_BKPT: Type = 12;
    pub const ARM_INS_BL: Type = 13;
    pub const ARM_INS_BLX: Type = 14;
    pub const ARM_INS_BX: Type = 15;
    pub const ARM_INS_BXJ: Type = 16;
    pub const ARM_INS_B: Type = 17;
    pub const ARM_INS_CDP: Type = 18;
    pub const ARM_INS_CDP2: Type = 19;
    pub const ARM_INS_CLREX: Type = 20;
    pub const ARM_INS_CLZ: Type = 21;
    pub const ARM_INS_CMN: Type = 22;
    pub const ARM_INS_CMP: Type = 23;
    pub const ARM_INS_CPS: Type = 24;
    pub const ARM_INS_CRC32B: Type = 25;
    pub const ARM_INS_CRC32CB: Type = 26;
    pub const ARM_INS_CRC32CH: Type = 27;
    pub const ARM_INS_CRC32CW: Type = 28;
    pub const ARM_INS_CRC32H: Type = 29;
    pub const ARM_INS_CRC32W: Type = 30;
    pub const ARM_INS_DBG: Type = 31;
    pub const ARM_INS_DMB: Type = 32;
    pub const ARM_INS_DSB: Type = 33;
    pub const ARM_INS_EOR: Type = 34;
    pub const ARM_INS_VMOV: Type = 35;
    pub const ARM_INS_FLDMDBX: Type = 36;
    pub const ARM_INS_FLDMIAX: Type = 37;
    pub const ARM_INS_VMRS: Type = 38;
    pub const ARM_INS_FSTMDBX: Type = 39;
    pub const ARM_INS_FSTMIAX: Type = 40;
    pub const ARM_INS_HINT: Type = 41;
    pub const ARM_INS_HLT: Type = 42;
    pub const ARM_INS_ISB: Type = 43;
    pub const ARM_INS_LDA: Type = 44;
    pub const ARM_INS_LDAB: Type = 45;
    pub const ARM_INS_LDAEX: Type = 46;
    pub const ARM_INS_LDAEXB: Type = 47;
    pub const ARM_INS_LDAEXD: Type = 48;
    pub const ARM_INS_LDAEXH: Type = 49;
    pub const ARM_INS_LDAH: Type = 50;
    pub const ARM_INS_LDC2L: Type = 51;
    pub const ARM_INS_LDC2: Type = 52;
    pub const ARM_INS_LDCL: Type = 53;
    pub const ARM_INS_LDC: Type = 54;
    pub const ARM_INS_LDMDA: Type = 55;
    pub const ARM_INS_LDMDB: Type = 56;
    pub const ARM_INS_LDM: Type = 57;
    pub const ARM_INS_LDMIB: Type = 58;
    pub const ARM_INS_LDRBT: Type = 59;
    pub const ARM_INS_LDRB: Type = 60;
    pub const ARM_INS_LDRD: Type = 61;
    pub const ARM_INS_LDREX: Type = 62;
    pub const ARM_INS_LDREXB: Type = 63;
    pub const ARM_INS_LDREXD: Type = 64;
    pub const ARM_INS_LDREXH: Type = 65;
    pub const ARM_INS_LDRH: Type = 66;
    pub const ARM_INS_LDRHT: Type = 67;
    pub const ARM_INS_LDRSB: Type = 68;
    pub const ARM_INS_LDRSBT: Type = 69;
    pub const ARM_INS_LDRSH: Type = 70;
    pub const ARM_INS_LDRSHT: Type = 71;
    pub const ARM_INS_LDRT: Type = 72;
    pub const ARM_INS_LDR: Type = 73;
    pub const ARM_INS_MCR: Type = 74;
    pub const ARM_INS_MCR2: Type = 75;
    pub const ARM_INS_MCRR: Type = 76;
    pub const ARM_INS_MCRR2: Type = 77;
    pub const ARM_INS_MLA: Type = 78;
    pub const ARM_INS_MLS: Type = 79;
    pub const ARM_INS_MOV: Type = 80;
    pub const ARM_INS_MOVT: Type = 81;
    pub const ARM_INS_MOVW: Type = 82;
    pub const ARM_INS_MRC: Type = 83;
    pub const ARM_INS_MRC2: Type = 84;
    pub const ARM_INS_MRRC: Type = 85;
    pub const ARM_INS_MRRC2: Type = 86;
    pub const ARM_INS_MRS: Type = 87;
    pub const ARM_INS_MSR: Type = 88;
    pub const ARM_INS_MUL: Type = 89;
    pub const ARM_INS_MVN: Type = 90;
    pub const ARM_INS_ORR: Type = 91;
    pub const ARM_INS_PKHBT: Type = 92;
    pub const ARM_INS_PKHTB: Type = 93;
    pub const ARM_INS_PLDW: Type = 94;
    pub const ARM_INS_PLD: Type = 95;
    pub const ARM_INS_PLI: Type = 96;
    pub const ARM_INS_QADD: Type = 97;
    pub const ARM_INS_QADD16: Type = 98;
    pub const ARM_INS_QADD8: Type = 99;
    pub const ARM_INS_QASX: Type = 100;
    pub const ARM_INS_QDADD: Type = 101;
    pub const ARM_INS_QDSUB: Type = 102;
    pub const ARM_INS_QSAX: Type = 103;
    pub const ARM_INS_QSUB: Type = 104;
    pub const ARM_INS_QSUB16: Type = 105;
    pub const ARM_INS_QSUB8: Type = 106;
    pub const ARM_INS_RBIT: Type = 107;
    pub const ARM_INS_REV: Type = 108;
    pub const ARM_INS_REV16: Type = 109;
    pub const ARM_INS_REVSH: Type = 110;
    pub const ARM_INS_RFEDA: Type = 111;
    pub const ARM_INS_RFEDB: Type = 112;
    pub const ARM_INS_RFEIA: Type = 113;
    pub const ARM_INS_RFEIB: Type = 114;
    pub const ARM_INS_RSB: Type = 115;
    pub const ARM_INS_RSC: Type = 116;
    pub const ARM_INS_SADD16: Type = 117;
    pub const ARM_INS_SADD8: Type = 118;
    pub const ARM_INS_SASX: Type = 119;
    pub const ARM_INS_SBC: Type = 120;
    pub const ARM_INS_SBFX: Type = 121;
    pub const ARM_INS_SDIV: Type = 122;
    pub const ARM_INS_SEL: Type = 123;
    pub const ARM_INS_SETEND: Type = 124;
    pub const ARM_INS_SHA1C: Type = 125;
    pub const ARM_INS_SHA1H: Type = 126;
    pub const ARM_INS_SHA1M: Type = 127;
    pub const ARM_INS_SHA1P: Type = 128;
    pub const ARM_INS_SHA1SU0: Type = 129;
    pub const ARM_INS_SHA1SU1: Type = 130;
    pub const ARM_INS_SHA256H: Type = 131;
    pub const ARM_INS_SHA256H2: Type = 132;
    pub const ARM_INS_SHA256SU0: Type = 133;
    pub const ARM_INS_SHA256SU1: Type = 134;
    pub const ARM_INS_SHADD16: Type = 135;
    pub const ARM_INS_SHADD8: Type = 136;
    pub const ARM_INS_SHASX: Type = 137;
    pub const ARM_INS_SHSAX: Type = 138;
    pub const ARM_INS_SHSUB16: Type = 139;
    pub const ARM_INS_SHSUB8: Type = 140;
    pub const ARM_INS_SMC: Type = 141;
    pub const ARM_INS_SMLABB: Type = 142;
    pub const ARM_INS_SMLABT: Type = 143;
    pub const ARM_INS_SMLAD: Type = 144;
    pub const ARM_INS_SMLADX: Type = 145;
    pub const ARM_INS_SMLAL: Type = 146;
    pub const ARM_INS_SMLALBB: Type = 147;
    pub const ARM_INS_SMLALBT: Type = 148;
    pub const ARM_INS_SMLALD: Type = 149;
    pub const ARM_INS_SMLALDX: Type = 150;
    pub const ARM_INS_SMLALTB: Type = 151;
    pub const ARM_INS_SMLALTT: Type = 152;
    pub const ARM_INS_SMLATB: Type = 153;
    pub const ARM_INS_SMLATT: Type = 154;
    pub const ARM_INS_SMLAWB: Type = 155;
    pub const ARM_INS_SMLAWT: Type = 156;
    pub const ARM_INS_SMLSD: Type = 157;
    pub const ARM_INS_SMLSDX: Type = 158;
    pub const ARM_INS_SMLSLD: Type = 159;
    pub const ARM_INS_SMLSLDX: Type = 160;
    pub const ARM_INS_SMMLA: Type = 161;
    pub const ARM_INS_SMMLAR: Type = 162;
    pub const ARM_INS_SMMLS: Type = 163;
    pub const ARM_INS_SMMLSR: Type = 164;
    pub const ARM_INS_SMMUL: Type = 165;
    pub const ARM_INS_SMMULR: Type = 166;
    pub const ARM_INS_SMUAD: Type = 167;
    pub const ARM_INS_SMUADX: Type = 168;
    pub const ARM_INS_SMULBB: Type = 169;
    pub const ARM_INS_SMULBT: Type = 170;
    pub const ARM_INS_SMULL: Type = 171;
    pub const ARM_INS_SMULTB: Type = 172;
    pub const ARM_INS_SMULTT: Type = 173;
    pub const ARM_INS_SMULWB: Type = 174;
    pub const ARM_INS_SMULWT: Type = 175;
    pub const ARM_INS_SMUSD: Type = 176;
    pub const ARM_INS_SMUSDX: Type = 177;
    pub const ARM_INS_SRSDA: Type = 178;
    pub const ARM_INS_SRSDB: Type = 179;
    pub const ARM_INS_SRSIA: Type = 180;
    pub const ARM_INS_SRSIB: Type = 181;
    pub const ARM_INS_SSAT: Type = 182;
    pub const ARM_INS_SSAT16: Type = 183;
    pub const ARM_INS_SSAX: Type = 184;
    pub const ARM_INS_SSUB16: Type = 185;
    pub const ARM_INS_SSUB8: Type = 186;
    pub const ARM_INS_STC2L: Type = 187;
    pub const ARM_INS_STC2: Type = 188;
    pub const ARM_INS_STCL: Type = 189;
    pub const ARM_INS_STC: Type = 190;
    pub const ARM_INS_STL: Type = 191;
    pub const ARM_INS_STLB: Type = 192;
    pub const ARM_INS_STLEX: Type = 193;
    pub const ARM_INS_STLEXB: Type = 194;
    pub const ARM_INS_STLEXD: Type = 195;
    pub const ARM_INS_STLEXH: Type = 196;
    pub const ARM_INS_STLH: Type = 197;
    pub const ARM_INS_STMDA: Type = 198;
    pub const ARM_INS_STMDB: Type = 199;
    pub const ARM_INS_STM: Type = 200;
    pub const ARM_INS_STMIB: Type = 201;
    pub const ARM_INS_STRBT: Type = 202;
    pub const ARM_INS_STRB: Type = 203;
    pub const ARM_INS_STRD: Type = 204;
    pub const ARM_INS_STREX: Type = 205;
    pub const ARM_INS_STREXB: Type = 206;
    pub const ARM_INS_STREXD: Type = 207;
    pub const ARM_INS_STREXH: Type = 208;
    pub const ARM_INS_STRH: Type = 209;
    pub const ARM_INS_STRHT: Type = 210;
    pub const ARM_INS_STRT: Type = 211;
    pub const ARM_INS_STR: Type = 212;
    pub const ARM_INS_SUB: Type = 213;
    pub const ARM_INS_SVC: Type = 214;
    pub const ARM_INS_SWP: Type = 215;
    pub const ARM_INS_SWPB: Type = 216;
    pub const ARM_INS_SXTAB: Type = 217;
    pub const ARM_INS_SXTAB16: Type = 218;
    pub const ARM_INS_SXTAH: Type = 219;
    pub const ARM_INS_SXTB: Type = 220;
    pub const ARM_INS_SXTB16: Type = 221;
    pub const ARM_INS_SXTH: Type = 222;
    pub const ARM_INS_TEQ: Type = 223;
    pub const ARM_INS_TRAP: Type = 224;
    pub const ARM_INS_TST: Type = 225;
    pub const ARM_INS_UADD16: Type = 226;
    pub const ARM_INS_UADD8: Type = 227;
    pub const ARM_INS_UASX: Type = 228;
    pub const ARM_INS_UBFX: Type = 229;
    pub const ARM_INS_UDF: Type = 230;
    pub const ARM_INS_UDIV: Type = 231;
    pub const ARM_INS_UHADD16: Type = 232;
    pub const ARM_INS_UHADD8: Type = 233;
    pub const ARM_INS_UHASX: Type = 234;
    pub const ARM_INS_UHSAX: Type = 235;
    pub const ARM_INS_UHSUB16: Type = 236;
    pub const ARM_INS_UHSUB8: Type = 237;
    pub const ARM_INS_UMAAL: Type = 238;
    pub const ARM_INS_UMLAL: Type = 239;
    pub const ARM_INS_UMULL: Type = 240;
    pub const ARM_INS_UQADD16: Type = 241;
    pub const ARM_INS_UQADD8: Type = 242;
    pub const ARM_INS_UQASX: Type = 243;
    pub const ARM_INS_UQSAX: Type = 244;
    pub const ARM_INS_UQSUB16: Type = 245;
    pub const ARM_INS_UQSUB8: Type = 246;
    pub const ARM_INS_USAD8: Type = 247;
    pub const ARM_INS_USADA8: Type = 248;
    pub const ARM_INS_USAT: Type = 249;
    pub const ARM_INS_USAT16: Type = 250;
    pub const ARM_INS_USAX: Type = 251;
    pub const ARM_INS_USUB16: Type = 252;
    pub const ARM_INS_USUB8: Type = 253;
    pub const ARM_INS_UXTAB: Type = 254;
    pub const ARM_INS_UXTAB16: Type = 255;
    pub const ARM_INS_UXTAH: Type = 256;
    pub const ARM_INS_UXTB: Type = 257;
    pub const ARM_INS_UXTB16: Type = 258;
    pub const ARM_INS_UXTH: Type = 259;
    pub const ARM_INS_VABAL: Type = 260;
    pub const ARM_INS_VABA: Type = 261;
    pub const ARM_INS_VABDL: Type = 262;
    pub const ARM_INS_VABD: Type = 263;
    pub const ARM_INS_VABS: Type = 264;
    pub const ARM_INS_VACGE: Type = 265;
    pub const ARM_INS_VACGT: Type = 266;
    pub const ARM_INS_VADD: Type = 267;
    pub const ARM_INS_VADDHN: Type = 268;
    pub const ARM_INS_VADDL: Type = 269;
    pub const ARM_INS_VADDW: Type = 270;
    pub const ARM_INS_VAND: Type = 271;
    pub const ARM_INS_VBIC: Type = 272;
    pub const ARM_INS_VBIF: Type = 273;
    pub const ARM_INS_VBIT: Type = 274;
    pub const ARM_INS_VBSL: Type = 275;
    pub const ARM_INS_VCEQ: Type = 276;
    pub const ARM_INS_VCGE: Type = 277;
    pub const ARM_INS_VCGT: Type = 278;
    pub const ARM_INS_VCLE: Type = 279;
    pub const ARM_INS_VCLS: Type = 280;
    pub const ARM_INS_VCLT: Type = 281;
    pub const ARM_INS_VCLZ: Type = 282;
    pub const ARM_INS_VCMP: Type = 283;
    pub const ARM_INS_VCMPE: Type = 284;
    pub const ARM_INS_VCNT: Type = 285;
    pub const ARM_INS_VCVTA: Type = 286;
    pub const ARM_INS_VCVTB: Type = 287;
    pub const ARM_INS_VCVT: Type = 288;
    pub const ARM_INS_VCVTM: Type = 289;
    pub const ARM_INS_VCVTN: Type = 290;
    pub const ARM_INS_VCVTP: Type = 291;
    pub const ARM_INS_VCVTT: Type = 292;
    pub const ARM_INS_VDIV: Type = 293;
    pub const ARM_INS_VDUP: Type = 294;
    pub const ARM_INS_VEOR: Type = 295;
    pub const ARM_INS_VEXT: Type = 296;
    pub const ARM_INS_VFMA: Type = 297;
    pub const ARM_INS_VFMS: Type = 298;
    pub const ARM_INS_VFNMA: Type = 299;
    pub const ARM_INS_VFNMS: Type = 300;
    pub const ARM_INS_VHADD: Type = 301;
    pub const ARM_INS_VHSUB: Type = 302;
    pub const ARM_INS_VLD1: Type = 303;
    pub const ARM_INS_VLD2: Type = 304;
    pub const ARM_INS_VLD3: Type = 305;
    pub const ARM_INS_VLD4: Type = 306;
    pub const ARM_INS_VLDMDB: Type = 307;
    pub const ARM_INS_VLDMIA: Type = 308;
    pub const ARM_INS_VLDR: Type = 309;
    pub const ARM_INS_VMAXNM: Type = 310;
    pub const ARM_INS_VMAX: Type = 311;
    pub const ARM_INS_VMINNM: Type = 312;
    pub const ARM_INS_VMIN: Type = 313;
    pub const ARM_INS_VMLA: Type = 314;
    pub const ARM_INS_VMLAL: Type = 315;
    pub const ARM_INS_VMLS: Type = 316;
    pub const ARM_INS_VMLSL: Type = 317;
    pub const ARM_INS_VMOVL: Type = 318;
    pub const ARM_INS_VMOVN: Type = 319;
    pub const ARM_INS_VMSR: Type = 320;
    pub const ARM_INS_VMUL: Type = 321;
    pub const ARM_INS_VMULL: Type = 322;
    pub const ARM_INS_VMVN: Type = 323;
    pub const ARM_INS_VNEG: Type = 324;
    pub const ARM_INS_VNMLA: Type = 325;
    pub const ARM_INS_VNMLS: Type = 326;
    pub const ARM_INS_VNMUL: Type = 327;
    pub const ARM_INS_VORN: Type = 328;
    pub const ARM_INS_VORR: Type = 329;
    pub const ARM_INS_VPADAL: Type = 330;
    pub const ARM_INS_VPADDL: Type = 331;
    pub const ARM_INS_VPADD: Type = 332;
    pub const ARM_INS_VPMAX: Type = 333;
    pub const ARM_INS_VPMIN: Type = 334;
    pub const ARM_INS_VQABS: Type = 335;
    pub const ARM_INS_VQADD: Type = 336;
    pub const ARM_INS_VQDMLAL: Type = 337;
    pub const ARM_INS_VQDMLSL: Type = 338;
    pub const ARM_INS_VQDMULH: Type = 339;
    pub const ARM_INS_VQDMULL: Type = 340;
    pub const ARM_INS_VQMOVUN: Type = 341;
    pub const ARM_INS_VQMOVN: Type = 342;
    pub const ARM_INS_VQNEG: Type = 343;
    pub const ARM_INS_VQRDMULH: Type = 344;
    pub const ARM_INS_VQRSHL: Type = 345;
    pub const ARM_INS_VQRSHRN: Type = 346;
    pub const ARM_INS_VQRSHRUN: Type = 347;
    pub const ARM_INS_VQSHL: Type = 348;
    pub const ARM_INS_VQSHLU: Type = 349;
    pub const ARM_INS_VQSHRN: Type = 350;
    pub const ARM_INS_VQSHRUN: Type = 351;
    pub const ARM_INS_VQSUB: Type = 352;
    pub const ARM_INS_VRADDHN: Type = 353;
    pub const ARM_INS_VRECPE: Type = 354;
    pub const ARM_INS_VRECPS: Type = 355;
    pub const ARM_INS_VREV16: Type = 356;
    pub const ARM_INS_VREV32: Type = 357;
    pub const ARM_INS_VREV64: Type = 358;
    pub const ARM_INS_VRHADD: Type = 359;
    pub const ARM_INS_VRINTA: Type = 360;
    pub const ARM_INS_VRINTM: Type = 361;
    pub const ARM_INS_VRINTN: Type = 362;
    pub const ARM_INS_VRINTP: Type = 363;
    pub const ARM_INS_VRINTR: Type = 364;
    pub const ARM_INS_VRINTX: Type = 365;
    pub const ARM_INS_VRINTZ: Type = 366;
    pub const ARM_INS_VRSHL: Type = 367;
    pub const ARM_INS_VRSHRN: Type = 368;
    pub const ARM_INS_VRSHR: Type = 369;
    pub const ARM_INS_VRSQRTE: Type = 370;
    pub const ARM_INS_VRSQRTS: Type = 371;
    pub const ARM_INS_VRSRA: Type = 372;
    pub const ARM_INS_VRSUBHN: Type = 373;
    pub const ARM_INS_VSELEQ: Type = 374;
    pub const ARM_INS_VSELGE: Type = 375;
    pub const ARM_INS_VSELGT: Type = 376;
    pub const ARM_INS_VSELVS: Type = 377;
    pub const ARM_INS_VSHLL: Type = 378;
    pub const ARM_INS_VSHL: Type = 379;
    pub const ARM_INS_VSHRN: Type = 380;
    pub const ARM_INS_VSHR: Type = 381;
    pub const ARM_INS_VSLI: Type = 382;
    pub const ARM_INS_VSQRT: Type = 383;
    pub const ARM_INS_VSRA: Type = 384;
    pub const ARM_INS_VSRI: Type = 385;
    pub const ARM_INS_VST1: Type = 386;
    pub const ARM_INS_VST2: Type = 387;
    pub const ARM_INS_VST3: Type = 388;
    pub const ARM_INS_VST4: Type = 389;
    pub const ARM_INS_VSTMDB: Type = 390;
    pub const ARM_INS_VSTMIA: Type = 391;
    pub const ARM_INS_VSTR: Type = 392;
    pub const ARM_INS_VSUB: Type = 393;
    pub const ARM_INS_VSUBHN: Type = 394;
    pub const ARM_INS_VSUBL: Type = 395;
    pub const ARM_INS_VSUBW: Type = 396;
    pub const ARM_INS_VSWP: Type = 397;
    pub const ARM_INS_VTBL: Type = 398;
    pub const ARM_INS_VTBX: Type = 399;
    pub const ARM_INS_VCVTR: Type = 400;
    pub const ARM_INS_VTRN: Type = 401;
    pub const ARM_INS_VTST: Type = 402;
    pub const ARM_INS_VUZP: Type = 403;
    pub const ARM_INS_VZIP: Type = 404;
    pub const ARM_INS_ADDW: Type = 405;
    pub const ARM_INS_ASR: Type = 406;
    pub const ARM_INS_DCPS1: Type = 407;
    pub const ARM_INS_DCPS2: Type = 408;
    pub const ARM_INS_DCPS3: Type = 409;
    pub const ARM_INS_IT: Type = 410;
    pub const ARM_INS_LSL: Type = 411;
    pub const ARM_INS_LSR: Type = 412;
    pub const ARM_INS_ASRS: Type = 413;
    pub const ARM_INS_LSRS: Type = 414;
    pub const ARM_INS_ORN: Type = 415;
    pub const ARM_INS_ROR: Type = 416;
    pub const ARM_INS_RRX: Type = 417;
    pub const ARM_INS_SUBS: Type = 418;
    pub const ARM_INS_SUBW: Type = 419;
    pub const ARM_INS_TBB: Type = 420;
    pub const ARM_INS_TBH: Type = 421;
    pub const ARM_INS_CBNZ: Type = 422;
    pub const ARM_INS_CBZ: Type = 423;
    pub const ARM_INS_MOVS: Type = 424;
    pub const ARM_INS_POP: Type = 425;
    pub const ARM_INS_PUSH: Type = 426;
    pub const ARM_INS_NOP: Type = 427;
    pub const ARM_INS_YIELD: Type = 428;
    pub const ARM_INS_WFE: Type = 429;
    pub const ARM_INS_WFI: Type = 430;
    pub const ARM_INS_SEV: Type = 431;
    pub const ARM_INS_SEVL: Type = 432;
    pub const ARM_INS_VPUSH: Type = 433;
    pub const ARM_INS_VPOP: Type = 434;
    pub const ARM_INS_ENDING: Type = 435;
}
pub mod arm_insn_group {
    pub type Type = u32;
    pub const ARM_GRP_INVALID: Type = 0;
    pub const ARM_GRP_JUMP: Type = 1;
    pub const ARM_GRP_CRYPTO: Type = 128;
    pub const ARM_GRP_DATABARRIER: Type = 129;
    pub const ARM_GRP_DIVIDE: Type = 130;
    pub const ARM_GRP_FPARMV8: Type = 131;
    pub const ARM_GRP_MULTPRO: Type = 132;
    pub const ARM_GRP_NEON: Type = 133;
    pub const ARM_GRP_T2EXTRACTPACK: Type = 134;
    pub const ARM_GRP_THUMB2DSP: Type = 135;
    pub const ARM_GRP_TRUSTZONE: Type = 136;
    pub const ARM_GRP_V4T: Type = 137;
    pub const ARM_GRP_V5T: Type = 138;
    pub const ARM_GRP_V5TE: Type = 139;
    pub const ARM_GRP_V6: Type = 140;
    pub const ARM_GRP_V6T2: Type = 141;
    pub const ARM_GRP_V7: Type = 142;
    pub const ARM_GRP_V8: Type = 143;
    pub const ARM_GRP_VFP2: Type = 144;
    pub const ARM_GRP_VFP3: Type = 145;
    pub const ARM_GRP_VFP4: Type = 146;
    pub const ARM_GRP_ARM: Type = 147;
    pub const ARM_GRP_MCLASS: Type = 148;
    pub const ARM_GRP_NOTMCLASS: Type = 149;
    pub const ARM_GRP_THUMB: Type = 150;
    pub const ARM_GRP_THUMB1ONLY: Type = 151;
    pub const ARM_GRP_THUMB2: Type = 152;
    pub const ARM_GRP_PREV8: Type = 153;
    pub const ARM_GRP_FPVMLX: Type = 154;
    pub const ARM_GRP_MULOPS: Type = 155;
    pub const ARM_GRP_CRC: Type = 156;
    pub const ARM_GRP_DPVFP: Type = 157;
    pub const ARM_GRP_V6M: Type = 158;
    pub const ARM_GRP_ENDING: Type = 159;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum arm64_shifter {
    ARM64_SFT_INVALID = 0,
    ARM64_SFT_LSL = 1,
    ARM64_SFT_MSL = 2,
    ARM64_SFT_LSR = 3,
    ARM64_SFT_ASR = 4,
    ARM64_SFT_ROR = 5,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum arm64_extender {
    ARM64_EXT_INVALID = 0,
    ARM64_EXT_UXTB = 1,
    ARM64_EXT_UXTH = 2,
    ARM64_EXT_UXTW = 3,
    ARM64_EXT_UXTX = 4,
    ARM64_EXT_SXTB = 5,
    ARM64_EXT_SXTH = 6,
    ARM64_EXT_SXTW = 7,
    ARM64_EXT_SXTX = 8,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum arm64_cc {
    ARM64_CC_INVALID = 0,
    ARM64_CC_EQ = 1,
    ARM64_CC_NE = 2,
    ARM64_CC_HS = 3,
    ARM64_CC_LO = 4,
    ARM64_CC_MI = 5,
    ARM64_CC_PL = 6,
    ARM64_CC_VS = 7,
    ARM64_CC_VC = 8,
    ARM64_CC_HI = 9,
    ARM64_CC_LS = 10,
    ARM64_CC_GE = 11,
    ARM64_CC_LT = 12,
    ARM64_CC_GT = 13,
    ARM64_CC_LE = 14,
    ARM64_CC_AL = 15,
    ARM64_CC_NV = 16,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum arm64_sysreg {
    ARM64_SYSREG_INVALID = 0,
    ARM64_SYSREG_MDCCSR_EL0 = 38920,
    ARM64_SYSREG_DBGDTRRX_EL0 = 38952,
    ARM64_SYSREG_MDRAR_EL1 = 32896,
    ARM64_SYSREG_OSLSR_EL1 = 32908,
    ARM64_SYSREG_DBGAUTHSTATUS_EL1 = 33782,
    ARM64_SYSREG_PMCEID0_EL0 = 56550,
    ARM64_SYSREG_PMCEID1_EL0 = 56551,
    ARM64_SYSREG_MIDR_EL1 = 49152,
    ARM64_SYSREG_CCSIDR_EL1 = 51200,
    ARM64_SYSREG_CLIDR_EL1 = 51201,
    ARM64_SYSREG_CTR_EL0 = 55297,
    ARM64_SYSREG_MPIDR_EL1 = 49157,
    ARM64_SYSREG_REVIDR_EL1 = 49158,
    ARM64_SYSREG_AIDR_EL1 = 51207,
    ARM64_SYSREG_DCZID_EL0 = 55303,
    ARM64_SYSREG_ID_PFR0_EL1 = 49160,
    ARM64_SYSREG_ID_PFR1_EL1 = 49161,
    ARM64_SYSREG_ID_DFR0_EL1 = 49162,
    ARM64_SYSREG_ID_AFR0_EL1 = 49163,
    ARM64_SYSREG_ID_MMFR0_EL1 = 49164,
    ARM64_SYSREG_ID_MMFR1_EL1 = 49165,
    ARM64_SYSREG_ID_MMFR2_EL1 = 49166,
    ARM64_SYSREG_ID_MMFR3_EL1 = 49167,
    ARM64_SYSREG_ID_ISAR0_EL1 = 49168,
    ARM64_SYSREG_ID_ISAR1_EL1 = 49169,
    ARM64_SYSREG_ID_ISAR2_EL1 = 49170,
    ARM64_SYSREG_ID_ISAR3_EL1 = 49171,
    ARM64_SYSREG_ID_ISAR4_EL1 = 49172,
    ARM64_SYSREG_ID_ISAR5_EL1 = 49173,
    ARM64_SYSREG_ID_A64PFR0_EL1 = 49184,
    ARM64_SYSREG_ID_A64PFR1_EL1 = 49185,
    ARM64_SYSREG_ID_A64DFR0_EL1 = 49192,
    ARM64_SYSREG_ID_A64DFR1_EL1 = 49193,
    ARM64_SYSREG_ID_A64AFR0_EL1 = 49196,
    ARM64_SYSREG_ID_A64AFR1_EL1 = 49197,
    ARM64_SYSREG_ID_A64ISAR0_EL1 = 49200,
    ARM64_SYSREG_ID_A64ISAR1_EL1 = 49201,
    ARM64_SYSREG_ID_A64MMFR0_EL1 = 49208,
    ARM64_SYSREG_ID_A64MMFR1_EL1 = 49209,
    ARM64_SYSREG_MVFR0_EL1 = 49176,
    ARM64_SYSREG_MVFR1_EL1 = 49177,
    ARM64_SYSREG_MVFR2_EL1 = 49178,
    ARM64_SYSREG_RVBAR_EL1 = 50689,
    ARM64_SYSREG_RVBAR_EL2 = 58881,
    ARM64_SYSREG_RVBAR_EL3 = 62977,
    ARM64_SYSREG_ISR_EL1 = 50696,
    ARM64_SYSREG_CNTPCT_EL0 = 57089,
    ARM64_SYSREG_CNTVCT_EL0 = 57090,
    ARM64_SYSREG_TRCSTATR = 34840,
    ARM64_SYSREG_TRCIDR8 = 34822,
    ARM64_SYSREG_TRCIDR9 = 34830,
    ARM64_SYSREG_TRCIDR10 = 34838,
    ARM64_SYSREG_TRCIDR11 = 34846,
    ARM64_SYSREG_TRCIDR12 = 34854,
    ARM64_SYSREG_TRCIDR13 = 34862,
    ARM64_SYSREG_TRCIDR0 = 34887,
    ARM64_SYSREG_TRCIDR1 = 34895,
    ARM64_SYSREG_TRCIDR2 = 34903,
    ARM64_SYSREG_TRCIDR3 = 34911,
    ARM64_SYSREG_TRCIDR4 = 34919,
    ARM64_SYSREG_TRCIDR5 = 34927,
    ARM64_SYSREG_TRCIDR6 = 34935,
    ARM64_SYSREG_TRCIDR7 = 34943,
    ARM64_SYSREG_TRCOSLSR = 34956,
    ARM64_SYSREG_TRCPDSR = 34988,
    ARM64_SYSREG_TRCDEVAFF0 = 35798,
    ARM64_SYSREG_TRCDEVAFF1 = 35806,
    ARM64_SYSREG_TRCLSR = 35822,
    ARM64_SYSREG_TRCAUTHSTATUS = 35830,
    ARM64_SYSREG_TRCDEVARCH = 35838,
    ARM64_SYSREG_TRCDEVID = 35735,
    ARM64_SYSREG_TRCDEVTYPE = 35743,
    ARM64_SYSREG_TRCPIDR4 = 35751,
    ARM64_SYSREG_TRCPIDR5 = 35759,
    ARM64_SYSREG_TRCPIDR6 = 35767,
    ARM64_SYSREG_TRCPIDR7 = 35775,
    ARM64_SYSREG_TRCPIDR0 = 35783,
    ARM64_SYSREG_TRCPIDR1 = 35791,
    ARM64_SYSREG_TRCPIDR2 = 35799,
    ARM64_SYSREG_TRCPIDR3 = 35807,
    ARM64_SYSREG_TRCCIDR0 = 35815,
    ARM64_SYSREG_TRCCIDR1 = 35823,
    ARM64_SYSREG_TRCCIDR2 = 35831,
    ARM64_SYSREG_TRCCIDR3 = 35839,
    ARM64_SYSREG_ICC_IAR1_EL1 = 50784,
    ARM64_SYSREG_ICC_IAR0_EL1 = 50752,
    ARM64_SYSREG_ICC_HPPIR1_EL1 = 50786,
    ARM64_SYSREG_ICC_HPPIR0_EL1 = 50754,
    ARM64_SYSREG_ICC_RPR_EL1 = 50779,
    ARM64_SYSREG_ICH_VTR_EL2 = 58969,
    ARM64_SYSREG_ICH_EISR_EL2 = 58971,
    ARM64_SYSREG_ICH_ELSR_EL2 = 58973,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum arm64_msr_reg {
    ARM64_SYSREG_DBGDTRTX_EL0 = 38952,
    ARM64_SYSREG_OSLAR_EL1 = 32900,
    ARM64_SYSREG_PMSWINC_EL0 = 56548,
    ARM64_SYSREG_TRCOSLAR = 34948,
    ARM64_SYSREG_TRCLAR = 35814,
    ARM64_SYSREG_ICC_EOIR1_EL1 = 50785,
    ARM64_SYSREG_ICC_EOIR0_EL1 = 50753,
    ARM64_SYSREG_ICC_DIR_EL1 = 50777,
    ARM64_SYSREG_ICC_SGI1R_EL1 = 50781,
    ARM64_SYSREG_ICC_ASGI1R_EL1 = 50782,
    ARM64_SYSREG_ICC_SGI0R_EL1 = 50783,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum arm64_pstate {
    ARM64_PSTATE_INVALID = 0,
    ARM64_PSTATE_SPSEL = 5,
    ARM64_PSTATE_DAIFSET = 30,
    ARM64_PSTATE_DAIFCLR = 31,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum arm64_vas {
    ARM64_VAS_INVALID = 0,
    ARM64_VAS_8B = 1,
    ARM64_VAS_16B = 2,
    ARM64_VAS_4H = 3,
    ARM64_VAS_8H = 4,
    ARM64_VAS_2S = 5,
    ARM64_VAS_4S = 6,
    ARM64_VAS_1D = 7,
    ARM64_VAS_2D = 8,
    ARM64_VAS_1Q = 9,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum arm64_vess {
    ARM64_VESS_INVALID = 0,
    ARM64_VESS_B = 1,
    ARM64_VESS_H = 2,
    ARM64_VESS_S = 3,
    ARM64_VESS_D = 4,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum arm64_barrier_op {
    ARM64_BARRIER_INVALID = 0,
    ARM64_BARRIER_OSHLD = 1,
    ARM64_BARRIER_OSHST = 2,
    ARM64_BARRIER_OSH = 3,
    ARM64_BARRIER_NSHLD = 5,
    ARM64_BARRIER_NSHST = 6,
    ARM64_BARRIER_NSH = 7,
    ARM64_BARRIER_ISHLD = 9,
    ARM64_BARRIER_ISHST = 10,
    ARM64_BARRIER_ISH = 11,
    ARM64_BARRIER_LD = 13,
    ARM64_BARRIER_ST = 14,
    ARM64_BARRIER_SY = 15,
}
pub mod arm64_op_type {
    pub type Type = u32;
    pub const ARM64_OP_INVALID: Type = 0;
    pub const ARM64_OP_REG: Type = 1;
    pub const ARM64_OP_IMM: Type = 2;
    pub const ARM64_OP_MEM: Type = 3;
    pub const ARM64_OP_FP: Type = 4;
    pub const ARM64_OP_CIMM: Type = 64;
    pub const ARM64_OP_REG_MRS: Type = 65;
    pub const ARM64_OP_REG_MSR: Type = 66;
    pub const ARM64_OP_PSTATE: Type = 67;
    pub const ARM64_OP_SYS: Type = 68;
    pub const ARM64_OP_PREFETCH: Type = 69;
    pub const ARM64_OP_BARRIER: Type = 70;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum arm64_tlbi_op {
    ARM64_TLBI_INVALID = 0,
    ARM64_TLBI_VMALLE1IS = 1,
    ARM64_TLBI_VAE1IS = 2,
    ARM64_TLBI_ASIDE1IS = 3,
    ARM64_TLBI_VAAE1IS = 4,
    ARM64_TLBI_VALE1IS = 5,
    ARM64_TLBI_VAALE1IS = 6,
    ARM64_TLBI_ALLE2IS = 7,
    ARM64_TLBI_VAE2IS = 8,
    ARM64_TLBI_ALLE1IS = 9,
    ARM64_TLBI_VALE2IS = 10,
    ARM64_TLBI_VMALLS12E1IS = 11,
    ARM64_TLBI_ALLE3IS = 12,
    ARM64_TLBI_VAE3IS = 13,
    ARM64_TLBI_VALE3IS = 14,
    ARM64_TLBI_IPAS2E1IS = 15,
    ARM64_TLBI_IPAS2LE1IS = 16,
    ARM64_TLBI_IPAS2E1 = 17,
    ARM64_TLBI_IPAS2LE1 = 18,
    ARM64_TLBI_VMALLE1 = 19,
    ARM64_TLBI_VAE1 = 20,
    ARM64_TLBI_ASIDE1 = 21,
    ARM64_TLBI_VAAE1 = 22,
    ARM64_TLBI_VALE1 = 23,
    ARM64_TLBI_VAALE1 = 24,
    ARM64_TLBI_ALLE2 = 25,
    ARM64_TLBI_VAE2 = 26,
    ARM64_TLBI_ALLE1 = 27,
    ARM64_TLBI_VALE2 = 28,
    ARM64_TLBI_VMALLS12E1 = 29,
    ARM64_TLBI_ALLE3 = 30,
    ARM64_TLBI_VAE3 = 31,
    ARM64_TLBI_VALE3 = 32,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum arm64_at_op {
    ARM64_AT_S1E1R = 0,
    ARM64_AT_S1E1W = 1,
    ARM64_AT_S1E0R = 2,
    ARM64_AT_S1E0W = 3,
    ARM64_AT_S1E2R = 4,
    ARM64_AT_S1E2W = 5,
    ARM64_AT_S12E1R = 6,
    ARM64_AT_S12E1W = 7,
    ARM64_AT_S12E0R = 8,
    ARM64_AT_S12E0W = 9,
    ARM64_AT_S1E3R = 10,
    ARM64_AT_S1E3W = 11,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum arm64_dc_op {
    ARM64_DC_INVALID = 0,
    ARM64_DC_ZVA = 1,
    ARM64_DC_IVAC = 2,
    ARM64_DC_ISW = 3,
    ARM64_DC_CVAC = 4,
    ARM64_DC_CSW = 5,
    ARM64_DC_CVAU = 6,
    ARM64_DC_CIVAC = 7,
    ARM64_DC_CISW = 8,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum arm64_ic_op {
    ARM64_IC_INVALID = 0,
    ARM64_IC_IALLUIS = 1,
    ARM64_IC_IALLU = 2,
    ARM64_IC_IVAU = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum arm64_prefetch_op {
    ARM64_PRFM_INVALID = 0,
    ARM64_PRFM_PLDL1KEEP = 1,
    ARM64_PRFM_PLDL1STRM = 2,
    ARM64_PRFM_PLDL2KEEP = 3,
    ARM64_PRFM_PLDL2STRM = 4,
    ARM64_PRFM_PLDL3KEEP = 5,
    ARM64_PRFM_PLDL3STRM = 6,
    ARM64_PRFM_PLIL1KEEP = 9,
    ARM64_PRFM_PLIL1STRM = 10,
    ARM64_PRFM_PLIL2KEEP = 11,
    ARM64_PRFM_PLIL2STRM = 12,
    ARM64_PRFM_PLIL3KEEP = 13,
    ARM64_PRFM_PLIL3STRM = 14,
    ARM64_PRFM_PSTL1KEEP = 17,
    ARM64_PRFM_PSTL1STRM = 18,
    ARM64_PRFM_PSTL2KEEP = 19,
    ARM64_PRFM_PSTL2STRM = 20,
    ARM64_PRFM_PSTL3KEEP = 21,
    ARM64_PRFM_PSTL3STRM = 22,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct arm64_op_mem {
    pub base: ::std::os::raw::c_uint,
    pub index: ::std::os::raw::c_uint,
    pub disp: i32,
}
impl Clone for arm64_op_mem {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct cs_arm64_op {
    pub vector_index: ::std::os::raw::c_int,
    pub vas: arm64_vas,
    pub vess: arm64_vess,
    pub shift: cs_arm64_op__bindgen_ty_1,
    pub ext: arm64_extender,
    pub type_: arm64_op_type::Type,
    pub __bindgen_anon_1: cs_arm64_op__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct cs_arm64_op__bindgen_ty_1 {
    pub type_: arm64_shifter,
    pub value: ::std::os::raw::c_uint,
}
impl Clone for cs_arm64_op__bindgen_ty_1 {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Copy)]
pub union cs_arm64_op__bindgen_ty_2 {
    pub reg: ::std::os::raw::c_uint,
    pub imm: i64,
    pub fp: f64,
    pub mem: arm64_op_mem,
    pub pstate: arm64_pstate,
    pub sys: ::std::os::raw::c_uint,
    pub prefetch: arm64_prefetch_op,
    pub barrier: arm64_barrier_op,
    _bindgen_union_align: [u64; 2usize],
}
impl Clone for cs_arm64_op__bindgen_ty_2 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::fmt::Debug for cs_arm64_op__bindgen_ty_2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "cs_arm64_op__bindgen_ty_2 {{ union }}")
    }
}
impl Clone for cs_arm64_op {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::fmt::Debug for cs_arm64_op {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write ! ( f , "cs_arm64_op {{ vector_index: {:?}, vas: {:?}, vess: {:?}, shift: {:?}, ext: {:?}, type: {:?}, __bindgen_anon_1: {:?} }}" , self . vector_index , self . vas , self . vess , self . shift , self . ext , self . type_ , self . __bindgen_anon_1 )
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct cs_arm64 {
    pub cc: arm64_cc,
    pub update_flags: bool,
    pub writeback: bool,
    pub op_count: u8,
    pub operands: [cs_arm64_op; 8usize],
}
impl Clone for cs_arm64 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::fmt::Debug for cs_arm64 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write ! ( f , "cs_arm64 {{ cc: {:?}, update_flags: {:?}, writeback: {:?}, op_count: {:?}, operands: {:?} }}" , self . cc , self . update_flags , self . writeback , self . op_count , self . operands )
    }
}
pub mod arm64_reg {
    pub type Type = u32;
    pub const ARM64_REG_INVALID: Type = 0;
    pub const ARM64_REG_X29: Type = 1;
    pub const ARM64_REG_X30: Type = 2;
    pub const ARM64_REG_NZCV: Type = 3;
    pub const ARM64_REG_SP: Type = 4;
    pub const ARM64_REG_WSP: Type = 5;
    pub const ARM64_REG_WZR: Type = 6;
    pub const ARM64_REG_XZR: Type = 7;
    pub const ARM64_REG_B0: Type = 8;
    pub const ARM64_REG_B1: Type = 9;
    pub const ARM64_REG_B2: Type = 10;
    pub const ARM64_REG_B3: Type = 11;
    pub const ARM64_REG_B4: Type = 12;
    pub const ARM64_REG_B5: Type = 13;
    pub const ARM64_REG_B6: Type = 14;
    pub const ARM64_REG_B7: Type = 15;
    pub const ARM64_REG_B8: Type = 16;
    pub const ARM64_REG_B9: Type = 17;
    pub const ARM64_REG_B10: Type = 18;
    pub const ARM64_REG_B11: Type = 19;
    pub const ARM64_REG_B12: Type = 20;
    pub const ARM64_REG_B13: Type = 21;
    pub const ARM64_REG_B14: Type = 22;
    pub const ARM64_REG_B15: Type = 23;
    pub const ARM64_REG_B16: Type = 24;
    pub const ARM64_REG_B17: Type = 25;
    pub const ARM64_REG_B18: Type = 26;
    pub const ARM64_REG_B19: Type = 27;
    pub const ARM64_REG_B20: Type = 28;
    pub const ARM64_REG_B21: Type = 29;
    pub const ARM64_REG_B22: Type = 30;
    pub const ARM64_REG_B23: Type = 31;
    pub const ARM64_REG_B24: Type = 32;
    pub const ARM64_REG_B25: Type = 33;
    pub const ARM64_REG_B26: Type = 34;
    pub const ARM64_REG_B27: Type = 35;
    pub const ARM64_REG_B28: Type = 36;
    pub const ARM64_REG_B29: Type = 37;
    pub const ARM64_REG_B30: Type = 38;
    pub const ARM64_REG_B31: Type = 39;
    pub const ARM64_REG_D0: Type = 40;
    pub const ARM64_REG_D1: Type = 41;
    pub const ARM64_REG_D2: Type = 42;
    pub const ARM64_REG_D3: Type = 43;
    pub const ARM64_REG_D4: Type = 44;
    pub const ARM64_REG_D5: Type = 45;
    pub const ARM64_REG_D6: Type = 46;
    pub const ARM64_REG_D7: Type = 47;
    pub const ARM64_REG_D8: Type = 48;
    pub const ARM64_REG_D9: Type = 49;
    pub const ARM64_REG_D10: Type = 50;
    pub const ARM64_REG_D11: Type = 51;
    pub const ARM64_REG_D12: Type = 52;
    pub const ARM64_REG_D13: Type = 53;
    pub const ARM64_REG_D14: Type = 54;
    pub const ARM64_REG_D15: Type = 55;
    pub const ARM64_REG_D16: Type = 56;
    pub const ARM64_REG_D17: Type = 57;
    pub const ARM64_REG_D18: Type = 58;
    pub const ARM64_REG_D19: Type = 59;
    pub const ARM64_REG_D20: Type = 60;
    pub const ARM64_REG_D21: Type = 61;
    pub const ARM64_REG_D22: Type = 62;
    pub const ARM64_REG_D23: Type = 63;
    pub const ARM64_REG_D24: Type = 64;
    pub const ARM64_REG_D25: Type = 65;
    pub const ARM64_REG_D26: Type = 66;
    pub const ARM64_REG_D27: Type = 67;
    pub const ARM64_REG_D28: Type = 68;
    pub const ARM64_REG_D29: Type = 69;
    pub const ARM64_REG_D30: Type = 70;
    pub const ARM64_REG_D31: Type = 71;
    pub const ARM64_REG_H0: Type = 72;
    pub const ARM64_REG_H1: Type = 73;
    pub const ARM64_REG_H2: Type = 74;
    pub const ARM64_REG_H3: Type = 75;
    pub const ARM64_REG_H4: Type = 76;
    pub const ARM64_REG_H5: Type = 77;
    pub const ARM64_REG_H6: Type = 78;
    pub const ARM64_REG_H7: Type = 79;
    pub const ARM64_REG_H8: Type = 80;
    pub const ARM64_REG_H9: Type = 81;
    pub const ARM64_REG_H10: Type = 82;
    pub const ARM64_REG_H11: Type = 83;
    pub const ARM64_REG_H12: Type = 84;
    pub const ARM64_REG_H13: Type = 85;
    pub const ARM64_REG_H14: Type = 86;
    pub const ARM64_REG_H15: Type = 87;
    pub const ARM64_REG_H16: Type = 88;
    pub const ARM64_REG_H17: Type = 89;
    pub const ARM64_REG_H18: Type = 90;
    pub const ARM64_REG_H19: Type = 91;
    pub const ARM64_REG_H20: Type = 92;
    pub const ARM64_REG_H21: Type = 93;
    pub const ARM64_REG_H22: Type = 94;
    pub const ARM64_REG_H23: Type = 95;
    pub const ARM64_REG_H24: Type = 96;
    pub const ARM64_REG_H25: Type = 97;
    pub const ARM64_REG_H26: Type = 98;
    pub const ARM64_REG_H27: Type = 99;
    pub const ARM64_REG_H28: Type = 100;
    pub const ARM64_REG_H29: Type = 101;
    pub const ARM64_REG_H30: Type = 102;
    pub const ARM64_REG_H31: Type = 103;
    pub const ARM64_REG_Q0: Type = 104;
    pub const ARM64_REG_Q1: Type = 105;
    pub const ARM64_REG_Q2: Type = 106;
    pub const ARM64_REG_Q3: Type = 107;
    pub const ARM64_REG_Q4: Type = 108;
    pub const ARM64_REG_Q5: Type = 109;
    pub const ARM64_REG_Q6: Type = 110;
    pub const ARM64_REG_Q7: Type = 111;
    pub const ARM64_REG_Q8: Type = 112;
    pub const ARM64_REG_Q9: Type = 113;
    pub const ARM64_REG_Q10: Type = 114;
    pub const ARM64_REG_Q11: Type = 115;
    pub const ARM64_REG_Q12: Type = 116;
    pub const ARM64_REG_Q13: Type = 117;
    pub const ARM64_REG_Q14: Type = 118;
    pub const ARM64_REG_Q15: Type = 119;
    pub const ARM64_REG_Q16: Type = 120;
    pub const ARM64_REG_Q17: Type = 121;
    pub const ARM64_REG_Q18: Type = 122;
    pub const ARM64_REG_Q19: Type = 123;
    pub const ARM64_REG_Q20: Type = 124;
    pub const ARM64_REG_Q21: Type = 125;
    pub const ARM64_REG_Q22: Type = 126;
    pub const ARM64_REG_Q23: Type = 127;
    pub const ARM64_REG_Q24: Type = 128;
    pub const ARM64_REG_Q25: Type = 129;
    pub const ARM64_REG_Q26: Type = 130;
    pub const ARM64_REG_Q27: Type = 131;
    pub const ARM64_REG_Q28: Type = 132;
    pub const ARM64_REG_Q29: Type = 133;
    pub const ARM64_REG_Q30: Type = 134;
    pub const ARM64_REG_Q31: Type = 135;
    pub const ARM64_REG_S0: Type = 136;
    pub const ARM64_REG_S1: Type = 137;
    pub const ARM64_REG_S2: Type = 138;
    pub const ARM64_REG_S3: Type = 139;
    pub const ARM64_REG_S4: Type = 140;
    pub const ARM64_REG_S5: Type = 141;
    pub const ARM64_REG_S6: Type = 142;
    pub const ARM64_REG_S7: Type = 143;
    pub const ARM64_REG_S8: Type = 144;
    pub const ARM64_REG_S9: Type = 145;
    pub const ARM64_REG_S10: Type = 146;
    pub const ARM64_REG_S11: Type = 147;
    pub const ARM64_REG_S12: Type = 148;
    pub const ARM64_REG_S13: Type = 149;
    pub const ARM64_REG_S14: Type = 150;
    pub const ARM64_REG_S15: Type = 151;
    pub const ARM64_REG_S16: Type = 152;
    pub const ARM64_REG_S17: Type = 153;
    pub const ARM64_REG_S18: Type = 154;
    pub const ARM64_REG_S19: Type = 155;
    pub const ARM64_REG_S20: Type = 156;
    pub const ARM64_REG_S21: Type = 157;
    pub const ARM64_REG_S22: Type = 158;
    pub const ARM64_REG_S23: Type = 159;
    pub const ARM64_REG_S24: Type = 160;
    pub const ARM64_REG_S25: Type = 161;
    pub const ARM64_REG_S26: Type = 162;
    pub const ARM64_REG_S27: Type = 163;
    pub const ARM64_REG_S28: Type = 164;
    pub const ARM64_REG_S29: Type = 165;
    pub const ARM64_REG_S30: Type = 166;
    pub const ARM64_REG_S31: Type = 167;
    pub const ARM64_REG_W0: Type = 168;
    pub const ARM64_REG_W1: Type = 169;
    pub const ARM64_REG_W2: Type = 170;
    pub const ARM64_REG_W3: Type = 171;
    pub const ARM64_REG_W4: Type = 172;
    pub const ARM64_REG_W5: Type = 173;
    pub const ARM64_REG_W6: Type = 174;
    pub const ARM64_REG_W7: Type = 175;
    pub const ARM64_REG_W8: Type = 176;
    pub const ARM64_REG_W9: Type = 177;
    pub const ARM64_REG_W10: Type = 178;
    pub const ARM64_REG_W11: Type = 179;
    pub const ARM64_REG_W12: Type = 180;
    pub const ARM64_REG_W13: Type = 181;
    pub const ARM64_REG_W14: Type = 182;
    pub const ARM64_REG_W15: Type = 183;
    pub const ARM64_REG_W16: Type = 184;
    pub const ARM64_REG_W17: Type = 185;
    pub const ARM64_REG_W18: Type = 186;
    pub const ARM64_REG_W19: Type = 187;
    pub const ARM64_REG_W20: Type = 188;
    pub const ARM64_REG_W21: Type = 189;
    pub const ARM64_REG_W22: Type = 190;
    pub const ARM64_REG_W23: Type = 191;
    pub const ARM64_REG_W24: Type = 192;
    pub const ARM64_REG_W25: Type = 193;
    pub const ARM64_REG_W26: Type = 194;
    pub const ARM64_REG_W27: Type = 195;
    pub const ARM64_REG_W28: Type = 196;
    pub const ARM64_REG_W29: Type = 197;
    pub const ARM64_REG_W30: Type = 198;
    pub const ARM64_REG_X0: Type = 199;
    pub const ARM64_REG_X1: Type = 200;
    pub const ARM64_REG_X2: Type = 201;
    pub const ARM64_REG_X3: Type = 202;
    pub const ARM64_REG_X4: Type = 203;
    pub const ARM64_REG_X5: Type = 204;
    pub const ARM64_REG_X6: Type = 205;
    pub const ARM64_REG_X7: Type = 206;
    pub const ARM64_REG_X8: Type = 207;
    pub const ARM64_REG_X9: Type = 208;
    pub const ARM64_REG_X10: Type = 209;
    pub const ARM64_REG_X11: Type = 210;
    pub const ARM64_REG_X12: Type = 211;
    pub const ARM64_REG_X13: Type = 212;
    pub const ARM64_REG_X14: Type = 213;
    pub const ARM64_REG_X15: Type = 214;
    pub const ARM64_REG_X16: Type = 215;
    pub const ARM64_REG_X17: Type = 216;
    pub const ARM64_REG_X18: Type = 217;
    pub const ARM64_REG_X19: Type = 218;
    pub const ARM64_REG_X20: Type = 219;
    pub const ARM64_REG_X21: Type = 220;
    pub const ARM64_REG_X22: Type = 221;
    pub const ARM64_REG_X23: Type = 222;
    pub const ARM64_REG_X24: Type = 223;
    pub const ARM64_REG_X25: Type = 224;
    pub const ARM64_REG_X26: Type = 225;
    pub const ARM64_REG_X27: Type = 226;
    pub const ARM64_REG_X28: Type = 227;
    pub const ARM64_REG_V0: Type = 228;
    pub const ARM64_REG_V1: Type = 229;
    pub const ARM64_REG_V2: Type = 230;
    pub const ARM64_REG_V3: Type = 231;
    pub const ARM64_REG_V4: Type = 232;
    pub const ARM64_REG_V5: Type = 233;
    pub const ARM64_REG_V6: Type = 234;
    pub const ARM64_REG_V7: Type = 235;
    pub const ARM64_REG_V8: Type = 236;
    pub const ARM64_REG_V9: Type = 237;
    pub const ARM64_REG_V10: Type = 238;
    pub const ARM64_REG_V11: Type = 239;
    pub const ARM64_REG_V12: Type = 240;
    pub const ARM64_REG_V13: Type = 241;
    pub const ARM64_REG_V14: Type = 242;
    pub const ARM64_REG_V15: Type = 243;
    pub const ARM64_REG_V16: Type = 244;
    pub const ARM64_REG_V17: Type = 245;
    pub const ARM64_REG_V18: Type = 246;
    pub const ARM64_REG_V19: Type = 247;
    pub const ARM64_REG_V20: Type = 248;
    pub const ARM64_REG_V21: Type = 249;
    pub const ARM64_REG_V22: Type = 250;
    pub const ARM64_REG_V23: Type = 251;
    pub const ARM64_REG_V24: Type = 252;
    pub const ARM64_REG_V25: Type = 253;
    pub const ARM64_REG_V26: Type = 254;
    pub const ARM64_REG_V27: Type = 255;
    pub const ARM64_REG_V28: Type = 256;
    pub const ARM64_REG_V29: Type = 257;
    pub const ARM64_REG_V30: Type = 258;
    pub const ARM64_REG_V31: Type = 259;
    pub const ARM64_REG_ENDING: Type = 260;
    pub const ARM64_REG_IP0: Type = 215;
    pub const ARM64_REG_IP1: Type = 216;
    pub const ARM64_REG_FP: Type = 1;
    pub const ARM64_REG_LR: Type = 2;
}
pub mod arm64_insn {
    pub type Type = u32;
    pub const ARM64_INS_INVALID: Type = 0;
    pub const ARM64_INS_ABS: Type = 1;
    pub const ARM64_INS_ADC: Type = 2;
    pub const ARM64_INS_ADDHN: Type = 3;
    pub const ARM64_INS_ADDHN2: Type = 4;
    pub const ARM64_INS_ADDP: Type = 5;
    pub const ARM64_INS_ADD: Type = 6;
    pub const ARM64_INS_ADDV: Type = 7;
    pub const ARM64_INS_ADR: Type = 8;
    pub const ARM64_INS_ADRP: Type = 9;
    pub const ARM64_INS_AESD: Type = 10;
    pub const ARM64_INS_AESE: Type = 11;
    pub const ARM64_INS_AESIMC: Type = 12;
    pub const ARM64_INS_AESMC: Type = 13;
    pub const ARM64_INS_AND: Type = 14;
    pub const ARM64_INS_ASR: Type = 15;
    pub const ARM64_INS_B: Type = 16;
    pub const ARM64_INS_BFM: Type = 17;
    pub const ARM64_INS_BIC: Type = 18;
    pub const ARM64_INS_BIF: Type = 19;
    pub const ARM64_INS_BIT: Type = 20;
    pub const ARM64_INS_BL: Type = 21;
    pub const ARM64_INS_BLR: Type = 22;
    pub const ARM64_INS_BR: Type = 23;
    pub const ARM64_INS_BRK: Type = 24;
    pub const ARM64_INS_BSL: Type = 25;
    pub const ARM64_INS_CBNZ: Type = 26;
    pub const ARM64_INS_CBZ: Type = 27;
    pub const ARM64_INS_CCMN: Type = 28;
    pub const ARM64_INS_CCMP: Type = 29;
    pub const ARM64_INS_CLREX: Type = 30;
    pub const ARM64_INS_CLS: Type = 31;
    pub const ARM64_INS_CLZ: Type = 32;
    pub const ARM64_INS_CMEQ: Type = 33;
    pub const ARM64_INS_CMGE: Type = 34;
    pub const ARM64_INS_CMGT: Type = 35;
    pub const ARM64_INS_CMHI: Type = 36;
    pub const ARM64_INS_CMHS: Type = 37;
    pub const ARM64_INS_CMLE: Type = 38;
    pub const ARM64_INS_CMLT: Type = 39;
    pub const ARM64_INS_CMTST: Type = 40;
    pub const ARM64_INS_CNT: Type = 41;
    pub const ARM64_INS_MOV: Type = 42;
    pub const ARM64_INS_CRC32B: Type = 43;
    pub const ARM64_INS_CRC32CB: Type = 44;
    pub const ARM64_INS_CRC32CH: Type = 45;
    pub const ARM64_INS_CRC32CW: Type = 46;
    pub const ARM64_INS_CRC32CX: Type = 47;
    pub const ARM64_INS_CRC32H: Type = 48;
    pub const ARM64_INS_CRC32W: Type = 49;
    pub const ARM64_INS_CRC32X: Type = 50;
    pub const ARM64_INS_CSEL: Type = 51;
    pub const ARM64_INS_CSINC: Type = 52;
    pub const ARM64_INS_CSINV: Type = 53;
    pub const ARM64_INS_CSNEG: Type = 54;
    pub const ARM64_INS_DCPS1: Type = 55;
    pub const ARM64_INS_DCPS2: Type = 56;
    pub const ARM64_INS_DCPS3: Type = 57;
    pub const ARM64_INS_DMB: Type = 58;
    pub const ARM64_INS_DRPS: Type = 59;
    pub const ARM64_INS_DSB: Type = 60;
    pub const ARM64_INS_DUP: Type = 61;
    pub const ARM64_INS_EON: Type = 62;
    pub const ARM64_INS_EOR: Type = 63;
    pub const ARM64_INS_ERET: Type = 64;
    pub const ARM64_INS_EXTR: Type = 65;
    pub const ARM64_INS_EXT: Type = 66;
    pub const ARM64_INS_FABD: Type = 67;
    pub const ARM64_INS_FABS: Type = 68;
    pub const ARM64_INS_FACGE: Type = 69;
    pub const ARM64_INS_FACGT: Type = 70;
    pub const ARM64_INS_FADD: Type = 71;
    pub const ARM64_INS_FADDP: Type = 72;
    pub const ARM64_INS_FCCMP: Type = 73;
    pub const ARM64_INS_FCCMPE: Type = 74;
    pub const ARM64_INS_FCMEQ: Type = 75;
    pub const ARM64_INS_FCMGE: Type = 76;
    pub const ARM64_INS_FCMGT: Type = 77;
    pub const ARM64_INS_FCMLE: Type = 78;
    pub const ARM64_INS_FCMLT: Type = 79;
    pub const ARM64_INS_FCMP: Type = 80;
    pub const ARM64_INS_FCMPE: Type = 81;
    pub const ARM64_INS_FCSEL: Type = 82;
    pub const ARM64_INS_FCVTAS: Type = 83;
    pub const ARM64_INS_FCVTAU: Type = 84;
    pub const ARM64_INS_FCVT: Type = 85;
    pub const ARM64_INS_FCVTL: Type = 86;
    pub const ARM64_INS_FCVTL2: Type = 87;
    pub const ARM64_INS_FCVTMS: Type = 88;
    pub const ARM64_INS_FCVTMU: Type = 89;
    pub const ARM64_INS_FCVTNS: Type = 90;
    pub const ARM64_INS_FCVTNU: Type = 91;
    pub const ARM64_INS_FCVTN: Type = 92;
    pub const ARM64_INS_FCVTN2: Type = 93;
    pub const ARM64_INS_FCVTPS: Type = 94;
    pub const ARM64_INS_FCVTPU: Type = 95;
    pub const ARM64_INS_FCVTXN: Type = 96;
    pub const ARM64_INS_FCVTXN2: Type = 97;
    pub const ARM64_INS_FCVTZS: Type = 98;
    pub const ARM64_INS_FCVTZU: Type = 99;
    pub const ARM64_INS_FDIV: Type = 100;
    pub const ARM64_INS_FMADD: Type = 101;
    pub const ARM64_INS_FMAX: Type = 102;
    pub const ARM64_INS_FMAXNM: Type = 103;
    pub const ARM64_INS_FMAXNMP: Type = 104;
    pub const ARM64_INS_FMAXNMV: Type = 105;
    pub const ARM64_INS_FMAXP: Type = 106;
    pub const ARM64_INS_FMAXV: Type = 107;
    pub const ARM64_INS_FMIN: Type = 108;
    pub const ARM64_INS_FMINNM: Type = 109;
    pub const ARM64_INS_FMINNMP: Type = 110;
    pub const ARM64_INS_FMINNMV: Type = 111;
    pub const ARM64_INS_FMINP: Type = 112;
    pub const ARM64_INS_FMINV: Type = 113;
    pub const ARM64_INS_FMLA: Type = 114;
    pub const ARM64_INS_FMLS: Type = 115;
    pub const ARM64_INS_FMOV: Type = 116;
    pub const ARM64_INS_FMSUB: Type = 117;
    pub const ARM64_INS_FMUL: Type = 118;
    pub const ARM64_INS_FMULX: Type = 119;
    pub const ARM64_INS_FNEG: Type = 120;
    pub const ARM64_INS_FNMADD: Type = 121;
    pub const ARM64_INS_FNMSUB: Type = 122;
    pub const ARM64_INS_FNMUL: Type = 123;
    pub const ARM64_INS_FRECPE: Type = 124;
    pub const ARM64_INS_FRECPS: Type = 125;
    pub const ARM64_INS_FRECPX: Type = 126;
    pub const ARM64_INS_FRINTA: Type = 127;
    pub const ARM64_INS_FRINTI: Type = 128;
    pub const ARM64_INS_FRINTM: Type = 129;
    pub const ARM64_INS_FRINTN: Type = 130;
    pub const ARM64_INS_FRINTP: Type = 131;
    pub const ARM64_INS_FRINTX: Type = 132;
    pub const ARM64_INS_FRINTZ: Type = 133;
    pub const ARM64_INS_FRSQRTE: Type = 134;
    pub const ARM64_INS_FRSQRTS: Type = 135;
    pub const ARM64_INS_FSQRT: Type = 136;
    pub const ARM64_INS_FSUB: Type = 137;
    pub const ARM64_INS_HINT: Type = 138;
    pub const ARM64_INS_HLT: Type = 139;
    pub const ARM64_INS_HVC: Type = 140;
    pub const ARM64_INS_INS: Type = 141;
    pub const ARM64_INS_ISB: Type = 142;
    pub const ARM64_INS_LD1: Type = 143;
    pub const ARM64_INS_LD1R: Type = 144;
    pub const ARM64_INS_LD2R: Type = 145;
    pub const ARM64_INS_LD2: Type = 146;
    pub const ARM64_INS_LD3R: Type = 147;
    pub const ARM64_INS_LD3: Type = 148;
    pub const ARM64_INS_LD4: Type = 149;
    pub const ARM64_INS_LD4R: Type = 150;
    pub const ARM64_INS_LDARB: Type = 151;
    pub const ARM64_INS_LDARH: Type = 152;
    pub const ARM64_INS_LDAR: Type = 153;
    pub const ARM64_INS_LDAXP: Type = 154;
    pub const ARM64_INS_LDAXRB: Type = 155;
    pub const ARM64_INS_LDAXRH: Type = 156;
    pub const ARM64_INS_LDAXR: Type = 157;
    pub const ARM64_INS_LDNP: Type = 158;
    pub const ARM64_INS_LDP: Type = 159;
    pub const ARM64_INS_LDPSW: Type = 160;
    pub const ARM64_INS_LDRB: Type = 161;
    pub const ARM64_INS_LDR: Type = 162;
    pub const ARM64_INS_LDRH: Type = 163;
    pub const ARM64_INS_LDRSB: Type = 164;
    pub const ARM64_INS_LDRSH: Type = 165;
    pub const ARM64_INS_LDRSW: Type = 166;
    pub const ARM64_INS_LDTRB: Type = 167;
    pub const ARM64_INS_LDTRH: Type = 168;
    pub const ARM64_INS_LDTRSB: Type = 169;
    pub const ARM64_INS_LDTRSH: Type = 170;
    pub const ARM64_INS_LDTRSW: Type = 171;
    pub const ARM64_INS_LDTR: Type = 172;
    pub const ARM64_INS_LDURB: Type = 173;
    pub const ARM64_INS_LDUR: Type = 174;
    pub const ARM64_INS_LDURH: Type = 175;
    pub const ARM64_INS_LDURSB: Type = 176;
    pub const ARM64_INS_LDURSH: Type = 177;
    pub const ARM64_INS_LDURSW: Type = 178;
    pub const ARM64_INS_LDXP: Type = 179;
    pub const ARM64_INS_LDXRB: Type = 180;
    pub const ARM64_INS_LDXRH: Type = 181;
    pub const ARM64_INS_LDXR: Type = 182;
    pub const ARM64_INS_LSL: Type = 183;
    pub const ARM64_INS_LSR: Type = 184;
    pub const ARM64_INS_MADD: Type = 185;
    pub const ARM64_INS_MLA: Type = 186;
    pub const ARM64_INS_MLS: Type = 187;
    pub const ARM64_INS_MOVI: Type = 188;
    pub const ARM64_INS_MOVK: Type = 189;
    pub const ARM64_INS_MOVN: Type = 190;
    pub const ARM64_INS_MOVZ: Type = 191;
    pub const ARM64_INS_MRS: Type = 192;
    pub const ARM64_INS_MSR: Type = 193;
    pub const ARM64_INS_MSUB: Type = 194;
    pub const ARM64_INS_MUL: Type = 195;
    pub const ARM64_INS_MVNI: Type = 196;
    pub const ARM64_INS_NEG: Type = 197;
    pub const ARM64_INS_NOT: Type = 198;
    pub const ARM64_INS_ORN: Type = 199;
    pub const ARM64_INS_ORR: Type = 200;
    pub const ARM64_INS_PMULL2: Type = 201;
    pub const ARM64_INS_PMULL: Type = 202;
    pub const ARM64_INS_PMUL: Type = 203;
    pub const ARM64_INS_PRFM: Type = 204;
    pub const ARM64_INS_PRFUM: Type = 205;
    pub const ARM64_INS_RADDHN: Type = 206;
    pub const ARM64_INS_RADDHN2: Type = 207;
    pub const ARM64_INS_RBIT: Type = 208;
    pub const ARM64_INS_RET: Type = 209;
    pub const ARM64_INS_REV16: Type = 210;
    pub const ARM64_INS_REV32: Type = 211;
    pub const ARM64_INS_REV64: Type = 212;
    pub const ARM64_INS_REV: Type = 213;
    pub const ARM64_INS_ROR: Type = 214;
    pub const ARM64_INS_RSHRN2: Type = 215;
    pub const ARM64_INS_RSHRN: Type = 216;
    pub const ARM64_INS_RSUBHN: Type = 217;
    pub const ARM64_INS_RSUBHN2: Type = 218;
    pub const ARM64_INS_SABAL2: Type = 219;
    pub const ARM64_INS_SABAL: Type = 220;
    pub const ARM64_INS_SABA: Type = 221;
    pub const ARM64_INS_SABDL2: Type = 222;
    pub const ARM64_INS_SABDL: Type = 223;
    pub const ARM64_INS_SABD: Type = 224;
    pub const ARM64_INS_SADALP: Type = 225;
    pub const ARM64_INS_SADDLP: Type = 226;
    pub const ARM64_INS_SADDLV: Type = 227;
    pub const ARM64_INS_SADDL2: Type = 228;
    pub const ARM64_INS_SADDL: Type = 229;
    pub const ARM64_INS_SADDW2: Type = 230;
    pub const ARM64_INS_SADDW: Type = 231;
    pub const ARM64_INS_SBC: Type = 232;
    pub const ARM64_INS_SBFM: Type = 233;
    pub const ARM64_INS_SCVTF: Type = 234;
    pub const ARM64_INS_SDIV: Type = 235;
    pub const ARM64_INS_SHA1C: Type = 236;
    pub const ARM64_INS_SHA1H: Type = 237;
    pub const ARM64_INS_SHA1M: Type = 238;
    pub const ARM64_INS_SHA1P: Type = 239;
    pub const ARM64_INS_SHA1SU0: Type = 240;
    pub const ARM64_INS_SHA1SU1: Type = 241;
    pub const ARM64_INS_SHA256H2: Type = 242;
    pub const ARM64_INS_SHA256H: Type = 243;
    pub const ARM64_INS_SHA256SU0: Type = 244;
    pub const ARM64_INS_SHA256SU1: Type = 245;
    pub const ARM64_INS_SHADD: Type = 246;
    pub const ARM64_INS_SHLL2: Type = 247;
    pub const ARM64_INS_SHLL: Type = 248;
    pub const ARM64_INS_SHL: Type = 249;
    pub const ARM64_INS_SHRN2: Type = 250;
    pub const ARM64_INS_SHRN: Type = 251;
    pub const ARM64_INS_SHSUB: Type = 252;
    pub const ARM64_INS_SLI: Type = 253;
    pub const ARM64_INS_SMADDL: Type = 254;
    pub const ARM64_INS_SMAXP: Type = 255;
    pub const ARM64_INS_SMAXV: Type = 256;
    pub const ARM64_INS_SMAX: Type = 257;
    pub const ARM64_INS_SMC: Type = 258;
    pub const ARM64_INS_SMINP: Type = 259;
    pub const ARM64_INS_SMINV: Type = 260;
    pub const ARM64_INS_SMIN: Type = 261;
    pub const ARM64_INS_SMLAL2: Type = 262;
    pub const ARM64_INS_SMLAL: Type = 263;
    pub const ARM64_INS_SMLSL2: Type = 264;
    pub const ARM64_INS_SMLSL: Type = 265;
    pub const ARM64_INS_SMOV: Type = 266;
    pub const ARM64_INS_SMSUBL: Type = 267;
    pub const ARM64_INS_SMULH: Type = 268;
    pub const ARM64_INS_SMULL2: Type = 269;
    pub const ARM64_INS_SMULL: Type = 270;
    pub const ARM64_INS_SQABS: Type = 271;
    pub const ARM64_INS_SQADD: Type = 272;
    pub const ARM64_INS_SQDMLAL: Type = 273;
    pub const ARM64_INS_SQDMLAL2: Type = 274;
    pub const ARM64_INS_SQDMLSL: Type = 275;
    pub const ARM64_INS_SQDMLSL2: Type = 276;
    pub const ARM64_INS_SQDMULH: Type = 277;
    pub const ARM64_INS_SQDMULL: Type = 278;
    pub const ARM64_INS_SQDMULL2: Type = 279;
    pub const ARM64_INS_SQNEG: Type = 280;
    pub const ARM64_INS_SQRDMULH: Type = 281;
    pub const ARM64_INS_SQRSHL: Type = 282;
    pub const ARM64_INS_SQRSHRN: Type = 283;
    pub const ARM64_INS_SQRSHRN2: Type = 284;
    pub const ARM64_INS_SQRSHRUN: Type = 285;
    pub const ARM64_INS_SQRSHRUN2: Type = 286;
    pub const ARM64_INS_SQSHLU: Type = 287;
    pub const ARM64_INS_SQSHL: Type = 288;
    pub const ARM64_INS_SQSHRN: Type = 289;
    pub const ARM64_INS_SQSHRN2: Type = 290;
    pub const ARM64_INS_SQSHRUN: Type = 291;
    pub const ARM64_INS_SQSHRUN2: Type = 292;
    pub const ARM64_INS_SQSUB: Type = 293;
    pub const ARM64_INS_SQXTN2: Type = 294;
    pub const ARM64_INS_SQXTN: Type = 295;
    pub const ARM64_INS_SQXTUN2: Type = 296;
    pub const ARM64_INS_SQXTUN: Type = 297;
    pub const ARM64_INS_SRHADD: Type = 298;
    pub const ARM64_INS_SRI: Type = 299;
    pub const ARM64_INS_SRSHL: Type = 300;
    pub const ARM64_INS_SRSHR: Type = 301;
    pub const ARM64_INS_SRSRA: Type = 302;
    pub const ARM64_INS_SSHLL2: Type = 303;
    pub const ARM64_INS_SSHLL: Type = 304;
    pub const ARM64_INS_SSHL: Type = 305;
    pub const ARM64_INS_SSHR: Type = 306;
    pub const ARM64_INS_SSRA: Type = 307;
    pub const ARM64_INS_SSUBL2: Type = 308;
    pub const ARM64_INS_SSUBL: Type = 309;
    pub const ARM64_INS_SSUBW2: Type = 310;
    pub const ARM64_INS_SSUBW: Type = 311;
    pub const ARM64_INS_ST1: Type = 312;
    pub const ARM64_INS_ST2: Type = 313;
    pub const ARM64_INS_ST3: Type = 314;
    pub const ARM64_INS_ST4: Type = 315;
    pub const ARM64_INS_STLRB: Type = 316;
    pub const ARM64_INS_STLRH: Type = 317;
    pub const ARM64_INS_STLR: Type = 318;
    pub const ARM64_INS_STLXP: Type = 319;
    pub const ARM64_INS_STLXRB: Type = 320;
    pub const ARM64_INS_STLXRH: Type = 321;
    pub const ARM64_INS_STLXR: Type = 322;
    pub const ARM64_INS_STNP: Type = 323;
    pub const ARM64_INS_STP: Type = 324;
    pub const ARM64_INS_STRB: Type = 325;
    pub const ARM64_INS_STR: Type = 326;
    pub const ARM64_INS_STRH: Type = 327;
    pub const ARM64_INS_STTRB: Type = 328;
    pub const ARM64_INS_STTRH: Type = 329;
    pub const ARM64_INS_STTR: Type = 330;
    pub const ARM64_INS_STURB: Type = 331;
    pub const ARM64_INS_STUR: Type = 332;
    pub const ARM64_INS_STURH: Type = 333;
    pub const ARM64_INS_STXP: Type = 334;
    pub const ARM64_INS_STXRB: Type = 335;
    pub const ARM64_INS_STXRH: Type = 336;
    pub const ARM64_INS_STXR: Type = 337;
    pub const ARM64_INS_SUBHN: Type = 338;
    pub const ARM64_INS_SUBHN2: Type = 339;
    pub const ARM64_INS_SUB: Type = 340;
    pub const ARM64_INS_SUQADD: Type = 341;
    pub const ARM64_INS_SVC: Type = 342;
    pub const ARM64_INS_SYSL: Type = 343;
    pub const ARM64_INS_SYS: Type = 344;
    pub const ARM64_INS_TBL: Type = 345;
    pub const ARM64_INS_TBNZ: Type = 346;
    pub const ARM64_INS_TBX: Type = 347;
    pub const ARM64_INS_TBZ: Type = 348;
    pub const ARM64_INS_TRN1: Type = 349;
    pub const ARM64_INS_TRN2: Type = 350;
    pub const ARM64_INS_UABAL2: Type = 351;
    pub const ARM64_INS_UABAL: Type = 352;
    pub const ARM64_INS_UABA: Type = 353;
    pub const ARM64_INS_UABDL2: Type = 354;
    pub const ARM64_INS_UABDL: Type = 355;
    pub const ARM64_INS_UABD: Type = 356;
    pub const ARM64_INS_UADALP: Type = 357;
    pub const ARM64_INS_UADDLP: Type = 358;
    pub const ARM64_INS_UADDLV: Type = 359;
    pub const ARM64_INS_UADDL2: Type = 360;
    pub const ARM64_INS_UADDL: Type = 361;
    pub const ARM64_INS_UADDW2: Type = 362;
    pub const ARM64_INS_UADDW: Type = 363;
    pub const ARM64_INS_UBFM: Type = 364;
    pub const ARM64_INS_UCVTF: Type = 365;
    pub const ARM64_INS_UDIV: Type = 366;
    pub const ARM64_INS_UHADD: Type = 367;
    pub const ARM64_INS_UHSUB: Type = 368;
    pub const ARM64_INS_UMADDL: Type = 369;
    pub const ARM64_INS_UMAXP: Type = 370;
    pub const ARM64_INS_UMAXV: Type = 371;
    pub const ARM64_INS_UMAX: Type = 372;
    pub const ARM64_INS_UMINP: Type = 373;
    pub const ARM64_INS_UMINV: Type = 374;
    pub const ARM64_INS_UMIN: Type = 375;
    pub const ARM64_INS_UMLAL2: Type = 376;
    pub const ARM64_INS_UMLAL: Type = 377;
    pub const ARM64_INS_UMLSL2: Type = 378;
    pub const ARM64_INS_UMLSL: Type = 379;
    pub const ARM64_INS_UMOV: Type = 380;
    pub const ARM64_INS_UMSUBL: Type = 381;
    pub const ARM64_INS_UMULH: Type = 382;
    pub const ARM64_INS_UMULL2: Type = 383;
    pub const ARM64_INS_UMULL: Type = 384;
    pub const ARM64_INS_UQADD: Type = 385;
    pub const ARM64_INS_UQRSHL: Type = 386;
    pub const ARM64_INS_UQRSHRN: Type = 387;
    pub const ARM64_INS_UQRSHRN2: Type = 388;
    pub const ARM64_INS_UQSHL: Type = 389;
    pub const ARM64_INS_UQSHRN: Type = 390;
    pub const ARM64_INS_UQSHRN2: Type = 391;
    pub const ARM64_INS_UQSUB: Type = 392;
    pub const ARM64_INS_UQXTN2: Type = 393;
    pub const ARM64_INS_UQXTN: Type = 394;
    pub const ARM64_INS_URECPE: Type = 395;
    pub const ARM64_INS_URHADD: Type = 396;
    pub const ARM64_INS_URSHL: Type = 397;
    pub const ARM64_INS_URSHR: Type = 398;
    pub const ARM64_INS_URSQRTE: Type = 399;
    pub const ARM64_INS_URSRA: Type = 400;
    pub const ARM64_INS_USHLL2: Type = 401;
    pub const ARM64_INS_USHLL: Type = 402;
    pub const ARM64_INS_USHL: Type = 403;
    pub const ARM64_INS_USHR: Type = 404;
    pub const ARM64_INS_USQADD: Type = 405;
    pub const ARM64_INS_USRA: Type = 406;
    pub const ARM64_INS_USUBL2: Type = 407;
    pub const ARM64_INS_USUBL: Type = 408;
    pub const ARM64_INS_USUBW2: Type = 409;
    pub const ARM64_INS_USUBW: Type = 410;
    pub const ARM64_INS_UZP1: Type = 411;
    pub const ARM64_INS_UZP2: Type = 412;
    pub const ARM64_INS_XTN2: Type = 413;
    pub const ARM64_INS_XTN: Type = 414;
    pub const ARM64_INS_ZIP1: Type = 415;
    pub const ARM64_INS_ZIP2: Type = 416;
    pub const ARM64_INS_MNEG: Type = 417;
    pub const ARM64_INS_UMNEGL: Type = 418;
    pub const ARM64_INS_SMNEGL: Type = 419;
    pub const ARM64_INS_NOP: Type = 420;
    pub const ARM64_INS_YIELD: Type = 421;
    pub const ARM64_INS_WFE: Type = 422;
    pub const ARM64_INS_WFI: Type = 423;
    pub const ARM64_INS_SEV: Type = 424;
    pub const ARM64_INS_SEVL: Type = 425;
    pub const ARM64_INS_NGC: Type = 426;
    pub const ARM64_INS_SBFIZ: Type = 427;
    pub const ARM64_INS_UBFIZ: Type = 428;
    pub const ARM64_INS_SBFX: Type = 429;
    pub const ARM64_INS_UBFX: Type = 430;
    pub const ARM64_INS_BFI: Type = 431;
    pub const ARM64_INS_BFXIL: Type = 432;
    pub const ARM64_INS_CMN: Type = 433;
    pub const ARM64_INS_MVN: Type = 434;
    pub const ARM64_INS_TST: Type = 435;
    pub const ARM64_INS_CSET: Type = 436;
    pub const ARM64_INS_CINC: Type = 437;
    pub const ARM64_INS_CSETM: Type = 438;
    pub const ARM64_INS_CINV: Type = 439;
    pub const ARM64_INS_CNEG: Type = 440;
    pub const ARM64_INS_SXTB: Type = 441;
    pub const ARM64_INS_SXTH: Type = 442;
    pub const ARM64_INS_SXTW: Type = 443;
    pub const ARM64_INS_CMP: Type = 444;
    pub const ARM64_INS_UXTB: Type = 445;
    pub const ARM64_INS_UXTH: Type = 446;
    pub const ARM64_INS_UXTW: Type = 447;
    pub const ARM64_INS_IC: Type = 448;
    pub const ARM64_INS_DC: Type = 449;
    pub const ARM64_INS_AT: Type = 450;
    pub const ARM64_INS_TLBI: Type = 451;
    pub const ARM64_INS_ENDING: Type = 452;
}
pub mod arm64_insn_group {
    pub type Type = u32;
    pub const ARM64_GRP_INVALID: Type = 0;
    pub const ARM64_GRP_JUMP: Type = 1;
    pub const ARM64_GRP_CRYPTO: Type = 128;
    pub const ARM64_GRP_FPARMV8: Type = 129;
    pub const ARM64_GRP_NEON: Type = 130;
    pub const ARM64_GRP_CRC: Type = 131;
    pub const ARM64_GRP_ENDING: Type = 132;
}
pub mod mips_op_type {
    pub type Type = u32;
    pub const MIPS_OP_INVALID: Type = 0;
    pub const MIPS_OP_REG: Type = 1;
    pub const MIPS_OP_IMM: Type = 2;
    pub const MIPS_OP_MEM: Type = 3;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct mips_op_mem {
    pub base: ::std::os::raw::c_uint,
    pub disp: i64,
}
impl Clone for mips_op_mem {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct cs_mips_op {
    pub type_: mips_op_type::Type,
    pub __bindgen_anon_1: cs_mips_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy)]
pub union cs_mips_op__bindgen_ty_1 {
    pub reg: ::std::os::raw::c_uint,
    pub imm: i64,
    pub mem: mips_op_mem,
    _bindgen_union_align: [u64; 2usize],
}
impl Clone for cs_mips_op__bindgen_ty_1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::fmt::Debug for cs_mips_op__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "cs_mips_op__bindgen_ty_1 {{ union }}")
    }
}
impl Clone for cs_mips_op {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::fmt::Debug for cs_mips_op {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "cs_mips_op {{ type: {:?}, __bindgen_anon_1: {:?} }}",
            self.type_, self.__bindgen_anon_1
        )
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct cs_mips {
    pub op_count: u8,
    pub operands: [cs_mips_op; 8usize],
}
impl Clone for cs_mips {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::fmt::Debug for cs_mips {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "cs_mips {{ op_count: {:?}, operands: {:?} }}",
            self.op_count, self.operands
        )
    }
}
pub mod mips_reg {
    pub type Type = u32;
    pub const MIPS_REG_INVALID: Type = 0;
    pub const MIPS_REG_0: Type = 1;
    pub const MIPS_REG_1: Type = 2;
    pub const MIPS_REG_2: Type = 3;
    pub const MIPS_REG_3: Type = 4;
    pub const MIPS_REG_4: Type = 5;
    pub const MIPS_REG_5: Type = 6;
    pub const MIPS_REG_6: Type = 7;
    pub const MIPS_REG_7: Type = 8;
    pub const MIPS_REG_8: Type = 9;
    pub const MIPS_REG_9: Type = 10;
    pub const MIPS_REG_10: Type = 11;
    pub const MIPS_REG_11: Type = 12;
    pub const MIPS_REG_12: Type = 13;
    pub const MIPS_REG_13: Type = 14;
    pub const MIPS_REG_14: Type = 15;
    pub const MIPS_REG_15: Type = 16;
    pub const MIPS_REG_16: Type = 17;
    pub const MIPS_REG_17: Type = 18;
    pub const MIPS_REG_18: Type = 19;
    pub const MIPS_REG_19: Type = 20;
    pub const MIPS_REG_20: Type = 21;
    pub const MIPS_REG_21: Type = 22;
    pub const MIPS_REG_22: Type = 23;
    pub const MIPS_REG_23: Type = 24;
    pub const MIPS_REG_24: Type = 25;
    pub const MIPS_REG_25: Type = 26;
    pub const MIPS_REG_26: Type = 27;
    pub const MIPS_REG_27: Type = 28;
    pub const MIPS_REG_28: Type = 29;
    pub const MIPS_REG_29: Type = 30;
    pub const MIPS_REG_30: Type = 31;
    pub const MIPS_REG_31: Type = 32;
    pub const MIPS_REG_DSPCCOND: Type = 33;
    pub const MIPS_REG_DSPCARRY: Type = 34;
    pub const MIPS_REG_DSPEFI: Type = 35;
    pub const MIPS_REG_DSPOUTFLAG: Type = 36;
    pub const MIPS_REG_DSPOUTFLAG16_19: Type = 37;
    pub const MIPS_REG_DSPOUTFLAG20: Type = 38;
    pub const MIPS_REG_DSPOUTFLAG21: Type = 39;
    pub const MIPS_REG_DSPOUTFLAG22: Type = 40;
    pub const MIPS_REG_DSPOUTFLAG23: Type = 41;
    pub const MIPS_REG_DSPPOS: Type = 42;
    pub const MIPS_REG_DSPSCOUNT: Type = 43;
    pub const MIPS_REG_AC0: Type = 44;
    pub const MIPS_REG_AC1: Type = 45;
    pub const MIPS_REG_AC2: Type = 46;
    pub const MIPS_REG_AC3: Type = 47;
    pub const MIPS_REG_CC0: Type = 48;
    pub const MIPS_REG_CC1: Type = 49;
    pub const MIPS_REG_CC2: Type = 50;
    pub const MIPS_REG_CC3: Type = 51;
    pub const MIPS_REG_CC4: Type = 52;
    pub const MIPS_REG_CC5: Type = 53;
    pub const MIPS_REG_CC6: Type = 54;
    pub const MIPS_REG_CC7: Type = 55;
    pub const MIPS_REG_F0: Type = 56;
    pub const MIPS_REG_F1: Type = 57;
    pub const MIPS_REG_F2: Type = 58;
    pub const MIPS_REG_F3: Type = 59;
    pub const MIPS_REG_F4: Type = 60;
    pub const MIPS_REG_F5: Type = 61;
    pub const MIPS_REG_F6: Type = 62;
    pub const MIPS_REG_F7: Type = 63;
    pub const MIPS_REG_F8: Type = 64;
    pub const MIPS_REG_F9: Type = 65;
    pub const MIPS_REG_F10: Type = 66;
    pub const MIPS_REG_F11: Type = 67;
    pub const MIPS_REG_F12: Type = 68;
    pub const MIPS_REG_F13: Type = 69;
    pub const MIPS_REG_F14: Type = 70;
    pub const MIPS_REG_F15: Type = 71;
    pub const MIPS_REG_F16: Type = 72;
    pub const MIPS_REG_F17: Type = 73;
    pub const MIPS_REG_F18: Type = 74;
    pub const MIPS_REG_F19: Type = 75;
    pub const MIPS_REG_F20: Type = 76;
    pub const MIPS_REG_F21: Type = 77;
    pub const MIPS_REG_F22: Type = 78;
    pub const MIPS_REG_F23: Type = 79;
    pub const MIPS_REG_F24: Type = 80;
    pub const MIPS_REG_F25: Type = 81;
    pub const MIPS_REG_F26: Type = 82;
    pub const MIPS_REG_F27: Type = 83;
    pub const MIPS_REG_F28: Type = 84;
    pub const MIPS_REG_F29: Type = 85;
    pub const MIPS_REG_F30: Type = 86;
    pub const MIPS_REG_F31: Type = 87;
    pub const MIPS_REG_FCC0: Type = 88;
    pub const MIPS_REG_FCC1: Type = 89;
    pub const MIPS_REG_FCC2: Type = 90;
    pub const MIPS_REG_FCC3: Type = 91;
    pub const MIPS_REG_FCC4: Type = 92;
    pub const MIPS_REG_FCC5: Type = 93;
    pub const MIPS_REG_FCC6: Type = 94;
    pub const MIPS_REG_FCC7: Type = 95;
    pub const MIPS_REG_W0: Type = 96;
    pub const MIPS_REG_W1: Type = 97;
    pub const MIPS_REG_W2: Type = 98;
    pub const MIPS_REG_W3: Type = 99;
    pub const MIPS_REG_W4: Type = 100;
    pub const MIPS_REG_W5: Type = 101;
    pub const MIPS_REG_W6: Type = 102;
    pub const MIPS_REG_W7: Type = 103;
    pub const MIPS_REG_W8: Type = 104;
    pub const MIPS_REG_W9: Type = 105;
    pub const MIPS_REG_W10: Type = 106;
    pub const MIPS_REG_W11: Type = 107;
    pub const MIPS_REG_W12: Type = 108;
    pub const MIPS_REG_W13: Type = 109;
    pub const MIPS_REG_W14: Type = 110;
    pub const MIPS_REG_W15: Type = 111;
    pub const MIPS_REG_W16: Type = 112;
    pub const MIPS_REG_W17: Type = 113;
    pub const MIPS_REG_W18: Type = 114;
    pub const MIPS_REG_W19: Type = 115;
    pub const MIPS_REG_W20: Type = 116;
    pub const MIPS_REG_W21: Type = 117;
    pub const MIPS_REG_W22: Type = 118;
    pub const MIPS_REG_W23: Type = 119;
    pub const MIPS_REG_W24: Type = 120;
    pub const MIPS_REG_W25: Type = 121;
    pub const MIPS_REG_W26: Type = 122;
    pub const MIPS_REG_W27: Type = 123;
    pub const MIPS_REG_W28: Type = 124;
    pub const MIPS_REG_W29: Type = 125;
    pub const MIPS_REG_W30: Type = 126;
    pub const MIPS_REG_W31: Type = 127;
    pub const MIPS_REG_HI: Type = 128;
    pub const MIPS_REG_LO: Type = 129;
    pub const MIPS_REG_P0: Type = 130;
    pub const MIPS_REG_P1: Type = 131;
    pub const MIPS_REG_P2: Type = 132;
    pub const MIPS_REG_MPL0: Type = 133;
    pub const MIPS_REG_MPL1: Type = 134;
    pub const MIPS_REG_MPL2: Type = 135;
    pub const MIPS_REG_ENDING: Type = 136;
    pub const MIPS_REG_ZERO: Type = 1;
    pub const MIPS_REG_AT: Type = 2;
    pub const MIPS_REG_V0: Type = 3;
    pub const MIPS_REG_V1: Type = 4;
    pub const MIPS_REG_A0: Type = 5;
    pub const MIPS_REG_A1: Type = 6;
    pub const MIPS_REG_A2: Type = 7;
    pub const MIPS_REG_A3: Type = 8;
    pub const MIPS_REG_T0: Type = 9;
    pub const MIPS_REG_T1: Type = 10;
    pub const MIPS_REG_T2: Type = 11;
    pub const MIPS_REG_T3: Type = 12;
    pub const MIPS_REG_T4: Type = 13;
    pub const MIPS_REG_T5: Type = 14;
    pub const MIPS_REG_T6: Type = 15;
    pub const MIPS_REG_T7: Type = 16;
    pub const MIPS_REG_S0: Type = 17;
    pub const MIPS_REG_S1: Type = 18;
    pub const MIPS_REG_S2: Type = 19;
    pub const MIPS_REG_S3: Type = 20;
    pub const MIPS_REG_S4: Type = 21;
    pub const MIPS_REG_S5: Type = 22;
    pub const MIPS_REG_S6: Type = 23;
    pub const MIPS_REG_S7: Type = 24;
    pub const MIPS_REG_T8: Type = 25;
    pub const MIPS_REG_T9: Type = 26;
    pub const MIPS_REG_K0: Type = 27;
    pub const MIPS_REG_K1: Type = 28;
    pub const MIPS_REG_GP: Type = 29;
    pub const MIPS_REG_SP: Type = 30;
    pub const MIPS_REG_FP: Type = 31;
    pub const MIPS_REG_S8: Type = 31;
    pub const MIPS_REG_RA: Type = 32;
    pub const MIPS_REG_HI0: Type = 44;
    pub const MIPS_REG_HI1: Type = 45;
    pub const MIPS_REG_HI2: Type = 46;
    pub const MIPS_REG_HI3: Type = 47;
    pub const MIPS_REG_LO0: Type = 44;
    pub const MIPS_REG_LO1: Type = 45;
    pub const MIPS_REG_LO2: Type = 46;
    pub const MIPS_REG_LO3: Type = 47;
}
pub mod mips_insn {
    pub type Type = u32;
    pub const MIPS_INS_INVALID: Type = 0;
    pub const MIPS_INS_ABSQ_S: Type = 1;
    pub const MIPS_INS_ADD: Type = 2;
    pub const MIPS_INS_ADDIUPC: Type = 3;
    pub const MIPS_INS_ADDQH: Type = 4;
    pub const MIPS_INS_ADDQH_R: Type = 5;
    pub const MIPS_INS_ADDQ: Type = 6;
    pub const MIPS_INS_ADDQ_S: Type = 7;
    pub const MIPS_INS_ADDSC: Type = 8;
    pub const MIPS_INS_ADDS_A: Type = 9;
    pub const MIPS_INS_ADDS_S: Type = 10;
    pub const MIPS_INS_ADDS_U: Type = 11;
    pub const MIPS_INS_ADDUH: Type = 12;
    pub const MIPS_INS_ADDUH_R: Type = 13;
    pub const MIPS_INS_ADDU: Type = 14;
    pub const MIPS_INS_ADDU_S: Type = 15;
    pub const MIPS_INS_ADDVI: Type = 16;
    pub const MIPS_INS_ADDV: Type = 17;
    pub const MIPS_INS_ADDWC: Type = 18;
    pub const MIPS_INS_ADD_A: Type = 19;
    pub const MIPS_INS_ADDI: Type = 20;
    pub const MIPS_INS_ADDIU: Type = 21;
    pub const MIPS_INS_ALIGN: Type = 22;
    pub const MIPS_INS_ALUIPC: Type = 23;
    pub const MIPS_INS_AND: Type = 24;
    pub const MIPS_INS_ANDI: Type = 25;
    pub const MIPS_INS_APPEND: Type = 26;
    pub const MIPS_INS_ASUB_S: Type = 27;
    pub const MIPS_INS_ASUB_U: Type = 28;
    pub const MIPS_INS_AUI: Type = 29;
    pub const MIPS_INS_AUIPC: Type = 30;
    pub const MIPS_INS_AVER_S: Type = 31;
    pub const MIPS_INS_AVER_U: Type = 32;
    pub const MIPS_INS_AVE_S: Type = 33;
    pub const MIPS_INS_AVE_U: Type = 34;
    pub const MIPS_INS_BADDU: Type = 35;
    pub const MIPS_INS_BAL: Type = 36;
    pub const MIPS_INS_BALC: Type = 37;
    pub const MIPS_INS_BALIGN: Type = 38;
    pub const MIPS_INS_BC: Type = 39;
    pub const MIPS_INS_BC0F: Type = 40;
    pub const MIPS_INS_BC0FL: Type = 41;
    pub const MIPS_INS_BC0T: Type = 42;
    pub const MIPS_INS_BC0TL: Type = 43;
    pub const MIPS_INS_BC1EQZ: Type = 44;
    pub const MIPS_INS_BC1F: Type = 45;
    pub const MIPS_INS_BC1FL: Type = 46;
    pub const MIPS_INS_BC1NEZ: Type = 47;
    pub const MIPS_INS_BC1T: Type = 48;
    pub const MIPS_INS_BC1TL: Type = 49;
    pub const MIPS_INS_BC2EQZ: Type = 50;
    pub const MIPS_INS_BC2F: Type = 51;
    pub const MIPS_INS_BC2FL: Type = 52;
    pub const MIPS_INS_BC2NEZ: Type = 53;
    pub const MIPS_INS_BC2T: Type = 54;
    pub const MIPS_INS_BC2TL: Type = 55;
    pub const MIPS_INS_BC3F: Type = 56;
    pub const MIPS_INS_BC3FL: Type = 57;
    pub const MIPS_INS_BC3T: Type = 58;
    pub const MIPS_INS_BC3TL: Type = 59;
    pub const MIPS_INS_BCLRI: Type = 60;
    pub const MIPS_INS_BCLR: Type = 61;
    pub const MIPS_INS_BEQ: Type = 62;
    pub const MIPS_INS_BEQC: Type = 63;
    pub const MIPS_INS_BEQL: Type = 64;
    pub const MIPS_INS_BEQZALC: Type = 65;
    pub const MIPS_INS_BEQZC: Type = 66;
    pub const MIPS_INS_BGEC: Type = 67;
    pub const MIPS_INS_BGEUC: Type = 68;
    pub const MIPS_INS_BGEZ: Type = 69;
    pub const MIPS_INS_BGEZAL: Type = 70;
    pub const MIPS_INS_BGEZALC: Type = 71;
    pub const MIPS_INS_BGEZALL: Type = 72;
    pub const MIPS_INS_BGEZALS: Type = 73;
    pub const MIPS_INS_BGEZC: Type = 74;
    pub const MIPS_INS_BGEZL: Type = 75;
    pub const MIPS_INS_BGTZ: Type = 76;
    pub const MIPS_INS_BGTZALC: Type = 77;
    pub const MIPS_INS_BGTZC: Type = 78;
    pub const MIPS_INS_BGTZL: Type = 79;
    pub const MIPS_INS_BINSLI: Type = 80;
    pub const MIPS_INS_BINSL: Type = 81;
    pub const MIPS_INS_BINSRI: Type = 82;
    pub const MIPS_INS_BINSR: Type = 83;
    pub const MIPS_INS_BITREV: Type = 84;
    pub const MIPS_INS_BITSWAP: Type = 85;
    pub const MIPS_INS_BLEZ: Type = 86;
    pub const MIPS_INS_BLEZALC: Type = 87;
    pub const MIPS_INS_BLEZC: Type = 88;
    pub const MIPS_INS_BLEZL: Type = 89;
    pub const MIPS_INS_BLTC: Type = 90;
    pub const MIPS_INS_BLTUC: Type = 91;
    pub const MIPS_INS_BLTZ: Type = 92;
    pub const MIPS_INS_BLTZAL: Type = 93;
    pub const MIPS_INS_BLTZALC: Type = 94;
    pub const MIPS_INS_BLTZALL: Type = 95;
    pub const MIPS_INS_BLTZALS: Type = 96;
    pub const MIPS_INS_BLTZC: Type = 97;
    pub const MIPS_INS_BLTZL: Type = 98;
    pub const MIPS_INS_BMNZI: Type = 99;
    pub const MIPS_INS_BMNZ: Type = 100;
    pub const MIPS_INS_BMZI: Type = 101;
    pub const MIPS_INS_BMZ: Type = 102;
    pub const MIPS_INS_BNE: Type = 103;
    pub const MIPS_INS_BNEC: Type = 104;
    pub const MIPS_INS_BNEGI: Type = 105;
    pub const MIPS_INS_BNEG: Type = 106;
    pub const MIPS_INS_BNEL: Type = 107;
    pub const MIPS_INS_BNEZALC: Type = 108;
    pub const MIPS_INS_BNEZC: Type = 109;
    pub const MIPS_INS_BNVC: Type = 110;
    pub const MIPS_INS_BNZ: Type = 111;
    pub const MIPS_INS_BOVC: Type = 112;
    pub const MIPS_INS_BPOSGE32: Type = 113;
    pub const MIPS_INS_BREAK: Type = 114;
    pub const MIPS_INS_BSELI: Type = 115;
    pub const MIPS_INS_BSEL: Type = 116;
    pub const MIPS_INS_BSETI: Type = 117;
    pub const MIPS_INS_BSET: Type = 118;
    pub const MIPS_INS_BZ: Type = 119;
    pub const MIPS_INS_BEQZ: Type = 120;
    pub const MIPS_INS_B: Type = 121;
    pub const MIPS_INS_BNEZ: Type = 122;
    pub const MIPS_INS_BTEQZ: Type = 123;
    pub const MIPS_INS_BTNEZ: Type = 124;
    pub const MIPS_INS_CACHE: Type = 125;
    pub const MIPS_INS_CEIL: Type = 126;
    pub const MIPS_INS_CEQI: Type = 127;
    pub const MIPS_INS_CEQ: Type = 128;
    pub const MIPS_INS_CFC1: Type = 129;
    pub const MIPS_INS_CFCMSA: Type = 130;
    pub const MIPS_INS_CINS: Type = 131;
    pub const MIPS_INS_CINS32: Type = 132;
    pub const MIPS_INS_CLASS: Type = 133;
    pub const MIPS_INS_CLEI_S: Type = 134;
    pub const MIPS_INS_CLEI_U: Type = 135;
    pub const MIPS_INS_CLE_S: Type = 136;
    pub const MIPS_INS_CLE_U: Type = 137;
    pub const MIPS_INS_CLO: Type = 138;
    pub const MIPS_INS_CLTI_S: Type = 139;
    pub const MIPS_INS_CLTI_U: Type = 140;
    pub const MIPS_INS_CLT_S: Type = 141;
    pub const MIPS_INS_CLT_U: Type = 142;
    pub const MIPS_INS_CLZ: Type = 143;
    pub const MIPS_INS_CMPGDU: Type = 144;
    pub const MIPS_INS_CMPGU: Type = 145;
    pub const MIPS_INS_CMPU: Type = 146;
    pub const MIPS_INS_CMP: Type = 147;
    pub const MIPS_INS_COPY_S: Type = 148;
    pub const MIPS_INS_COPY_U: Type = 149;
    pub const MIPS_INS_CTC1: Type = 150;
    pub const MIPS_INS_CTCMSA: Type = 151;
    pub const MIPS_INS_CVT: Type = 152;
    pub const MIPS_INS_C: Type = 153;
    pub const MIPS_INS_CMPI: Type = 154;
    pub const MIPS_INS_DADD: Type = 155;
    pub const MIPS_INS_DADDI: Type = 156;
    pub const MIPS_INS_DADDIU: Type = 157;
    pub const MIPS_INS_DADDU: Type = 158;
    pub const MIPS_INS_DAHI: Type = 159;
    pub const MIPS_INS_DALIGN: Type = 160;
    pub const MIPS_INS_DATI: Type = 161;
    pub const MIPS_INS_DAUI: Type = 162;
    pub const MIPS_INS_DBITSWAP: Type = 163;
    pub const MIPS_INS_DCLO: Type = 164;
    pub const MIPS_INS_DCLZ: Type = 165;
    pub const MIPS_INS_DDIV: Type = 166;
    pub const MIPS_INS_DDIVU: Type = 167;
    pub const MIPS_INS_DERET: Type = 168;
    pub const MIPS_INS_DEXT: Type = 169;
    pub const MIPS_INS_DEXTM: Type = 170;
    pub const MIPS_INS_DEXTU: Type = 171;
    pub const MIPS_INS_DI: Type = 172;
    pub const MIPS_INS_DINS: Type = 173;
    pub const MIPS_INS_DINSM: Type = 174;
    pub const MIPS_INS_DINSU: Type = 175;
    pub const MIPS_INS_DIV: Type = 176;
    pub const MIPS_INS_DIVU: Type = 177;
    pub const MIPS_INS_DIV_S: Type = 178;
    pub const MIPS_INS_DIV_U: Type = 179;
    pub const MIPS_INS_DLSA: Type = 180;
    pub const MIPS_INS_DMFC0: Type = 181;
    pub const MIPS_INS_DMFC1: Type = 182;
    pub const MIPS_INS_DMFC2: Type = 183;
    pub const MIPS_INS_DMOD: Type = 184;
    pub const MIPS_INS_DMODU: Type = 185;
    pub const MIPS_INS_DMTC0: Type = 186;
    pub const MIPS_INS_DMTC1: Type = 187;
    pub const MIPS_INS_DMTC2: Type = 188;
    pub const MIPS_INS_DMUH: Type = 189;
    pub const MIPS_INS_DMUHU: Type = 190;
    pub const MIPS_INS_DMUL: Type = 191;
    pub const MIPS_INS_DMULT: Type = 192;
    pub const MIPS_INS_DMULTU: Type = 193;
    pub const MIPS_INS_DMULU: Type = 194;
    pub const MIPS_INS_DOTP_S: Type = 195;
    pub const MIPS_INS_DOTP_U: Type = 196;
    pub const MIPS_INS_DPADD_S: Type = 197;
    pub const MIPS_INS_DPADD_U: Type = 198;
    pub const MIPS_INS_DPAQX_SA: Type = 199;
    pub const MIPS_INS_DPAQX_S: Type = 200;
    pub const MIPS_INS_DPAQ_SA: Type = 201;
    pub const MIPS_INS_DPAQ_S: Type = 202;
    pub const MIPS_INS_DPAU: Type = 203;
    pub const MIPS_INS_DPAX: Type = 204;
    pub const MIPS_INS_DPA: Type = 205;
    pub const MIPS_INS_DPOP: Type = 206;
    pub const MIPS_INS_DPSQX_SA: Type = 207;
    pub const MIPS_INS_DPSQX_S: Type = 208;
    pub const MIPS_INS_DPSQ_SA: Type = 209;
    pub const MIPS_INS_DPSQ_S: Type = 210;
    pub const MIPS_INS_DPSUB_S: Type = 211;
    pub const MIPS_INS_DPSUB_U: Type = 212;
    pub const MIPS_INS_DPSU: Type = 213;
    pub const MIPS_INS_DPSX: Type = 214;
    pub const MIPS_INS_DPS: Type = 215;
    pub const MIPS_INS_DROTR: Type = 216;
    pub const MIPS_INS_DROTR32: Type = 217;
    pub const MIPS_INS_DROTRV: Type = 218;
    pub const MIPS_INS_DSBH: Type = 219;
    pub const MIPS_INS_DSHD: Type = 220;
    pub const MIPS_INS_DSLL: Type = 221;
    pub const MIPS_INS_DSLL32: Type = 222;
    pub const MIPS_INS_DSLLV: Type = 223;
    pub const MIPS_INS_DSRA: Type = 224;
    pub const MIPS_INS_DSRA32: Type = 225;
    pub const MIPS_INS_DSRAV: Type = 226;
    pub const MIPS_INS_DSRL: Type = 227;
    pub const MIPS_INS_DSRL32: Type = 228;
    pub const MIPS_INS_DSRLV: Type = 229;
    pub const MIPS_INS_DSUB: Type = 230;
    pub const MIPS_INS_DSUBU: Type = 231;
    pub const MIPS_INS_EHB: Type = 232;
    pub const MIPS_INS_EI: Type = 233;
    pub const MIPS_INS_ERET: Type = 234;
    pub const MIPS_INS_EXT: Type = 235;
    pub const MIPS_INS_EXTP: Type = 236;
    pub const MIPS_INS_EXTPDP: Type = 237;
    pub const MIPS_INS_EXTPDPV: Type = 238;
    pub const MIPS_INS_EXTPV: Type = 239;
    pub const MIPS_INS_EXTRV_RS: Type = 240;
    pub const MIPS_INS_EXTRV_R: Type = 241;
    pub const MIPS_INS_EXTRV_S: Type = 242;
    pub const MIPS_INS_EXTRV: Type = 243;
    pub const MIPS_INS_EXTR_RS: Type = 244;
    pub const MIPS_INS_EXTR_R: Type = 245;
    pub const MIPS_INS_EXTR_S: Type = 246;
    pub const MIPS_INS_EXTR: Type = 247;
    pub const MIPS_INS_EXTS: Type = 248;
    pub const MIPS_INS_EXTS32: Type = 249;
    pub const MIPS_INS_ABS: Type = 250;
    pub const MIPS_INS_FADD: Type = 251;
    pub const MIPS_INS_FCAF: Type = 252;
    pub const MIPS_INS_FCEQ: Type = 253;
    pub const MIPS_INS_FCLASS: Type = 254;
    pub const MIPS_INS_FCLE: Type = 255;
    pub const MIPS_INS_FCLT: Type = 256;
    pub const MIPS_INS_FCNE: Type = 257;
    pub const MIPS_INS_FCOR: Type = 258;
    pub const MIPS_INS_FCUEQ: Type = 259;
    pub const MIPS_INS_FCULE: Type = 260;
    pub const MIPS_INS_FCULT: Type = 261;
    pub const MIPS_INS_FCUNE: Type = 262;
    pub const MIPS_INS_FCUN: Type = 263;
    pub const MIPS_INS_FDIV: Type = 264;
    pub const MIPS_INS_FEXDO: Type = 265;
    pub const MIPS_INS_FEXP2: Type = 266;
    pub const MIPS_INS_FEXUPL: Type = 267;
    pub const MIPS_INS_FEXUPR: Type = 268;
    pub const MIPS_INS_FFINT_S: Type = 269;
    pub const MIPS_INS_FFINT_U: Type = 270;
    pub const MIPS_INS_FFQL: Type = 271;
    pub const MIPS_INS_FFQR: Type = 272;
    pub const MIPS_INS_FILL: Type = 273;
    pub const MIPS_INS_FLOG2: Type = 274;
    pub const MIPS_INS_FLOOR: Type = 275;
    pub const MIPS_INS_FMADD: Type = 276;
    pub const MIPS_INS_FMAX_A: Type = 277;
    pub const MIPS_INS_FMAX: Type = 278;
    pub const MIPS_INS_FMIN_A: Type = 279;
    pub const MIPS_INS_FMIN: Type = 280;
    pub const MIPS_INS_MOV: Type = 281;
    pub const MIPS_INS_FMSUB: Type = 282;
    pub const MIPS_INS_FMUL: Type = 283;
    pub const MIPS_INS_MUL: Type = 284;
    pub const MIPS_INS_NEG: Type = 285;
    pub const MIPS_INS_FRCP: Type = 286;
    pub const MIPS_INS_FRINT: Type = 287;
    pub const MIPS_INS_FRSQRT: Type = 288;
    pub const MIPS_INS_FSAF: Type = 289;
    pub const MIPS_INS_FSEQ: Type = 290;
    pub const MIPS_INS_FSLE: Type = 291;
    pub const MIPS_INS_FSLT: Type = 292;
    pub const MIPS_INS_FSNE: Type = 293;
    pub const MIPS_INS_FSOR: Type = 294;
    pub const MIPS_INS_FSQRT: Type = 295;
    pub const MIPS_INS_SQRT: Type = 296;
    pub const MIPS_INS_FSUB: Type = 297;
    pub const MIPS_INS_SUB: Type = 298;
    pub const MIPS_INS_FSUEQ: Type = 299;
    pub const MIPS_INS_FSULE: Type = 300;
    pub const MIPS_INS_FSULT: Type = 301;
    pub const MIPS_INS_FSUNE: Type = 302;
    pub const MIPS_INS_FSUN: Type = 303;
    pub const MIPS_INS_FTINT_S: Type = 304;
    pub const MIPS_INS_FTINT_U: Type = 305;
    pub const MIPS_INS_FTQ: Type = 306;
    pub const MIPS_INS_FTRUNC_S: Type = 307;
    pub const MIPS_INS_FTRUNC_U: Type = 308;
    pub const MIPS_INS_HADD_S: Type = 309;
    pub const MIPS_INS_HADD_U: Type = 310;
    pub const MIPS_INS_HSUB_S: Type = 311;
    pub const MIPS_INS_HSUB_U: Type = 312;
    pub const MIPS_INS_ILVEV: Type = 313;
    pub const MIPS_INS_ILVL: Type = 314;
    pub const MIPS_INS_ILVOD: Type = 315;
    pub const MIPS_INS_ILVR: Type = 316;
    pub const MIPS_INS_INS: Type = 317;
    pub const MIPS_INS_INSERT: Type = 318;
    pub const MIPS_INS_INSV: Type = 319;
    pub const MIPS_INS_INSVE: Type = 320;
    pub const MIPS_INS_J: Type = 321;
    pub const MIPS_INS_JAL: Type = 322;
    pub const MIPS_INS_JALR: Type = 323;
    pub const MIPS_INS_JALRS: Type = 324;
    pub const MIPS_INS_JALS: Type = 325;
    pub const MIPS_INS_JALX: Type = 326;
    pub const MIPS_INS_JIALC: Type = 327;
    pub const MIPS_INS_JIC: Type = 328;
    pub const MIPS_INS_JR: Type = 329;
    pub const MIPS_INS_JRADDIUSP: Type = 330;
    pub const MIPS_INS_JRC: Type = 331;
    pub const MIPS_INS_JALRC: Type = 332;
    pub const MIPS_INS_LB: Type = 333;
    pub const MIPS_INS_LBUX: Type = 334;
    pub const MIPS_INS_LBU: Type = 335;
    pub const MIPS_INS_LD: Type = 336;
    pub const MIPS_INS_LDC1: Type = 337;
    pub const MIPS_INS_LDC2: Type = 338;
    pub const MIPS_INS_LDC3: Type = 339;
    pub const MIPS_INS_LDI: Type = 340;
    pub const MIPS_INS_LDL: Type = 341;
    pub const MIPS_INS_LDPC: Type = 342;
    pub const MIPS_INS_LDR: Type = 343;
    pub const MIPS_INS_LDXC1: Type = 344;
    pub const MIPS_INS_LH: Type = 345;
    pub const MIPS_INS_LHX: Type = 346;
    pub const MIPS_INS_LHU: Type = 347;
    pub const MIPS_INS_LL: Type = 348;
    pub const MIPS_INS_LLD: Type = 349;
    pub const MIPS_INS_LSA: Type = 350;
    pub const MIPS_INS_LUXC1: Type = 351;
    pub const MIPS_INS_LUI: Type = 352;
    pub const MIPS_INS_LW: Type = 353;
    pub const MIPS_INS_LWC1: Type = 354;
    pub const MIPS_INS_LWC2: Type = 355;
    pub const MIPS_INS_LWC3: Type = 356;
    pub const MIPS_INS_LWL: Type = 357;
    pub const MIPS_INS_LWPC: Type = 358;
    pub const MIPS_INS_LWR: Type = 359;
    pub const MIPS_INS_LWUPC: Type = 360;
    pub const MIPS_INS_LWU: Type = 361;
    pub const MIPS_INS_LWX: Type = 362;
    pub const MIPS_INS_LWXC1: Type = 363;
    pub const MIPS_INS_LI: Type = 364;
    pub const MIPS_INS_MADD: Type = 365;
    pub const MIPS_INS_MADDF: Type = 366;
    pub const MIPS_INS_MADDR_Q: Type = 367;
    pub const MIPS_INS_MADDU: Type = 368;
    pub const MIPS_INS_MADDV: Type = 369;
    pub const MIPS_INS_MADD_Q: Type = 370;
    pub const MIPS_INS_MAQ_SA: Type = 371;
    pub const MIPS_INS_MAQ_S: Type = 372;
    pub const MIPS_INS_MAXA: Type = 373;
    pub const MIPS_INS_MAXI_S: Type = 374;
    pub const MIPS_INS_MAXI_U: Type = 375;
    pub const MIPS_INS_MAX_A: Type = 376;
    pub const MIPS_INS_MAX: Type = 377;
    pub const MIPS_INS_MAX_S: Type = 378;
    pub const MIPS_INS_MAX_U: Type = 379;
    pub const MIPS_INS_MFC0: Type = 380;
    pub const MIPS_INS_MFC1: Type = 381;
    pub const MIPS_INS_MFC2: Type = 382;
    pub const MIPS_INS_MFHC1: Type = 383;
    pub const MIPS_INS_MFHI: Type = 384;
    pub const MIPS_INS_MFLO: Type = 385;
    pub const MIPS_INS_MINA: Type = 386;
    pub const MIPS_INS_MINI_S: Type = 387;
    pub const MIPS_INS_MINI_U: Type = 388;
    pub const MIPS_INS_MIN_A: Type = 389;
    pub const MIPS_INS_MIN: Type = 390;
    pub const MIPS_INS_MIN_S: Type = 391;
    pub const MIPS_INS_MIN_U: Type = 392;
    pub const MIPS_INS_MOD: Type = 393;
    pub const MIPS_INS_MODSUB: Type = 394;
    pub const MIPS_INS_MODU: Type = 395;
    pub const MIPS_INS_MOD_S: Type = 396;
    pub const MIPS_INS_MOD_U: Type = 397;
    pub const MIPS_INS_MOVE: Type = 398;
    pub const MIPS_INS_MOVF: Type = 399;
    pub const MIPS_INS_MOVN: Type = 400;
    pub const MIPS_INS_MOVT: Type = 401;
    pub const MIPS_INS_MOVZ: Type = 402;
    pub const MIPS_INS_MSUB: Type = 403;
    pub const MIPS_INS_MSUBF: Type = 404;
    pub const MIPS_INS_MSUBR_Q: Type = 405;
    pub const MIPS_INS_MSUBU: Type = 406;
    pub const MIPS_INS_MSUBV: Type = 407;
    pub const MIPS_INS_MSUB_Q: Type = 408;
    pub const MIPS_INS_MTC0: Type = 409;
    pub const MIPS_INS_MTC1: Type = 410;
    pub const MIPS_INS_MTC2: Type = 411;
    pub const MIPS_INS_MTHC1: Type = 412;
    pub const MIPS_INS_MTHI: Type = 413;
    pub const MIPS_INS_MTHLIP: Type = 414;
    pub const MIPS_INS_MTLO: Type = 415;
    pub const MIPS_INS_MTM0: Type = 416;
    pub const MIPS_INS_MTM1: Type = 417;
    pub const MIPS_INS_MTM2: Type = 418;
    pub const MIPS_INS_MTP0: Type = 419;
    pub const MIPS_INS_MTP1: Type = 420;
    pub const MIPS_INS_MTP2: Type = 421;
    pub const MIPS_INS_MUH: Type = 422;
    pub const MIPS_INS_MUHU: Type = 423;
    pub const MIPS_INS_MULEQ_S: Type = 424;
    pub const MIPS_INS_MULEU_S: Type = 425;
    pub const MIPS_INS_MULQ_RS: Type = 426;
    pub const MIPS_INS_MULQ_S: Type = 427;
    pub const MIPS_INS_MULR_Q: Type = 428;
    pub const MIPS_INS_MULSAQ_S: Type = 429;
    pub const MIPS_INS_MULSA: Type = 430;
    pub const MIPS_INS_MULT: Type = 431;
    pub const MIPS_INS_MULTU: Type = 432;
    pub const MIPS_INS_MULU: Type = 433;
    pub const MIPS_INS_MULV: Type = 434;
    pub const MIPS_INS_MUL_Q: Type = 435;
    pub const MIPS_INS_MUL_S: Type = 436;
    pub const MIPS_INS_NLOC: Type = 437;
    pub const MIPS_INS_NLZC: Type = 438;
    pub const MIPS_INS_NMADD: Type = 439;
    pub const MIPS_INS_NMSUB: Type = 440;
    pub const MIPS_INS_NOR: Type = 441;
    pub const MIPS_INS_NORI: Type = 442;
    pub const MIPS_INS_NOT: Type = 443;
    pub const MIPS_INS_OR: Type = 444;
    pub const MIPS_INS_ORI: Type = 445;
    pub const MIPS_INS_PACKRL: Type = 446;
    pub const MIPS_INS_PAUSE: Type = 447;
    pub const MIPS_INS_PCKEV: Type = 448;
    pub const MIPS_INS_PCKOD: Type = 449;
    pub const MIPS_INS_PCNT: Type = 450;
    pub const MIPS_INS_PICK: Type = 451;
    pub const MIPS_INS_POP: Type = 452;
    pub const MIPS_INS_PRECEQU: Type = 453;
    pub const MIPS_INS_PRECEQ: Type = 454;
    pub const MIPS_INS_PRECEU: Type = 455;
    pub const MIPS_INS_PRECRQU_S: Type = 456;
    pub const MIPS_INS_PRECRQ: Type = 457;
    pub const MIPS_INS_PRECRQ_RS: Type = 458;
    pub const MIPS_INS_PRECR: Type = 459;
    pub const MIPS_INS_PRECR_SRA: Type = 460;
    pub const MIPS_INS_PRECR_SRA_R: Type = 461;
    pub const MIPS_INS_PREF: Type = 462;
    pub const MIPS_INS_PREPEND: Type = 463;
    pub const MIPS_INS_RADDU: Type = 464;
    pub const MIPS_INS_RDDSP: Type = 465;
    pub const MIPS_INS_RDHWR: Type = 466;
    pub const MIPS_INS_REPLV: Type = 467;
    pub const MIPS_INS_REPL: Type = 468;
    pub const MIPS_INS_RINT: Type = 469;
    pub const MIPS_INS_ROTR: Type = 470;
    pub const MIPS_INS_ROTRV: Type = 471;
    pub const MIPS_INS_ROUND: Type = 472;
    pub const MIPS_INS_SAT_S: Type = 473;
    pub const MIPS_INS_SAT_U: Type = 474;
    pub const MIPS_INS_SB: Type = 475;
    pub const MIPS_INS_SC: Type = 476;
    pub const MIPS_INS_SCD: Type = 477;
    pub const MIPS_INS_SD: Type = 478;
    pub const MIPS_INS_SDBBP: Type = 479;
    pub const MIPS_INS_SDC1: Type = 480;
    pub const MIPS_INS_SDC2: Type = 481;
    pub const MIPS_INS_SDC3: Type = 482;
    pub const MIPS_INS_SDL: Type = 483;
    pub const MIPS_INS_SDR: Type = 484;
    pub const MIPS_INS_SDXC1: Type = 485;
    pub const MIPS_INS_SEB: Type = 486;
    pub const MIPS_INS_SEH: Type = 487;
    pub const MIPS_INS_SELEQZ: Type = 488;
    pub const MIPS_INS_SELNEZ: Type = 489;
    pub const MIPS_INS_SEL: Type = 490;
    pub const MIPS_INS_SEQ: Type = 491;
    pub const MIPS_INS_SEQI: Type = 492;
    pub const MIPS_INS_SH: Type = 493;
    pub const MIPS_INS_SHF: Type = 494;
    pub const MIPS_INS_SHILO: Type = 495;
    pub const MIPS_INS_SHILOV: Type = 496;
    pub const MIPS_INS_SHLLV: Type = 497;
    pub const MIPS_INS_SHLLV_S: Type = 498;
    pub const MIPS_INS_SHLL: Type = 499;
    pub const MIPS_INS_SHLL_S: Type = 500;
    pub const MIPS_INS_SHRAV: Type = 501;
    pub const MIPS_INS_SHRAV_R: Type = 502;
    pub const MIPS_INS_SHRA: Type = 503;
    pub const MIPS_INS_SHRA_R: Type = 504;
    pub const MIPS_INS_SHRLV: Type = 505;
    pub const MIPS_INS_SHRL: Type = 506;
    pub const MIPS_INS_SLDI: Type = 507;
    pub const MIPS_INS_SLD: Type = 508;
    pub const MIPS_INS_SLL: Type = 509;
    pub const MIPS_INS_SLLI: Type = 510;
    pub const MIPS_INS_SLLV: Type = 511;
    pub const MIPS_INS_SLT: Type = 512;
    pub const MIPS_INS_SLTI: Type = 513;
    pub const MIPS_INS_SLTIU: Type = 514;
    pub const MIPS_INS_SLTU: Type = 515;
    pub const MIPS_INS_SNE: Type = 516;
    pub const MIPS_INS_SNEI: Type = 517;
    pub const MIPS_INS_SPLATI: Type = 518;
    pub const MIPS_INS_SPLAT: Type = 519;
    pub const MIPS_INS_SRA: Type = 520;
    pub const MIPS_INS_SRAI: Type = 521;
    pub const MIPS_INS_SRARI: Type = 522;
    pub const MIPS_INS_SRAR: Type = 523;
    pub const MIPS_INS_SRAV: Type = 524;
    pub const MIPS_INS_SRL: Type = 525;
    pub const MIPS_INS_SRLI: Type = 526;
    pub const MIPS_INS_SRLRI: Type = 527;
    pub const MIPS_INS_SRLR: Type = 528;
    pub const MIPS_INS_SRLV: Type = 529;
    pub const MIPS_INS_SSNOP: Type = 530;
    pub const MIPS_INS_ST: Type = 531;
    pub const MIPS_INS_SUBQH: Type = 532;
    pub const MIPS_INS_SUBQH_R: Type = 533;
    pub const MIPS_INS_SUBQ: Type = 534;
    pub const MIPS_INS_SUBQ_S: Type = 535;
    pub const MIPS_INS_SUBSUS_U: Type = 536;
    pub const MIPS_INS_SUBSUU_S: Type = 537;
    pub const MIPS_INS_SUBS_S: Type = 538;
    pub const MIPS_INS_SUBS_U: Type = 539;
    pub const MIPS_INS_SUBUH: Type = 540;
    pub const MIPS_INS_SUBUH_R: Type = 541;
    pub const MIPS_INS_SUBU: Type = 542;
    pub const MIPS_INS_SUBU_S: Type = 543;
    pub const MIPS_INS_SUBVI: Type = 544;
    pub const MIPS_INS_SUBV: Type = 545;
    pub const MIPS_INS_SUXC1: Type = 546;
    pub const MIPS_INS_SW: Type = 547;
    pub const MIPS_INS_SWC1: Type = 548;
    pub const MIPS_INS_SWC2: Type = 549;
    pub const MIPS_INS_SWC3: Type = 550;
    pub const MIPS_INS_SWL: Type = 551;
    pub const MIPS_INS_SWR: Type = 552;
    pub const MIPS_INS_SWXC1: Type = 553;
    pub const MIPS_INS_SYNC: Type = 554;
    pub const MIPS_INS_SYSCALL: Type = 555;
    pub const MIPS_INS_TEQ: Type = 556;
    pub const MIPS_INS_TEQI: Type = 557;
    pub const MIPS_INS_TGE: Type = 558;
    pub const MIPS_INS_TGEI: Type = 559;
    pub const MIPS_INS_TGEIU: Type = 560;
    pub const MIPS_INS_TGEU: Type = 561;
    pub const MIPS_INS_TLBP: Type = 562;
    pub const MIPS_INS_TLBR: Type = 563;
    pub const MIPS_INS_TLBWI: Type = 564;
    pub const MIPS_INS_TLBWR: Type = 565;
    pub const MIPS_INS_TLT: Type = 566;
    pub const MIPS_INS_TLTI: Type = 567;
    pub const MIPS_INS_TLTIU: Type = 568;
    pub const MIPS_INS_TLTU: Type = 569;
    pub const MIPS_INS_TNE: Type = 570;
    pub const MIPS_INS_TNEI: Type = 571;
    pub const MIPS_INS_TRUNC: Type = 572;
    pub const MIPS_INS_V3MULU: Type = 573;
    pub const MIPS_INS_VMM0: Type = 574;
    pub const MIPS_INS_VMULU: Type = 575;
    pub const MIPS_INS_VSHF: Type = 576;
    pub const MIPS_INS_WAIT: Type = 577;
    pub const MIPS_INS_WRDSP: Type = 578;
    pub const MIPS_INS_WSBH: Type = 579;
    pub const MIPS_INS_XOR: Type = 580;
    pub const MIPS_INS_XORI: Type = 581;
    pub const MIPS_INS_NOP: Type = 582;
    pub const MIPS_INS_NEGU: Type = 583;
    pub const MIPS_INS_JALR_HB: Type = 584;
    pub const MIPS_INS_JR_HB: Type = 585;
    pub const MIPS_INS_ENDING: Type = 586;
}
pub mod mips_insn_group {
    pub type Type = u32;
    pub const MIPS_GRP_INVALID: Type = 0;
    pub const MIPS_GRP_JUMP: Type = 1;
    pub const MIPS_GRP_BITCOUNT: Type = 128;
    pub const MIPS_GRP_DSP: Type = 129;
    pub const MIPS_GRP_DSPR2: Type = 130;
    pub const MIPS_GRP_FPIDX: Type = 131;
    pub const MIPS_GRP_MSA: Type = 132;
    pub const MIPS_GRP_MIPS32R2: Type = 133;
    pub const MIPS_GRP_MIPS64: Type = 134;
    pub const MIPS_GRP_MIPS64R2: Type = 135;
    pub const MIPS_GRP_SEINREG: Type = 136;
    pub const MIPS_GRP_STDENC: Type = 137;
    pub const MIPS_GRP_SWAP: Type = 138;
    pub const MIPS_GRP_MICROMIPS: Type = 139;
    pub const MIPS_GRP_MIPS16MODE: Type = 140;
    pub const MIPS_GRP_FP64BIT: Type = 141;
    pub const MIPS_GRP_NONANSFPMATH: Type = 142;
    pub const MIPS_GRP_NOTFP64BIT: Type = 143;
    pub const MIPS_GRP_NOTINMICROMIPS: Type = 144;
    pub const MIPS_GRP_NOTNACL: Type = 145;
    pub const MIPS_GRP_NOTMIPS32R6: Type = 146;
    pub const MIPS_GRP_NOTMIPS64R6: Type = 147;
    pub const MIPS_GRP_CNMIPS: Type = 148;
    pub const MIPS_GRP_MIPS32: Type = 149;
    pub const MIPS_GRP_MIPS32R6: Type = 150;
    pub const MIPS_GRP_MIPS64R6: Type = 151;
    pub const MIPS_GRP_MIPS2: Type = 152;
    pub const MIPS_GRP_MIPS3: Type = 153;
    pub const MIPS_GRP_MIPS3_32: Type = 154;
    pub const MIPS_GRP_MIPS3_32R2: Type = 155;
    pub const MIPS_GRP_MIPS4_32: Type = 156;
    pub const MIPS_GRP_MIPS4_32R2: Type = 157;
    pub const MIPS_GRP_MIPS5_32R2: Type = 158;
    pub const MIPS_GRP_GP32BIT: Type = 159;
    pub const MIPS_GRP_GP64BIT: Type = 160;
    pub const MIPS_GRP_ENDING: Type = 161;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ppc_bc {
    PPC_BC_INVALID = 0,
    PPC_BC_LT = 12,
    PPC_BC_LE = 36,
    PPC_BC_EQ = 76,
    PPC_BC_GE = 4,
    PPC_BC_GT = 44,
    PPC_BC_NE = 68,
    PPC_BC_UN = 108,
    PPC_BC_NU = 100,
    PPC_BC_SO = 140,
    PPC_BC_NS = 132,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ppc_bh {
    PPC_BH_INVALID = 0,
    PPC_BH_PLUS = 1,
    PPC_BH_MINUS = 2,
}
pub mod ppc_reg {
    pub type Type = u32;
    pub const PPC_REG_INVALID: Type = 0;
    pub const PPC_REG_CARRY: Type = 1;
    pub const PPC_REG_CC: Type = 2;
    pub const PPC_REG_CR0: Type = 3;
    pub const PPC_REG_CR1: Type = 4;
    pub const PPC_REG_CR2: Type = 5;
    pub const PPC_REG_CR3: Type = 6;
    pub const PPC_REG_CR4: Type = 7;
    pub const PPC_REG_CR5: Type = 8;
    pub const PPC_REG_CR6: Type = 9;
    pub const PPC_REG_CR7: Type = 10;
    pub const PPC_REG_CTR: Type = 11;
    pub const PPC_REG_F0: Type = 12;
    pub const PPC_REG_F1: Type = 13;
    pub const PPC_REG_F2: Type = 14;
    pub const PPC_REG_F3: Type = 15;
    pub const PPC_REG_F4: Type = 16;
    pub const PPC_REG_F5: Type = 17;
    pub const PPC_REG_F6: Type = 18;
    pub const PPC_REG_F7: Type = 19;
    pub const PPC_REG_F8: Type = 20;
    pub const PPC_REG_F9: Type = 21;
    pub const PPC_REG_F10: Type = 22;
    pub const PPC_REG_F11: Type = 23;
    pub const PPC_REG_F12: Type = 24;
    pub const PPC_REG_F13: Type = 25;
    pub const PPC_REG_F14: Type = 26;
    pub const PPC_REG_F15: Type = 27;
    pub const PPC_REG_F16: Type = 28;
    pub const PPC_REG_F17: Type = 29;
    pub const PPC_REG_F18: Type = 30;
    pub const PPC_REG_F19: Type = 31;
    pub const PPC_REG_F20: Type = 32;
    pub const PPC_REG_F21: Type = 33;
    pub const PPC_REG_F22: Type = 34;
    pub const PPC_REG_F23: Type = 35;
    pub const PPC_REG_F24: Type = 36;
    pub const PPC_REG_F25: Type = 37;
    pub const PPC_REG_F26: Type = 38;
    pub const PPC_REG_F27: Type = 39;
    pub const PPC_REG_F28: Type = 40;
    pub const PPC_REG_F29: Type = 41;
    pub const PPC_REG_F30: Type = 42;
    pub const PPC_REG_F31: Type = 43;
    pub const PPC_REG_LR: Type = 44;
    pub const PPC_REG_R0: Type = 45;
    pub const PPC_REG_R1: Type = 46;
    pub const PPC_REG_R2: Type = 47;
    pub const PPC_REG_R3: Type = 48;
    pub const PPC_REG_R4: Type = 49;
    pub const PPC_REG_R5: Type = 50;
    pub const PPC_REG_R6: Type = 51;
    pub const PPC_REG_R7: Type = 52;
    pub const PPC_REG_R8: Type = 53;
    pub const PPC_REG_R9: Type = 54;
    pub const PPC_REG_R10: Type = 55;
    pub const PPC_REG_R11: Type = 56;
    pub const PPC_REG_R12: Type = 57;
    pub const PPC_REG_R13: Type = 58;
    pub const PPC_REG_R14: Type = 59;
    pub const PPC_REG_R15: Type = 60;
    pub const PPC_REG_R16: Type = 61;
    pub const PPC_REG_R17: Type = 62;
    pub const PPC_REG_R18: Type = 63;
    pub const PPC_REG_R19: Type = 64;
    pub const PPC_REG_R20: Type = 65;
    pub const PPC_REG_R21: Type = 66;
    pub const PPC_REG_R22: Type = 67;
    pub const PPC_REG_R23: Type = 68;
    pub const PPC_REG_R24: Type = 69;
    pub const PPC_REG_R25: Type = 70;
    pub const PPC_REG_R26: Type = 71;
    pub const PPC_REG_R27: Type = 72;
    pub const PPC_REG_R28: Type = 73;
    pub const PPC_REG_R29: Type = 74;
    pub const PPC_REG_R30: Type = 75;
    pub const PPC_REG_R31: Type = 76;
    pub const PPC_REG_V0: Type = 77;
    pub const PPC_REG_V1: Type = 78;
    pub const PPC_REG_V2: Type = 79;
    pub const PPC_REG_V3: Type = 80;
    pub const PPC_REG_V4: Type = 81;
    pub const PPC_REG_V5: Type = 82;
    pub const PPC_REG_V6: Type = 83;
    pub const PPC_REG_V7: Type = 84;
    pub const PPC_REG_V8: Type = 85;
    pub const PPC_REG_V9: Type = 86;
    pub const PPC_REG_V10: Type = 87;
    pub const PPC_REG_V11: Type = 88;
    pub const PPC_REG_V12: Type = 89;
    pub const PPC_REG_V13: Type = 90;
    pub const PPC_REG_V14: Type = 91;
    pub const PPC_REG_V15: Type = 92;
    pub const PPC_REG_V16: Type = 93;
    pub const PPC_REG_V17: Type = 94;
    pub const PPC_REG_V18: Type = 95;
    pub const PPC_REG_V19: Type = 96;
    pub const PPC_REG_V20: Type = 97;
    pub const PPC_REG_V21: Type = 98;
    pub const PPC_REG_V22: Type = 99;
    pub const PPC_REG_V23: Type = 100;
    pub const PPC_REG_V24: Type = 101;
    pub const PPC_REG_V25: Type = 102;
    pub const PPC_REG_V26: Type = 103;
    pub const PPC_REG_V27: Type = 104;
    pub const PPC_REG_V28: Type = 105;
    pub const PPC_REG_V29: Type = 106;
    pub const PPC_REG_V30: Type = 107;
    pub const PPC_REG_V31: Type = 108;
    pub const PPC_REG_VRSAVE: Type = 109;
    pub const PPC_REG_VS0: Type = 110;
    pub const PPC_REG_VS1: Type = 111;
    pub const PPC_REG_VS2: Type = 112;
    pub const PPC_REG_VS3: Type = 113;
    pub const PPC_REG_VS4: Type = 114;
    pub const PPC_REG_VS5: Type = 115;
    pub const PPC_REG_VS6: Type = 116;
    pub const PPC_REG_VS7: Type = 117;
    pub const PPC_REG_VS8: Type = 118;
    pub const PPC_REG_VS9: Type = 119;
    pub const PPC_REG_VS10: Type = 120;
    pub const PPC_REG_VS11: Type = 121;
    pub const PPC_REG_VS12: Type = 122;
    pub const PPC_REG_VS13: Type = 123;
    pub const PPC_REG_VS14: Type = 124;
    pub const PPC_REG_VS15: Type = 125;
    pub const PPC_REG_VS16: Type = 126;
    pub const PPC_REG_VS17: Type = 127;
    pub const PPC_REG_VS18: Type = 128;
    pub const PPC_REG_VS19: Type = 129;
    pub const PPC_REG_VS20: Type = 130;
    pub const PPC_REG_VS21: Type = 131;
    pub const PPC_REG_VS22: Type = 132;
    pub const PPC_REG_VS23: Type = 133;
    pub const PPC_REG_VS24: Type = 134;
    pub const PPC_REG_VS25: Type = 135;
    pub const PPC_REG_VS26: Type = 136;
    pub const PPC_REG_VS27: Type = 137;
    pub const PPC_REG_VS28: Type = 138;
    pub const PPC_REG_VS29: Type = 139;
    pub const PPC_REG_VS30: Type = 140;
    pub const PPC_REG_VS31: Type = 141;
    pub const PPC_REG_VS32: Type = 142;
    pub const PPC_REG_VS33: Type = 143;
    pub const PPC_REG_VS34: Type = 144;
    pub const PPC_REG_VS35: Type = 145;
    pub const PPC_REG_VS36: Type = 146;
    pub const PPC_REG_VS37: Type = 147;
    pub const PPC_REG_VS38: Type = 148;
    pub const PPC_REG_VS39: Type = 149;
    pub const PPC_REG_VS40: Type = 150;
    pub const PPC_REG_VS41: Type = 151;
    pub const PPC_REG_VS42: Type = 152;
    pub const PPC_REG_VS43: Type = 153;
    pub const PPC_REG_VS44: Type = 154;
    pub const PPC_REG_VS45: Type = 155;
    pub const PPC_REG_VS46: Type = 156;
    pub const PPC_REG_VS47: Type = 157;
    pub const PPC_REG_VS48: Type = 158;
    pub const PPC_REG_VS49: Type = 159;
    pub const PPC_REG_VS50: Type = 160;
    pub const PPC_REG_VS51: Type = 161;
    pub const PPC_REG_VS52: Type = 162;
    pub const PPC_REG_VS53: Type = 163;
    pub const PPC_REG_VS54: Type = 164;
    pub const PPC_REG_VS55: Type = 165;
    pub const PPC_REG_VS56: Type = 166;
    pub const PPC_REG_VS57: Type = 167;
    pub const PPC_REG_VS58: Type = 168;
    pub const PPC_REG_VS59: Type = 169;
    pub const PPC_REG_VS60: Type = 170;
    pub const PPC_REG_VS61: Type = 171;
    pub const PPC_REG_VS62: Type = 172;
    pub const PPC_REG_VS63: Type = 173;
    pub const PPC_REG_RM: Type = 174;
    pub const PPC_REG_CTR8: Type = 175;
    pub const PPC_REG_LR8: Type = 176;
    pub const PPC_REG_CR1EQ: Type = 177;
    pub const PPC_REG_ENDING: Type = 178;
}
pub mod ppc_op_type {
    pub type Type = u32;
    pub const PPC_OP_INVALID: Type = 0;
    pub const PPC_OP_REG: Type = 1;
    pub const PPC_OP_IMM: Type = 2;
    pub const PPC_OP_MEM: Type = 3;
    pub const PPC_OP_CRX: Type = 64;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ppc_op_mem {
    pub base: ppc_reg::Type,
    pub disp: i32,
}
impl Clone for ppc_op_mem {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ppc_op_crx {
    pub scale: ::std::os::raw::c_uint,
    pub reg: ppc_reg::Type,
    pub cond: ppc_bc,
}
impl Clone for ppc_op_crx {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct cs_ppc_op {
    pub type_: ppc_op_type::Type,
    pub __bindgen_anon_1: cs_ppc_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy)]
pub union cs_ppc_op__bindgen_ty_1 {
    pub reg: ppc_reg::Type,
    pub imm: i32,
    pub mem: ppc_op_mem,
    pub crx: ppc_op_crx,
    _bindgen_union_align: [u32; 3usize],
}
impl Clone for cs_ppc_op__bindgen_ty_1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::fmt::Debug for cs_ppc_op__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "cs_ppc_op__bindgen_ty_1 {{ union }}")
    }
}
impl Clone for cs_ppc_op {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::fmt::Debug for cs_ppc_op {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "cs_ppc_op {{ type: {:?}, __bindgen_anon_1: {:?} }}",
            self.type_, self.__bindgen_anon_1
        )
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct cs_ppc {
    pub bc: ppc_bc,
    pub bh: ppc_bh,
    pub update_cr0: bool,
    pub op_count: u8,
    pub operands: [cs_ppc_op; 8usize],
}
impl Clone for cs_ppc {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::fmt::Debug for cs_ppc {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "cs_ppc {{ bc: {:?}, bh: {:?}, update_cr0: {:?}, op_count: {:?}, operands: {:?} }}",
            self.bc, self.bh, self.update_cr0, self.op_count, self.operands
        )
    }
}
pub mod ppc_insn {
    pub type Type = u32;
    pub const PPC_INS_INVALID: Type = 0;
    pub const PPC_INS_ADD: Type = 1;
    pub const PPC_INS_ADDC: Type = 2;
    pub const PPC_INS_ADDE: Type = 3;
    pub const PPC_INS_ADDI: Type = 4;
    pub const PPC_INS_ADDIC: Type = 5;
    pub const PPC_INS_ADDIS: Type = 6;
    pub const PPC_INS_ADDME: Type = 7;
    pub const PPC_INS_ADDZE: Type = 8;
    pub const PPC_INS_AND: Type = 9;
    pub const PPC_INS_ANDC: Type = 10;
    pub const PPC_INS_ANDIS: Type = 11;
    pub const PPC_INS_ANDI: Type = 12;
    pub const PPC_INS_B: Type = 13;
    pub const PPC_INS_BA: Type = 14;
    pub const PPC_INS_BC: Type = 15;
    pub const PPC_INS_BCCTR: Type = 16;
    pub const PPC_INS_BCCTRL: Type = 17;
    pub const PPC_INS_BCL: Type = 18;
    pub const PPC_INS_BCLR: Type = 19;
    pub const PPC_INS_BCLRL: Type = 20;
    pub const PPC_INS_BCTR: Type = 21;
    pub const PPC_INS_BCTRL: Type = 22;
    pub const PPC_INS_BDNZ: Type = 23;
    pub const PPC_INS_BDNZA: Type = 24;
    pub const PPC_INS_BDNZL: Type = 25;
    pub const PPC_INS_BDNZLA: Type = 26;
    pub const PPC_INS_BDNZLR: Type = 27;
    pub const PPC_INS_BDNZLRL: Type = 28;
    pub const PPC_INS_BDZ: Type = 29;
    pub const PPC_INS_BDZA: Type = 30;
    pub const PPC_INS_BDZL: Type = 31;
    pub const PPC_INS_BDZLA: Type = 32;
    pub const PPC_INS_BDZLR: Type = 33;
    pub const PPC_INS_BDZLRL: Type = 34;
    pub const PPC_INS_BL: Type = 35;
    pub const PPC_INS_BLA: Type = 36;
    pub const PPC_INS_BLR: Type = 37;
    pub const PPC_INS_BLRL: Type = 38;
    pub const PPC_INS_BRINC: Type = 39;
    pub const PPC_INS_CMPD: Type = 40;
    pub const PPC_INS_CMPDI: Type = 41;
    pub const PPC_INS_CMPLD: Type = 42;
    pub const PPC_INS_CMPLDI: Type = 43;
    pub const PPC_INS_CMPLW: Type = 44;
    pub const PPC_INS_CMPLWI: Type = 45;
    pub const PPC_INS_CMPW: Type = 46;
    pub const PPC_INS_CMPWI: Type = 47;
    pub const PPC_INS_CNTLZD: Type = 48;
    pub const PPC_INS_CNTLZW: Type = 49;
    pub const PPC_INS_CREQV: Type = 50;
    pub const PPC_INS_CRXOR: Type = 51;
    pub const PPC_INS_CRAND: Type = 52;
    pub const PPC_INS_CRANDC: Type = 53;
    pub const PPC_INS_CRNAND: Type = 54;
    pub const PPC_INS_CRNOR: Type = 55;
    pub const PPC_INS_CROR: Type = 56;
    pub const PPC_INS_CRORC: Type = 57;
    pub const PPC_INS_DCBA: Type = 58;
    pub const PPC_INS_DCBF: Type = 59;
    pub const PPC_INS_DCBI: Type = 60;
    pub const PPC_INS_DCBST: Type = 61;
    pub const PPC_INS_DCBT: Type = 62;
    pub const PPC_INS_DCBTST: Type = 63;
    pub const PPC_INS_DCBZ: Type = 64;
    pub const PPC_INS_DCBZL: Type = 65;
    pub const PPC_INS_DCCCI: Type = 66;
    pub const PPC_INS_DIVD: Type = 67;
    pub const PPC_INS_DIVDU: Type = 68;
    pub const PPC_INS_DIVW: Type = 69;
    pub const PPC_INS_DIVWU: Type = 70;
    pub const PPC_INS_DSS: Type = 71;
    pub const PPC_INS_DSSALL: Type = 72;
    pub const PPC_INS_DST: Type = 73;
    pub const PPC_INS_DSTST: Type = 74;
    pub const PPC_INS_DSTSTT: Type = 75;
    pub const PPC_INS_DSTT: Type = 76;
    pub const PPC_INS_EIEIO: Type = 77;
    pub const PPC_INS_EQV: Type = 78;
    pub const PPC_INS_EVABS: Type = 79;
    pub const PPC_INS_EVADDIW: Type = 80;
    pub const PPC_INS_EVADDSMIAAW: Type = 81;
    pub const PPC_INS_EVADDSSIAAW: Type = 82;
    pub const PPC_INS_EVADDUMIAAW: Type = 83;
    pub const PPC_INS_EVADDUSIAAW: Type = 84;
    pub const PPC_INS_EVADDW: Type = 85;
    pub const PPC_INS_EVAND: Type = 86;
    pub const PPC_INS_EVANDC: Type = 87;
    pub const PPC_INS_EVCMPEQ: Type = 88;
    pub const PPC_INS_EVCMPGTS: Type = 89;
    pub const PPC_INS_EVCMPGTU: Type = 90;
    pub const PPC_INS_EVCMPLTS: Type = 91;
    pub const PPC_INS_EVCMPLTU: Type = 92;
    pub const PPC_INS_EVCNTLSW: Type = 93;
    pub const PPC_INS_EVCNTLZW: Type = 94;
    pub const PPC_INS_EVDIVWS: Type = 95;
    pub const PPC_INS_EVDIVWU: Type = 96;
    pub const PPC_INS_EVEQV: Type = 97;
    pub const PPC_INS_EVEXTSB: Type = 98;
    pub const PPC_INS_EVEXTSH: Type = 99;
    pub const PPC_INS_EVLDD: Type = 100;
    pub const PPC_INS_EVLDDX: Type = 101;
    pub const PPC_INS_EVLDH: Type = 102;
    pub const PPC_INS_EVLDHX: Type = 103;
    pub const PPC_INS_EVLDW: Type = 104;
    pub const PPC_INS_EVLDWX: Type = 105;
    pub const PPC_INS_EVLHHESPLAT: Type = 106;
    pub const PPC_INS_EVLHHESPLATX: Type = 107;
    pub const PPC_INS_EVLHHOSSPLAT: Type = 108;
    pub const PPC_INS_EVLHHOSSPLATX: Type = 109;
    pub const PPC_INS_EVLHHOUSPLAT: Type = 110;
    pub const PPC_INS_EVLHHOUSPLATX: Type = 111;
    pub const PPC_INS_EVLWHE: Type = 112;
    pub const PPC_INS_EVLWHEX: Type = 113;
    pub const PPC_INS_EVLWHOS: Type = 114;
    pub const PPC_INS_EVLWHOSX: Type = 115;
    pub const PPC_INS_EVLWHOU: Type = 116;
    pub const PPC_INS_EVLWHOUX: Type = 117;
    pub const PPC_INS_EVLWHSPLAT: Type = 118;
    pub const PPC_INS_EVLWHSPLATX: Type = 119;
    pub const PPC_INS_EVLWWSPLAT: Type = 120;
    pub const PPC_INS_EVLWWSPLATX: Type = 121;
    pub const PPC_INS_EVMERGEHI: Type = 122;
    pub const PPC_INS_EVMERGEHILO: Type = 123;
    pub const PPC_INS_EVMERGELO: Type = 124;
    pub const PPC_INS_EVMERGELOHI: Type = 125;
    pub const PPC_INS_EVMHEGSMFAA: Type = 126;
    pub const PPC_INS_EVMHEGSMFAN: Type = 127;
    pub const PPC_INS_EVMHEGSMIAA: Type = 128;
    pub const PPC_INS_EVMHEGSMIAN: Type = 129;
    pub const PPC_INS_EVMHEGUMIAA: Type = 130;
    pub const PPC_INS_EVMHEGUMIAN: Type = 131;
    pub const PPC_INS_EVMHESMF: Type = 132;
    pub const PPC_INS_EVMHESMFA: Type = 133;
    pub const PPC_INS_EVMHESMFAAW: Type = 134;
    pub const PPC_INS_EVMHESMFANW: Type = 135;
    pub const PPC_INS_EVMHESMI: Type = 136;
    pub const PPC_INS_EVMHESMIA: Type = 137;
    pub const PPC_INS_EVMHESMIAAW: Type = 138;
    pub const PPC_INS_EVMHESMIANW: Type = 139;
    pub const PPC_INS_EVMHESSF: Type = 140;
    pub const PPC_INS_EVMHESSFA: Type = 141;
    pub const PPC_INS_EVMHESSFAAW: Type = 142;
    pub const PPC_INS_EVMHESSFANW: Type = 143;
    pub const PPC_INS_EVMHESSIAAW: Type = 144;
    pub const PPC_INS_EVMHESSIANW: Type = 145;
    pub const PPC_INS_EVMHEUMI: Type = 146;
    pub const PPC_INS_EVMHEUMIA: Type = 147;
    pub const PPC_INS_EVMHEUMIAAW: Type = 148;
    pub const PPC_INS_EVMHEUMIANW: Type = 149;
    pub const PPC_INS_EVMHEUSIAAW: Type = 150;
    pub const PPC_INS_EVMHEUSIANW: Type = 151;
    pub const PPC_INS_EVMHOGSMFAA: Type = 152;
    pub const PPC_INS_EVMHOGSMFAN: Type = 153;
    pub const PPC_INS_EVMHOGSMIAA: Type = 154;
    pub const PPC_INS_EVMHOGSMIAN: Type = 155;
    pub const PPC_INS_EVMHOGUMIAA: Type = 156;
    pub const PPC_INS_EVMHOGUMIAN: Type = 157;
    pub const PPC_INS_EVMHOSMF: Type = 158;
    pub const PPC_INS_EVMHOSMFA: Type = 159;
    pub const PPC_INS_EVMHOSMFAAW: Type = 160;
    pub const PPC_INS_EVMHOSMFANW: Type = 161;
    pub const PPC_INS_EVMHOSMI: Type = 162;
    pub const PPC_INS_EVMHOSMIA: Type = 163;
    pub const PPC_INS_EVMHOSMIAAW: Type = 164;
    pub const PPC_INS_EVMHOSMIANW: Type = 165;
    pub const PPC_INS_EVMHOSSF: Type = 166;
    pub const PPC_INS_EVMHOSSFA: Type = 167;
    pub const PPC_INS_EVMHOSSFAAW: Type = 168;
    pub const PPC_INS_EVMHOSSFANW: Type = 169;
    pub const PPC_INS_EVMHOSSIAAW: Type = 170;
    pub const PPC_INS_EVMHOSSIANW: Type = 171;
    pub const PPC_INS_EVMHOUMI: Type = 172;
    pub const PPC_INS_EVMHOUMIA: Type = 173;
    pub const PPC_INS_EVMHOUMIAAW: Type = 174;
    pub const PPC_INS_EVMHOUMIANW: Type = 175;
    pub const PPC_INS_EVMHOUSIAAW: Type = 176;
    pub const PPC_INS_EVMHOUSIANW: Type = 177;
    pub const PPC_INS_EVMRA: Type = 178;
    pub const PPC_INS_EVMWHSMF: Type = 179;
    pub const PPC_INS_EVMWHSMFA: Type = 180;
    pub const PPC_INS_EVMWHSMI: Type = 181;
    pub const PPC_INS_EVMWHSMIA: Type = 182;
    pub const PPC_INS_EVMWHSSF: Type = 183;
    pub const PPC_INS_EVMWHSSFA: Type = 184;
    pub const PPC_INS_EVMWHUMI: Type = 185;
    pub const PPC_INS_EVMWHUMIA: Type = 186;
    pub const PPC_INS_EVMWLSMIAAW: Type = 187;
    pub const PPC_INS_EVMWLSMIANW: Type = 188;
    pub const PPC_INS_EVMWLSSIAAW: Type = 189;
    pub const PPC_INS_EVMWLSSIANW: Type = 190;
    pub const PPC_INS_EVMWLUMI: Type = 191;
    pub const PPC_INS_EVMWLUMIA: Type = 192;
    pub const PPC_INS_EVMWLUMIAAW: Type = 193;
    pub const PPC_INS_EVMWLUMIANW: Type = 194;
    pub const PPC_INS_EVMWLUSIAAW: Type = 195;
    pub const PPC_INS_EVMWLUSIANW: Type = 196;
    pub const PPC_INS_EVMWSMF: Type = 197;
    pub const PPC_INS_EVMWSMFA: Type = 198;
    pub const PPC_INS_EVMWSMFAA: Type = 199;
    pub const PPC_INS_EVMWSMFAN: Type = 200;
    pub const PPC_INS_EVMWSMI: Type = 201;
    pub const PPC_INS_EVMWSMIA: Type = 202;
    pub const PPC_INS_EVMWSMIAA: Type = 203;
    pub const PPC_INS_EVMWSMIAN: Type = 204;
    pub const PPC_INS_EVMWSSF: Type = 205;
    pub const PPC_INS_EVMWSSFA: Type = 206;
    pub const PPC_INS_EVMWSSFAA: Type = 207;
    pub const PPC_INS_EVMWSSFAN: Type = 208;
    pub const PPC_INS_EVMWUMI: Type = 209;
    pub const PPC_INS_EVMWUMIA: Type = 210;
    pub const PPC_INS_EVMWUMIAA: Type = 211;
    pub const PPC_INS_EVMWUMIAN: Type = 212;
    pub const PPC_INS_EVNAND: Type = 213;
    pub const PPC_INS_EVNEG: Type = 214;
    pub const PPC_INS_EVNOR: Type = 215;
    pub const PPC_INS_EVOR: Type = 216;
    pub const PPC_INS_EVORC: Type = 217;
    pub const PPC_INS_EVRLW: Type = 218;
    pub const PPC_INS_EVRLWI: Type = 219;
    pub const PPC_INS_EVRNDW: Type = 220;
    pub const PPC_INS_EVSLW: Type = 221;
    pub const PPC_INS_EVSLWI: Type = 222;
    pub const PPC_INS_EVSPLATFI: Type = 223;
    pub const PPC_INS_EVSPLATI: Type = 224;
    pub const PPC_INS_EVSRWIS: Type = 225;
    pub const PPC_INS_EVSRWIU: Type = 226;
    pub const PPC_INS_EVSRWS: Type = 227;
    pub const PPC_INS_EVSRWU: Type = 228;
    pub const PPC_INS_EVSTDD: Type = 229;
    pub const PPC_INS_EVSTDDX: Type = 230;
    pub const PPC_INS_EVSTDH: Type = 231;
    pub const PPC_INS_EVSTDHX: Type = 232;
    pub const PPC_INS_EVSTDW: Type = 233;
    pub const PPC_INS_EVSTDWX: Type = 234;
    pub const PPC_INS_EVSTWHE: Type = 235;
    pub const PPC_INS_EVSTWHEX: Type = 236;
    pub const PPC_INS_EVSTWHO: Type = 237;
    pub const PPC_INS_EVSTWHOX: Type = 238;
    pub const PPC_INS_EVSTWWE: Type = 239;
    pub const PPC_INS_EVSTWWEX: Type = 240;
    pub const PPC_INS_EVSTWWO: Type = 241;
    pub const PPC_INS_EVSTWWOX: Type = 242;
    pub const PPC_INS_EVSUBFSMIAAW: Type = 243;
    pub const PPC_INS_EVSUBFSSIAAW: Type = 244;
    pub const PPC_INS_EVSUBFUMIAAW: Type = 245;
    pub const PPC_INS_EVSUBFUSIAAW: Type = 246;
    pub const PPC_INS_EVSUBFW: Type = 247;
    pub const PPC_INS_EVSUBIFW: Type = 248;
    pub const PPC_INS_EVXOR: Type = 249;
    pub const PPC_INS_EXTSB: Type = 250;
    pub const PPC_INS_EXTSH: Type = 251;
    pub const PPC_INS_EXTSW: Type = 252;
    pub const PPC_INS_FABS: Type = 253;
    pub const PPC_INS_FADD: Type = 254;
    pub const PPC_INS_FADDS: Type = 255;
    pub const PPC_INS_FCFID: Type = 256;
    pub const PPC_INS_FCFIDS: Type = 257;
    pub const PPC_INS_FCFIDU: Type = 258;
    pub const PPC_INS_FCFIDUS: Type = 259;
    pub const PPC_INS_FCMPU: Type = 260;
    pub const PPC_INS_FCPSGN: Type = 261;
    pub const PPC_INS_FCTID: Type = 262;
    pub const PPC_INS_FCTIDUZ: Type = 263;
    pub const PPC_INS_FCTIDZ: Type = 264;
    pub const PPC_INS_FCTIW: Type = 265;
    pub const PPC_INS_FCTIWUZ: Type = 266;
    pub const PPC_INS_FCTIWZ: Type = 267;
    pub const PPC_INS_FDIV: Type = 268;
    pub const PPC_INS_FDIVS: Type = 269;
    pub const PPC_INS_FMADD: Type = 270;
    pub const PPC_INS_FMADDS: Type = 271;
    pub const PPC_INS_FMR: Type = 272;
    pub const PPC_INS_FMSUB: Type = 273;
    pub const PPC_INS_FMSUBS: Type = 274;
    pub const PPC_INS_FMUL: Type = 275;
    pub const PPC_INS_FMULS: Type = 276;
    pub const PPC_INS_FNABS: Type = 277;
    pub const PPC_INS_FNEG: Type = 278;
    pub const PPC_INS_FNMADD: Type = 279;
    pub const PPC_INS_FNMADDS: Type = 280;
    pub const PPC_INS_FNMSUB: Type = 281;
    pub const PPC_INS_FNMSUBS: Type = 282;
    pub const PPC_INS_FRE: Type = 283;
    pub const PPC_INS_FRES: Type = 284;
    pub const PPC_INS_FRIM: Type = 285;
    pub const PPC_INS_FRIN: Type = 286;
    pub const PPC_INS_FRIP: Type = 287;
    pub const PPC_INS_FRIZ: Type = 288;
    pub const PPC_INS_FRSP: Type = 289;
    pub const PPC_INS_FRSQRTE: Type = 290;
    pub const PPC_INS_FRSQRTES: Type = 291;
    pub const PPC_INS_FSEL: Type = 292;
    pub const PPC_INS_FSQRT: Type = 293;
    pub const PPC_INS_FSQRTS: Type = 294;
    pub const PPC_INS_FSUB: Type = 295;
    pub const PPC_INS_FSUBS: Type = 296;
    pub const PPC_INS_ICBI: Type = 297;
    pub const PPC_INS_ICCCI: Type = 298;
    pub const PPC_INS_ISEL: Type = 299;
    pub const PPC_INS_ISYNC: Type = 300;
    pub const PPC_INS_LA: Type = 301;
    pub const PPC_INS_LBZ: Type = 302;
    pub const PPC_INS_LBZU: Type = 303;
    pub const PPC_INS_LBZUX: Type = 304;
    pub const PPC_INS_LBZX: Type = 305;
    pub const PPC_INS_LD: Type = 306;
    pub const PPC_INS_LDARX: Type = 307;
    pub const PPC_INS_LDBRX: Type = 308;
    pub const PPC_INS_LDU: Type = 309;
    pub const PPC_INS_LDUX: Type = 310;
    pub const PPC_INS_LDX: Type = 311;
    pub const PPC_INS_LFD: Type = 312;
    pub const PPC_INS_LFDU: Type = 313;
    pub const PPC_INS_LFDUX: Type = 314;
    pub const PPC_INS_LFDX: Type = 315;
    pub const PPC_INS_LFIWAX: Type = 316;
    pub const PPC_INS_LFIWZX: Type = 317;
    pub const PPC_INS_LFS: Type = 318;
    pub const PPC_INS_LFSU: Type = 319;
    pub const PPC_INS_LFSUX: Type = 320;
    pub const PPC_INS_LFSX: Type = 321;
    pub const PPC_INS_LHA: Type = 322;
    pub const PPC_INS_LHAU: Type = 323;
    pub const PPC_INS_LHAUX: Type = 324;
    pub const PPC_INS_LHAX: Type = 325;
    pub const PPC_INS_LHBRX: Type = 326;
    pub const PPC_INS_LHZ: Type = 327;
    pub const PPC_INS_LHZU: Type = 328;
    pub const PPC_INS_LHZUX: Type = 329;
    pub const PPC_INS_LHZX: Type = 330;
    pub const PPC_INS_LI: Type = 331;
    pub const PPC_INS_LIS: Type = 332;
    pub const PPC_INS_LMW: Type = 333;
    pub const PPC_INS_LSWI: Type = 334;
    pub const PPC_INS_LVEBX: Type = 335;
    pub const PPC_INS_LVEHX: Type = 336;
    pub const PPC_INS_LVEWX: Type = 337;
    pub const PPC_INS_LVSL: Type = 338;
    pub const PPC_INS_LVSR: Type = 339;
    pub const PPC_INS_LVX: Type = 340;
    pub const PPC_INS_LVXL: Type = 341;
    pub const PPC_INS_LWA: Type = 342;
    pub const PPC_INS_LWARX: Type = 343;
    pub const PPC_INS_LWAUX: Type = 344;
    pub const PPC_INS_LWAX: Type = 345;
    pub const PPC_INS_LWBRX: Type = 346;
    pub const PPC_INS_LWZ: Type = 347;
    pub const PPC_INS_LWZU: Type = 348;
    pub const PPC_INS_LWZUX: Type = 349;
    pub const PPC_INS_LWZX: Type = 350;
    pub const PPC_INS_LXSDX: Type = 351;
    pub const PPC_INS_LXVD2X: Type = 352;
    pub const PPC_INS_LXVDSX: Type = 353;
    pub const PPC_INS_LXVW4X: Type = 354;
    pub const PPC_INS_MBAR: Type = 355;
    pub const PPC_INS_MCRF: Type = 356;
    pub const PPC_INS_MFCR: Type = 357;
    pub const PPC_INS_MFCTR: Type = 358;
    pub const PPC_INS_MFDCR: Type = 359;
    pub const PPC_INS_MFFS: Type = 360;
    pub const PPC_INS_MFLR: Type = 361;
    pub const PPC_INS_MFMSR: Type = 362;
    pub const PPC_INS_MFOCRF: Type = 363;
    pub const PPC_INS_MFSPR: Type = 364;
    pub const PPC_INS_MFSR: Type = 365;
    pub const PPC_INS_MFSRIN: Type = 366;
    pub const PPC_INS_MFTB: Type = 367;
    pub const PPC_INS_MFVSCR: Type = 368;
    pub const PPC_INS_MSYNC: Type = 369;
    pub const PPC_INS_MTCRF: Type = 370;
    pub const PPC_INS_MTCTR: Type = 371;
    pub const PPC_INS_MTDCR: Type = 372;
    pub const PPC_INS_MTFSB0: Type = 373;
    pub const PPC_INS_MTFSB1: Type = 374;
    pub const PPC_INS_MTFSF: Type = 375;
    pub const PPC_INS_MTLR: Type = 376;
    pub const PPC_INS_MTMSR: Type = 377;
    pub const PPC_INS_MTMSRD: Type = 378;
    pub const PPC_INS_MTOCRF: Type = 379;
    pub const PPC_INS_MTSPR: Type = 380;
    pub const PPC_INS_MTSR: Type = 381;
    pub const PPC_INS_MTSRIN: Type = 382;
    pub const PPC_INS_MTVSCR: Type = 383;
    pub const PPC_INS_MULHD: Type = 384;
    pub const PPC_INS_MULHDU: Type = 385;
    pub const PPC_INS_MULHW: Type = 386;
    pub const PPC_INS_MULHWU: Type = 387;
    pub const PPC_INS_MULLD: Type = 388;
    pub const PPC_INS_MULLI: Type = 389;
    pub const PPC_INS_MULLW: Type = 390;
    pub const PPC_INS_NAND: Type = 391;
    pub const PPC_INS_NEG: Type = 392;
    pub const PPC_INS_NOP: Type = 393;
    pub const PPC_INS_ORI: Type = 394;
    pub const PPC_INS_NOR: Type = 395;
    pub const PPC_INS_OR: Type = 396;
    pub const PPC_INS_ORC: Type = 397;
    pub const PPC_INS_ORIS: Type = 398;
    pub const PPC_INS_POPCNTD: Type = 399;
    pub const PPC_INS_POPCNTW: Type = 400;
    pub const PPC_INS_RFCI: Type = 401;
    pub const PPC_INS_RFDI: Type = 402;
    pub const PPC_INS_RFI: Type = 403;
    pub const PPC_INS_RFID: Type = 404;
    pub const PPC_INS_RFMCI: Type = 405;
    pub const PPC_INS_RLDCL: Type = 406;
    pub const PPC_INS_RLDCR: Type = 407;
    pub const PPC_INS_RLDIC: Type = 408;
    pub const PPC_INS_RLDICL: Type = 409;
    pub const PPC_INS_RLDICR: Type = 410;
    pub const PPC_INS_RLDIMI: Type = 411;
    pub const PPC_INS_RLWIMI: Type = 412;
    pub const PPC_INS_RLWINM: Type = 413;
    pub const PPC_INS_RLWNM: Type = 414;
    pub const PPC_INS_SC: Type = 415;
    pub const PPC_INS_SLBIA: Type = 416;
    pub const PPC_INS_SLBIE: Type = 417;
    pub const PPC_INS_SLBMFEE: Type = 418;
    pub const PPC_INS_SLBMTE: Type = 419;
    pub const PPC_INS_SLD: Type = 420;
    pub const PPC_INS_SLW: Type = 421;
    pub const PPC_INS_SRAD: Type = 422;
    pub const PPC_INS_SRADI: Type = 423;
    pub const PPC_INS_SRAW: Type = 424;
    pub const PPC_INS_SRAWI: Type = 425;
    pub const PPC_INS_SRD: Type = 426;
    pub const PPC_INS_SRW: Type = 427;
    pub const PPC_INS_STB: Type = 428;
    pub const PPC_INS_STBU: Type = 429;
    pub const PPC_INS_STBUX: Type = 430;
    pub const PPC_INS_STBX: Type = 431;
    pub const PPC_INS_STD: Type = 432;
    pub const PPC_INS_STDBRX: Type = 433;
    pub const PPC_INS_STDCX: Type = 434;
    pub const PPC_INS_STDU: Type = 435;
    pub const PPC_INS_STDUX: Type = 436;
    pub const PPC_INS_STDX: Type = 437;
    pub const PPC_INS_STFD: Type = 438;
    pub const PPC_INS_STFDU: Type = 439;
    pub const PPC_INS_STFDUX: Type = 440;
    pub const PPC_INS_STFDX: Type = 441;
    pub const PPC_INS_STFIWX: Type = 442;
    pub const PPC_INS_STFS: Type = 443;
    pub const PPC_INS_STFSU: Type = 444;
    pub const PPC_INS_STFSUX: Type = 445;
    pub const PPC_INS_STFSX: Type = 446;
    pub const PPC_INS_STH: Type = 447;
    pub const PPC_INS_STHBRX: Type = 448;
    pub const PPC_INS_STHU: Type = 449;
    pub const PPC_INS_STHUX: Type = 450;
    pub const PPC_INS_STHX: Type = 451;
    pub const PPC_INS_STMW: Type = 452;
    pub const PPC_INS_STSWI: Type = 453;
    pub const PPC_INS_STVEBX: Type = 454;
    pub const PPC_INS_STVEHX: Type = 455;
    pub const PPC_INS_STVEWX: Type = 456;
    pub const PPC_INS_STVX: Type = 457;
    pub const PPC_INS_STVXL: Type = 458;
    pub const PPC_INS_STW: Type = 459;
    pub const PPC_INS_STWBRX: Type = 460;
    pub const PPC_INS_STWCX: Type = 461;
    pub const PPC_INS_STWU: Type = 462;
    pub const PPC_INS_STWUX: Type = 463;
    pub const PPC_INS_STWX: Type = 464;
    pub const PPC_INS_STXSDX: Type = 465;
    pub const PPC_INS_STXVD2X: Type = 466;
    pub const PPC_INS_STXVW4X: Type = 467;
    pub const PPC_INS_SUBF: Type = 468;
    pub const PPC_INS_SUBFC: Type = 469;
    pub const PPC_INS_SUBFE: Type = 470;
    pub const PPC_INS_SUBFIC: Type = 471;
    pub const PPC_INS_SUBFME: Type = 472;
    pub const PPC_INS_SUBFZE: Type = 473;
    pub const PPC_INS_SYNC: Type = 474;
    pub const PPC_INS_TD: Type = 475;
    pub const PPC_INS_TDI: Type = 476;
    pub const PPC_INS_TLBIA: Type = 477;
    pub const PPC_INS_TLBIE: Type = 478;
    pub const PPC_INS_TLBIEL: Type = 479;
    pub const PPC_INS_TLBIVAX: Type = 480;
    pub const PPC_INS_TLBLD: Type = 481;
    pub const PPC_INS_TLBLI: Type = 482;
    pub const PPC_INS_TLBRE: Type = 483;
    pub const PPC_INS_TLBSX: Type = 484;
    pub const PPC_INS_TLBSYNC: Type = 485;
    pub const PPC_INS_TLBWE: Type = 486;
    pub const PPC_INS_TRAP: Type = 487;
    pub const PPC_INS_TW: Type = 488;
    pub const PPC_INS_TWI: Type = 489;
    pub const PPC_INS_VADDCUW: Type = 490;
    pub const PPC_INS_VADDFP: Type = 491;
    pub const PPC_INS_VADDSBS: Type = 492;
    pub const PPC_INS_VADDSHS: Type = 493;
    pub const PPC_INS_VADDSWS: Type = 494;
    pub const PPC_INS_VADDUBM: Type = 495;
    pub const PPC_INS_VADDUBS: Type = 496;
    pub const PPC_INS_VADDUHM: Type = 497;
    pub const PPC_INS_VADDUHS: Type = 498;
    pub const PPC_INS_VADDUWM: Type = 499;
    pub const PPC_INS_VADDUWS: Type = 500;
    pub const PPC_INS_VAND: Type = 501;
    pub const PPC_INS_VANDC: Type = 502;
    pub const PPC_INS_VAVGSB: Type = 503;
    pub const PPC_INS_VAVGSH: Type = 504;
    pub const PPC_INS_VAVGSW: Type = 505;
    pub const PPC_INS_VAVGUB: Type = 506;
    pub const PPC_INS_VAVGUH: Type = 507;
    pub const PPC_INS_VAVGUW: Type = 508;
    pub const PPC_INS_VCFSX: Type = 509;
    pub const PPC_INS_VCFUX: Type = 510;
    pub const PPC_INS_VCMPBFP: Type = 511;
    pub const PPC_INS_VCMPEQFP: Type = 512;
    pub const PPC_INS_VCMPEQUB: Type = 513;
    pub const PPC_INS_VCMPEQUH: Type = 514;
    pub const PPC_INS_VCMPEQUW: Type = 515;
    pub const PPC_INS_VCMPGEFP: Type = 516;
    pub const PPC_INS_VCMPGTFP: Type = 517;
    pub const PPC_INS_VCMPGTSB: Type = 518;
    pub const PPC_INS_VCMPGTSH: Type = 519;
    pub const PPC_INS_VCMPGTSW: Type = 520;
    pub const PPC_INS_VCMPGTUB: Type = 521;
    pub const PPC_INS_VCMPGTUH: Type = 522;
    pub const PPC_INS_VCMPGTUW: Type = 523;
    pub const PPC_INS_VCTSXS: Type = 524;
    pub const PPC_INS_VCTUXS: Type = 525;
    pub const PPC_INS_VEXPTEFP: Type = 526;
    pub const PPC_INS_VLOGEFP: Type = 527;
    pub const PPC_INS_VMADDFP: Type = 528;
    pub const PPC_INS_VMAXFP: Type = 529;
    pub const PPC_INS_VMAXSB: Type = 530;
    pub const PPC_INS_VMAXSH: Type = 531;
    pub const PPC_INS_VMAXSW: Type = 532;
    pub const PPC_INS_VMAXUB: Type = 533;
    pub const PPC_INS_VMAXUH: Type = 534;
    pub const PPC_INS_VMAXUW: Type = 535;
    pub const PPC_INS_VMHADDSHS: Type = 536;
    pub const PPC_INS_VMHRADDSHS: Type = 537;
    pub const PPC_INS_VMINFP: Type = 538;
    pub const PPC_INS_VMINSB: Type = 539;
    pub const PPC_INS_VMINSH: Type = 540;
    pub const PPC_INS_VMINSW: Type = 541;
    pub const PPC_INS_VMINUB: Type = 542;
    pub const PPC_INS_VMINUH: Type = 543;
    pub const PPC_INS_VMINUW: Type = 544;
    pub const PPC_INS_VMLADDUHM: Type = 545;
    pub const PPC_INS_VMRGHB: Type = 546;
    pub const PPC_INS_VMRGHH: Type = 547;
    pub const PPC_INS_VMRGHW: Type = 548;
    pub const PPC_INS_VMRGLB: Type = 549;
    pub const PPC_INS_VMRGLH: Type = 550;
    pub const PPC_INS_VMRGLW: Type = 551;
    pub const PPC_INS_VMSUMMBM: Type = 552;
    pub const PPC_INS_VMSUMSHM: Type = 553;
    pub const PPC_INS_VMSUMSHS: Type = 554;
    pub const PPC_INS_VMSUMUBM: Type = 555;
    pub const PPC_INS_VMSUMUHM: Type = 556;
    pub const PPC_INS_VMSUMUHS: Type = 557;
    pub const PPC_INS_VMULESB: Type = 558;
    pub const PPC_INS_VMULESH: Type = 559;
    pub const PPC_INS_VMULEUB: Type = 560;
    pub const PPC_INS_VMULEUH: Type = 561;
    pub const PPC_INS_VMULOSB: Type = 562;
    pub const PPC_INS_VMULOSH: Type = 563;
    pub const PPC_INS_VMULOUB: Type = 564;
    pub const PPC_INS_VMULOUH: Type = 565;
    pub const PPC_INS_VNMSUBFP: Type = 566;
    pub const PPC_INS_VNOR: Type = 567;
    pub const PPC_INS_VOR: Type = 568;
    pub const PPC_INS_VPERM: Type = 569;
    pub const PPC_INS_VPKPX: Type = 570;
    pub const PPC_INS_VPKSHSS: Type = 571;
    pub const PPC_INS_VPKSHUS: Type = 572;
    pub const PPC_INS_VPKSWSS: Type = 573;
    pub const PPC_INS_VPKSWUS: Type = 574;
    pub const PPC_INS_VPKUHUM: Type = 575;
    pub const PPC_INS_VPKUHUS: Type = 576;
    pub const PPC_INS_VPKUWUM: Type = 577;
    pub const PPC_INS_VPKUWUS: Type = 578;
    pub const PPC_INS_VREFP: Type = 579;
    pub const PPC_INS_VRFIM: Type = 580;
    pub const PPC_INS_VRFIN: Type = 581;
    pub const PPC_INS_VRFIP: Type = 582;
    pub const PPC_INS_VRFIZ: Type = 583;
    pub const PPC_INS_VRLB: Type = 584;
    pub const PPC_INS_VRLH: Type = 585;
    pub const PPC_INS_VRLW: Type = 586;
    pub const PPC_INS_VRSQRTEFP: Type = 587;
    pub const PPC_INS_VSEL: Type = 588;
    pub const PPC_INS_VSL: Type = 589;
    pub const PPC_INS_VSLB: Type = 590;
    pub const PPC_INS_VSLDOI: Type = 591;
    pub const PPC_INS_VSLH: Type = 592;
    pub const PPC_INS_VSLO: Type = 593;
    pub const PPC_INS_VSLW: Type = 594;
    pub const PPC_INS_VSPLTB: Type = 595;
    pub const PPC_INS_VSPLTH: Type = 596;
    pub const PPC_INS_VSPLTISB: Type = 597;
    pub const PPC_INS_VSPLTISH: Type = 598;
    pub const PPC_INS_VSPLTISW: Type = 599;
    pub const PPC_INS_VSPLTW: Type = 600;
    pub const PPC_INS_VSR: Type = 601;
    pub const PPC_INS_VSRAB: Type = 602;
    pub const PPC_INS_VSRAH: Type = 603;
    pub const PPC_INS_VSRAW: Type = 604;
    pub const PPC_INS_VSRB: Type = 605;
    pub const PPC_INS_VSRH: Type = 606;
    pub const PPC_INS_VSRO: Type = 607;
    pub const PPC_INS_VSRW: Type = 608;
    pub const PPC_INS_VSUBCUW: Type = 609;
    pub const PPC_INS_VSUBFP: Type = 610;
    pub const PPC_INS_VSUBSBS: Type = 611;
    pub const PPC_INS_VSUBSHS: Type = 612;
    pub const PPC_INS_VSUBSWS: Type = 613;
    pub const PPC_INS_VSUBUBM: Type = 614;
    pub const PPC_INS_VSUBUBS: Type = 615;
    pub const PPC_INS_VSUBUHM: Type = 616;
    pub const PPC_INS_VSUBUHS: Type = 617;
    pub const PPC_INS_VSUBUWM: Type = 618;
    pub const PPC_INS_VSUBUWS: Type = 619;
    pub const PPC_INS_VSUM2SWS: Type = 620;
    pub const PPC_INS_VSUM4SBS: Type = 621;
    pub const PPC_INS_VSUM4SHS: Type = 622;
    pub const PPC_INS_VSUM4UBS: Type = 623;
    pub const PPC_INS_VSUMSWS: Type = 624;
    pub const PPC_INS_VUPKHPX: Type = 625;
    pub const PPC_INS_VUPKHSB: Type = 626;
    pub const PPC_INS_VUPKHSH: Type = 627;
    pub const PPC_INS_VUPKLPX: Type = 628;
    pub const PPC_INS_VUPKLSB: Type = 629;
    pub const PPC_INS_VUPKLSH: Type = 630;
    pub const PPC_INS_VXOR: Type = 631;
    pub const PPC_INS_WAIT: Type = 632;
    pub const PPC_INS_WRTEE: Type = 633;
    pub const PPC_INS_WRTEEI: Type = 634;
    pub const PPC_INS_XOR: Type = 635;
    pub const PPC_INS_XORI: Type = 636;
    pub const PPC_INS_XORIS: Type = 637;
    pub const PPC_INS_XSABSDP: Type = 638;
    pub const PPC_INS_XSADDDP: Type = 639;
    pub const PPC_INS_XSCMPODP: Type = 640;
    pub const PPC_INS_XSCMPUDP: Type = 641;
    pub const PPC_INS_XSCPSGNDP: Type = 642;
    pub const PPC_INS_XSCVDPSP: Type = 643;
    pub const PPC_INS_XSCVDPSXDS: Type = 644;
    pub const PPC_INS_XSCVDPSXWS: Type = 645;
    pub const PPC_INS_XSCVDPUXDS: Type = 646;
    pub const PPC_INS_XSCVDPUXWS: Type = 647;
    pub const PPC_INS_XSCVSPDP: Type = 648;
    pub const PPC_INS_XSCVSXDDP: Type = 649;
    pub const PPC_INS_XSCVUXDDP: Type = 650;
    pub const PPC_INS_XSDIVDP: Type = 651;
    pub const PPC_INS_XSMADDADP: Type = 652;
    pub const PPC_INS_XSMADDMDP: Type = 653;
    pub const PPC_INS_XSMAXDP: Type = 654;
    pub const PPC_INS_XSMINDP: Type = 655;
    pub const PPC_INS_XSMSUBADP: Type = 656;
    pub const PPC_INS_XSMSUBMDP: Type = 657;
    pub const PPC_INS_XSMULDP: Type = 658;
    pub const PPC_INS_XSNABSDP: Type = 659;
    pub const PPC_INS_XSNEGDP: Type = 660;
    pub const PPC_INS_XSNMADDADP: Type = 661;
    pub const PPC_INS_XSNMADDMDP: Type = 662;
    pub const PPC_INS_XSNMSUBADP: Type = 663;
    pub const PPC_INS_XSNMSUBMDP: Type = 664;
    pub const PPC_INS_XSRDPI: Type = 665;
    pub const PPC_INS_XSRDPIC: Type = 666;
    pub const PPC_INS_XSRDPIM: Type = 667;
    pub const PPC_INS_XSRDPIP: Type = 668;
    pub const PPC_INS_XSRDPIZ: Type = 669;
    pub const PPC_INS_XSREDP: Type = 670;
    pub const PPC_INS_XSRSQRTEDP: Type = 671;
    pub const PPC_INS_XSSQRTDP: Type = 672;
    pub const PPC_INS_XSSUBDP: Type = 673;
    pub const PPC_INS_XSTDIVDP: Type = 674;
    pub const PPC_INS_XSTSQRTDP: Type = 675;
    pub const PPC_INS_XVABSDP: Type = 676;
    pub const PPC_INS_XVABSSP: Type = 677;
    pub const PPC_INS_XVADDDP: Type = 678;
    pub const PPC_INS_XVADDSP: Type = 679;
    pub const PPC_INS_XVCMPEQDP: Type = 680;
    pub const PPC_INS_XVCMPEQSP: Type = 681;
    pub const PPC_INS_XVCMPGEDP: Type = 682;
    pub const PPC_INS_XVCMPGESP: Type = 683;
    pub const PPC_INS_XVCMPGTDP: Type = 684;
    pub const PPC_INS_XVCMPGTSP: Type = 685;
    pub const PPC_INS_XVCPSGNDP: Type = 686;
    pub const PPC_INS_XVCPSGNSP: Type = 687;
    pub const PPC_INS_XVCVDPSP: Type = 688;
    pub const PPC_INS_XVCVDPSXDS: Type = 689;
    pub const PPC_INS_XVCVDPSXWS: Type = 690;
    pub const PPC_INS_XVCVDPUXDS: Type = 691;
    pub const PPC_INS_XVCVDPUXWS: Type = 692;
    pub const PPC_INS_XVCVSPDP: Type = 693;
    pub const PPC_INS_XVCVSPSXDS: Type = 694;
    pub const PPC_INS_XVCVSPSXWS: Type = 695;
    pub const PPC_INS_XVCVSPUXDS: Type = 696;
    pub const PPC_INS_XVCVSPUXWS: Type = 697;
    pub const PPC_INS_XVCVSXDDP: Type = 698;
    pub const PPC_INS_XVCVSXDSP: Type = 699;
    pub const PPC_INS_XVCVSXWDP: Type = 700;
    pub const PPC_INS_XVCVSXWSP: Type = 701;
    pub const PPC_INS_XVCVUXDDP: Type = 702;
    pub const PPC_INS_XVCVUXDSP: Type = 703;
    pub const PPC_INS_XVCVUXWDP: Type = 704;
    pub const PPC_INS_XVCVUXWSP: Type = 705;
    pub const PPC_INS_XVDIVDP: Type = 706;
    pub const PPC_INS_XVDIVSP: Type = 707;
    pub const PPC_INS_XVMADDADP: Type = 708;
    pub const PPC_INS_XVMADDASP: Type = 709;
    pub const PPC_INS_XVMADDMDP: Type = 710;
    pub const PPC_INS_XVMADDMSP: Type = 711;
    pub const PPC_INS_XVMAXDP: Type = 712;
    pub const PPC_INS_XVMAXSP: Type = 713;
    pub const PPC_INS_XVMINDP: Type = 714;
    pub const PPC_INS_XVMINSP: Type = 715;
    pub const PPC_INS_XVMSUBADP: Type = 716;
    pub const PPC_INS_XVMSUBASP: Type = 717;
    pub const PPC_INS_XVMSUBMDP: Type = 718;
    pub const PPC_INS_XVMSUBMSP: Type = 719;
    pub const PPC_INS_XVMULDP: Type = 720;
    pub const PPC_INS_XVMULSP: Type = 721;
    pub const PPC_INS_XVNABSDP: Type = 722;
    pub const PPC_INS_XVNABSSP: Type = 723;
    pub const PPC_INS_XVNEGDP: Type = 724;
    pub const PPC_INS_XVNEGSP: Type = 725;
    pub const PPC_INS_XVNMADDADP: Type = 726;
    pub const PPC_INS_XVNMADDASP: Type = 727;
    pub const PPC_INS_XVNMADDMDP: Type = 728;
    pub const PPC_INS_XVNMADDMSP: Type = 729;
    pub const PPC_INS_XVNMSUBADP: Type = 730;
    pub const PPC_INS_XVNMSUBASP: Type = 731;
    pub const PPC_INS_XVNMSUBMDP: Type = 732;
    pub const PPC_INS_XVNMSUBMSP: Type = 733;
    pub const PPC_INS_XVRDPI: Type = 734;
    pub const PPC_INS_XVRDPIC: Type = 735;
    pub const PPC_INS_XVRDPIM: Type = 736;
    pub const PPC_INS_XVRDPIP: Type = 737;
    pub const PPC_INS_XVRDPIZ: Type = 738;
    pub const PPC_INS_XVREDP: Type = 739;
    pub const PPC_INS_XVRESP: Type = 740;
    pub const PPC_INS_XVRSPI: Type = 741;
    pub const PPC_INS_XVRSPIC: Type = 742;
    pub const PPC_INS_XVRSPIM: Type = 743;
    pub const PPC_INS_XVRSPIP: Type = 744;
    pub const PPC_INS_XVRSPIZ: Type = 745;
    pub const PPC_INS_XVRSQRTEDP: Type = 746;
    pub const PPC_INS_XVRSQRTESP: Type = 747;
    pub const PPC_INS_XVSQRTDP: Type = 748;
    pub const PPC_INS_XVSQRTSP: Type = 749;
    pub const PPC_INS_XVSUBDP: Type = 750;
    pub const PPC_INS_XVSUBSP: Type = 751;
    pub const PPC_INS_XVTDIVDP: Type = 752;
    pub const PPC_INS_XVTDIVSP: Type = 753;
    pub const PPC_INS_XVTSQRTDP: Type = 754;
    pub const PPC_INS_XVTSQRTSP: Type = 755;
    pub const PPC_INS_XXLAND: Type = 756;
    pub const PPC_INS_XXLANDC: Type = 757;
    pub const PPC_INS_XXLNOR: Type = 758;
    pub const PPC_INS_XXLOR: Type = 759;
    pub const PPC_INS_XXLXOR: Type = 760;
    pub const PPC_INS_XXMRGHW: Type = 761;
    pub const PPC_INS_XXMRGLW: Type = 762;
    pub const PPC_INS_XXPERMDI: Type = 763;
    pub const PPC_INS_XXSEL: Type = 764;
    pub const PPC_INS_XXSLDWI: Type = 765;
    pub const PPC_INS_XXSPLTW: Type = 766;
    pub const PPC_INS_BCA: Type = 767;
    pub const PPC_INS_BCLA: Type = 768;
    pub const PPC_INS_SLWI: Type = 769;
    pub const PPC_INS_SRWI: Type = 770;
    pub const PPC_INS_SLDI: Type = 771;
    pub const PPC_INS_BTA: Type = 772;
    pub const PPC_INS_CRSET: Type = 773;
    pub const PPC_INS_CRNOT: Type = 774;
    pub const PPC_INS_CRMOVE: Type = 775;
    pub const PPC_INS_CRCLR: Type = 776;
    pub const PPC_INS_MFBR0: Type = 777;
    pub const PPC_INS_MFBR1: Type = 778;
    pub const PPC_INS_MFBR2: Type = 779;
    pub const PPC_INS_MFBR3: Type = 780;
    pub const PPC_INS_MFBR4: Type = 781;
    pub const PPC_INS_MFBR5: Type = 782;
    pub const PPC_INS_MFBR6: Type = 783;
    pub const PPC_INS_MFBR7: Type = 784;
    pub const PPC_INS_MFXER: Type = 785;
    pub const PPC_INS_MFRTCU: Type = 786;
    pub const PPC_INS_MFRTCL: Type = 787;
    pub const PPC_INS_MFDSCR: Type = 788;
    pub const PPC_INS_MFDSISR: Type = 789;
    pub const PPC_INS_MFDAR: Type = 790;
    pub const PPC_INS_MFSRR2: Type = 791;
    pub const PPC_INS_MFSRR3: Type = 792;
    pub const PPC_INS_MFCFAR: Type = 793;
    pub const PPC_INS_MFAMR: Type = 794;
    pub const PPC_INS_MFPID: Type = 795;
    pub const PPC_INS_MFTBLO: Type = 796;
    pub const PPC_INS_MFTBHI: Type = 797;
    pub const PPC_INS_MFDBATU: Type = 798;
    pub const PPC_INS_MFDBATL: Type = 799;
    pub const PPC_INS_MFIBATU: Type = 800;
    pub const PPC_INS_MFIBATL: Type = 801;
    pub const PPC_INS_MFDCCR: Type = 802;
    pub const PPC_INS_MFICCR: Type = 803;
    pub const PPC_INS_MFDEAR: Type = 804;
    pub const PPC_INS_MFESR: Type = 805;
    pub const PPC_INS_MFSPEFSCR: Type = 806;
    pub const PPC_INS_MFTCR: Type = 807;
    pub const PPC_INS_MFASR: Type = 808;
    pub const PPC_INS_MFPVR: Type = 809;
    pub const PPC_INS_MFTBU: Type = 810;
    pub const PPC_INS_MTCR: Type = 811;
    pub const PPC_INS_MTBR0: Type = 812;
    pub const PPC_INS_MTBR1: Type = 813;
    pub const PPC_INS_MTBR2: Type = 814;
    pub const PPC_INS_MTBR3: Type = 815;
    pub const PPC_INS_MTBR4: Type = 816;
    pub const PPC_INS_MTBR5: Type = 817;
    pub const PPC_INS_MTBR6: Type = 818;
    pub const PPC_INS_MTBR7: Type = 819;
    pub const PPC_INS_MTXER: Type = 820;
    pub const PPC_INS_MTDSCR: Type = 821;
    pub const PPC_INS_MTDSISR: Type = 822;
    pub const PPC_INS_MTDAR: Type = 823;
    pub const PPC_INS_MTSRR2: Type = 824;
    pub const PPC_INS_MTSRR3: Type = 825;
    pub const PPC_INS_MTCFAR: Type = 826;
    pub const PPC_INS_MTAMR: Type = 827;
    pub const PPC_INS_MTPID: Type = 828;
    pub const PPC_INS_MTTBL: Type = 829;
    pub const PPC_INS_MTTBU: Type = 830;
    pub const PPC_INS_MTTBLO: Type = 831;
    pub const PPC_INS_MTTBHI: Type = 832;
    pub const PPC_INS_MTDBATU: Type = 833;
    pub const PPC_INS_MTDBATL: Type = 834;
    pub const PPC_INS_MTIBATU: Type = 835;
    pub const PPC_INS_MTIBATL: Type = 836;
    pub const PPC_INS_MTDCCR: Type = 837;
    pub const PPC_INS_MTICCR: Type = 838;
    pub const PPC_INS_MTDEAR: Type = 839;
    pub const PPC_INS_MTESR: Type = 840;
    pub const PPC_INS_MTSPEFSCR: Type = 841;
    pub const PPC_INS_MTTCR: Type = 842;
    pub const PPC_INS_NOT: Type = 843;
    pub const PPC_INS_MR: Type = 844;
    pub const PPC_INS_ROTLD: Type = 845;
    pub const PPC_INS_ROTLDI: Type = 846;
    pub const PPC_INS_CLRLDI: Type = 847;
    pub const PPC_INS_ROTLWI: Type = 848;
    pub const PPC_INS_CLRLWI: Type = 849;
    pub const PPC_INS_ROTLW: Type = 850;
    pub const PPC_INS_SUB: Type = 851;
    pub const PPC_INS_SUBC: Type = 852;
    pub const PPC_INS_LWSYNC: Type = 853;
    pub const PPC_INS_PTESYNC: Type = 854;
    pub const PPC_INS_TDLT: Type = 855;
    pub const PPC_INS_TDEQ: Type = 856;
    pub const PPC_INS_TDGT: Type = 857;
    pub const PPC_INS_TDNE: Type = 858;
    pub const PPC_INS_TDLLT: Type = 859;
    pub const PPC_INS_TDLGT: Type = 860;
    pub const PPC_INS_TDU: Type = 861;
    pub const PPC_INS_TDLTI: Type = 862;
    pub const PPC_INS_TDEQI: Type = 863;
    pub const PPC_INS_TDGTI: Type = 864;
    pub const PPC_INS_TDNEI: Type = 865;
    pub const PPC_INS_TDLLTI: Type = 866;
    pub const PPC_INS_TDLGTI: Type = 867;
    pub const PPC_INS_TDUI: Type = 868;
    pub const PPC_INS_TLBREHI: Type = 869;
    pub const PPC_INS_TLBRELO: Type = 870;
    pub const PPC_INS_TLBWEHI: Type = 871;
    pub const PPC_INS_TLBWELO: Type = 872;
    pub const PPC_INS_TWLT: Type = 873;
    pub const PPC_INS_TWEQ: Type = 874;
    pub const PPC_INS_TWGT: Type = 875;
    pub const PPC_INS_TWNE: Type = 876;
    pub const PPC_INS_TWLLT: Type = 877;
    pub const PPC_INS_TWLGT: Type = 878;
    pub const PPC_INS_TWU: Type = 879;
    pub const PPC_INS_TWLTI: Type = 880;
    pub const PPC_INS_TWEQI: Type = 881;
    pub const PPC_INS_TWGTI: Type = 882;
    pub const PPC_INS_TWNEI: Type = 883;
    pub const PPC_INS_TWLLTI: Type = 884;
    pub const PPC_INS_TWLGTI: Type = 885;
    pub const PPC_INS_TWUI: Type = 886;
    pub const PPC_INS_WAITRSV: Type = 887;
    pub const PPC_INS_WAITIMPL: Type = 888;
    pub const PPC_INS_XNOP: Type = 889;
    pub const PPC_INS_XVMOVDP: Type = 890;
    pub const PPC_INS_XVMOVSP: Type = 891;
    pub const PPC_INS_XXSPLTD: Type = 892;
    pub const PPC_INS_XXMRGHD: Type = 893;
    pub const PPC_INS_XXMRGLD: Type = 894;
    pub const PPC_INS_XXSWAPD: Type = 895;
    pub const PPC_INS_BT: Type = 896;
    pub const PPC_INS_BF: Type = 897;
    pub const PPC_INS_BDNZT: Type = 898;
    pub const PPC_INS_BDNZF: Type = 899;
    pub const PPC_INS_BDZF: Type = 900;
    pub const PPC_INS_BDZT: Type = 901;
    pub const PPC_INS_BFA: Type = 902;
    pub const PPC_INS_BDNZTA: Type = 903;
    pub const PPC_INS_BDNZFA: Type = 904;
    pub const PPC_INS_BDZTA: Type = 905;
    pub const PPC_INS_BDZFA: Type = 906;
    pub const PPC_INS_BTCTR: Type = 907;
    pub const PPC_INS_BFCTR: Type = 908;
    pub const PPC_INS_BTCTRL: Type = 909;
    pub const PPC_INS_BFCTRL: Type = 910;
    pub const PPC_INS_BTL: Type = 911;
    pub const PPC_INS_BFL: Type = 912;
    pub const PPC_INS_BDNZTL: Type = 913;
    pub const PPC_INS_BDNZFL: Type = 914;
    pub const PPC_INS_BDZTL: Type = 915;
    pub const PPC_INS_BDZFL: Type = 916;
    pub const PPC_INS_BTLA: Type = 917;
    pub const PPC_INS_BFLA: Type = 918;
    pub const PPC_INS_BDNZTLA: Type = 919;
    pub const PPC_INS_BDNZFLA: Type = 920;
    pub const PPC_INS_BDZTLA: Type = 921;
    pub const PPC_INS_BDZFLA: Type = 922;
    pub const PPC_INS_BTLR: Type = 923;
    pub const PPC_INS_BFLR: Type = 924;
    pub const PPC_INS_BDNZTLR: Type = 925;
    pub const PPC_INS_BDZTLR: Type = 926;
    pub const PPC_INS_BDZFLR: Type = 927;
    pub const PPC_INS_BTLRL: Type = 928;
    pub const PPC_INS_BFLRL: Type = 929;
    pub const PPC_INS_BDNZTLRL: Type = 930;
    pub const PPC_INS_BDNZFLRL: Type = 931;
    pub const PPC_INS_BDZTLRL: Type = 932;
    pub const PPC_INS_BDZFLRL: Type = 933;
    pub const PPC_INS_ENDING: Type = 934;
}
pub mod ppc_insn_group {
    pub type Type = u32;
    pub const PPC_GRP_INVALID: Type = 0;
    pub const PPC_GRP_JUMP: Type = 1;
    pub const PPC_GRP_ALTIVEC: Type = 128;
    pub const PPC_GRP_MODE32: Type = 129;
    pub const PPC_GRP_MODE64: Type = 130;
    pub const PPC_GRP_BOOKE: Type = 131;
    pub const PPC_GRP_NOTBOOKE: Type = 132;
    pub const PPC_GRP_SPE: Type = 133;
    pub const PPC_GRP_VSX: Type = 134;
    pub const PPC_GRP_E500: Type = 135;
    pub const PPC_GRP_PPC4XX: Type = 136;
    pub const PPC_GRP_PPC6XX: Type = 137;
    pub const PPC_GRP_ENDING: Type = 138;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum sparc_cc {
    SPARC_CC_INVALID = 0,
    SPARC_CC_ICC_A = 264,
    SPARC_CC_ICC_N = 256,
    SPARC_CC_ICC_NE = 265,
    SPARC_CC_ICC_E = 257,
    SPARC_CC_ICC_G = 266,
    SPARC_CC_ICC_LE = 258,
    SPARC_CC_ICC_GE = 267,
    SPARC_CC_ICC_L = 259,
    SPARC_CC_ICC_GU = 268,
    SPARC_CC_ICC_LEU = 260,
    SPARC_CC_ICC_CC = 269,
    SPARC_CC_ICC_CS = 261,
    SPARC_CC_ICC_POS = 270,
    SPARC_CC_ICC_NEG = 262,
    SPARC_CC_ICC_VC = 271,
    SPARC_CC_ICC_VS = 263,
    SPARC_CC_FCC_A = 280,
    SPARC_CC_FCC_N = 272,
    SPARC_CC_FCC_U = 279,
    SPARC_CC_FCC_G = 278,
    SPARC_CC_FCC_UG = 277,
    SPARC_CC_FCC_L = 276,
    SPARC_CC_FCC_UL = 275,
    SPARC_CC_FCC_LG = 274,
    SPARC_CC_FCC_NE = 273,
    SPARC_CC_FCC_E = 281,
    SPARC_CC_FCC_UE = 282,
    SPARC_CC_FCC_GE = 283,
    SPARC_CC_FCC_UGE = 284,
    SPARC_CC_FCC_LE = 285,
    SPARC_CC_FCC_ULE = 286,
    SPARC_CC_FCC_O = 287,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum sparc_hint {
    SPARC_HINT_INVALID = 0,
    SPARC_HINT_A = 1,
    SPARC_HINT_PT = 2,
    SPARC_HINT_PN = 4,
}
pub mod sparc_op_type {
    pub type Type = u32;
    pub const SPARC_OP_INVALID: Type = 0;
    pub const SPARC_OP_REG: Type = 1;
    pub const SPARC_OP_IMM: Type = 2;
    pub const SPARC_OP_MEM: Type = 3;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sparc_op_mem {
    pub base: u8,
    pub index: u8,
    pub disp: i32,
}
impl Clone for sparc_op_mem {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct cs_sparc_op {
    pub type_: sparc_op_type::Type,
    pub __bindgen_anon_1: cs_sparc_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy)]
pub union cs_sparc_op__bindgen_ty_1 {
    pub reg: ::std::os::raw::c_uint,
    pub imm: i32,
    pub mem: sparc_op_mem,
    _bindgen_union_align: [u32; 2usize],
}
impl Clone for cs_sparc_op__bindgen_ty_1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::fmt::Debug for cs_sparc_op__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "cs_sparc_op__bindgen_ty_1 {{ union }}")
    }
}
impl Clone for cs_sparc_op {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::fmt::Debug for cs_sparc_op {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "cs_sparc_op {{ type: {:?}, __bindgen_anon_1: {:?} }}",
            self.type_, self.__bindgen_anon_1
        )
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct cs_sparc {
    pub cc: sparc_cc,
    pub hint: sparc_hint,
    pub op_count: u8,
    pub operands: [cs_sparc_op; 4usize],
}
impl Clone for cs_sparc {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::fmt::Debug for cs_sparc {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "cs_sparc {{ cc: {:?}, hint: {:?}, op_count: {:?}, operands: {:?} }}",
            self.cc, self.hint, self.op_count, self.operands
        )
    }
}
pub mod sparc_reg {
    pub type Type = u32;
    pub const SPARC_REG_INVALID: Type = 0;
    pub const SPARC_REG_F0: Type = 1;
    pub const SPARC_REG_F1: Type = 2;
    pub const SPARC_REG_F2: Type = 3;
    pub const SPARC_REG_F3: Type = 4;
    pub const SPARC_REG_F4: Type = 5;
    pub const SPARC_REG_F5: Type = 6;
    pub const SPARC_REG_F6: Type = 7;
    pub const SPARC_REG_F7: Type = 8;
    pub const SPARC_REG_F8: Type = 9;
    pub const SPARC_REG_F9: Type = 10;
    pub const SPARC_REG_F10: Type = 11;
    pub const SPARC_REG_F11: Type = 12;
    pub const SPARC_REG_F12: Type = 13;
    pub const SPARC_REG_F13: Type = 14;
    pub const SPARC_REG_F14: Type = 15;
    pub const SPARC_REG_F15: Type = 16;
    pub const SPARC_REG_F16: Type = 17;
    pub const SPARC_REG_F17: Type = 18;
    pub const SPARC_REG_F18: Type = 19;
    pub const SPARC_REG_F19: Type = 20;
    pub const SPARC_REG_F20: Type = 21;
    pub const SPARC_REG_F21: Type = 22;
    pub const SPARC_REG_F22: Type = 23;
    pub const SPARC_REG_F23: Type = 24;
    pub const SPARC_REG_F24: Type = 25;
    pub const SPARC_REG_F25: Type = 26;
    pub const SPARC_REG_F26: Type = 27;
    pub const SPARC_REG_F27: Type = 28;
    pub const SPARC_REG_F28: Type = 29;
    pub const SPARC_REG_F29: Type = 30;
    pub const SPARC_REG_F30: Type = 31;
    pub const SPARC_REG_F31: Type = 32;
    pub const SPARC_REG_F32: Type = 33;
    pub const SPARC_REG_F34: Type = 34;
    pub const SPARC_REG_F36: Type = 35;
    pub const SPARC_REG_F38: Type = 36;
    pub const SPARC_REG_F40: Type = 37;
    pub const SPARC_REG_F42: Type = 38;
    pub const SPARC_REG_F44: Type = 39;
    pub const SPARC_REG_F46: Type = 40;
    pub const SPARC_REG_F48: Type = 41;
    pub const SPARC_REG_F50: Type = 42;
    pub const SPARC_REG_F52: Type = 43;
    pub const SPARC_REG_F54: Type = 44;
    pub const SPARC_REG_F56: Type = 45;
    pub const SPARC_REG_F58: Type = 46;
    pub const SPARC_REG_F60: Type = 47;
    pub const SPARC_REG_F62: Type = 48;
    pub const SPARC_REG_FCC0: Type = 49;
    pub const SPARC_REG_FCC1: Type = 50;
    pub const SPARC_REG_FCC2: Type = 51;
    pub const SPARC_REG_FCC3: Type = 52;
    pub const SPARC_REG_FP: Type = 53;
    pub const SPARC_REG_G0: Type = 54;
    pub const SPARC_REG_G1: Type = 55;
    pub const SPARC_REG_G2: Type = 56;
    pub const SPARC_REG_G3: Type = 57;
    pub const SPARC_REG_G4: Type = 58;
    pub const SPARC_REG_G5: Type = 59;
    pub const SPARC_REG_G6: Type = 60;
    pub const SPARC_REG_G7: Type = 61;
    pub const SPARC_REG_I0: Type = 62;
    pub const SPARC_REG_I1: Type = 63;
    pub const SPARC_REG_I2: Type = 64;
    pub const SPARC_REG_I3: Type = 65;
    pub const SPARC_REG_I4: Type = 66;
    pub const SPARC_REG_I5: Type = 67;
    pub const SPARC_REG_I7: Type = 68;
    pub const SPARC_REG_ICC: Type = 69;
    pub const SPARC_REG_L0: Type = 70;
    pub const SPARC_REG_L1: Type = 71;
    pub const SPARC_REG_L2: Type = 72;
    pub const SPARC_REG_L3: Type = 73;
    pub const SPARC_REG_L4: Type = 74;
    pub const SPARC_REG_L5: Type = 75;
    pub const SPARC_REG_L6: Type = 76;
    pub const SPARC_REG_L7: Type = 77;
    pub const SPARC_REG_O0: Type = 78;
    pub const SPARC_REG_O1: Type = 79;
    pub const SPARC_REG_O2: Type = 80;
    pub const SPARC_REG_O3: Type = 81;
    pub const SPARC_REG_O4: Type = 82;
    pub const SPARC_REG_O5: Type = 83;
    pub const SPARC_REG_O7: Type = 84;
    pub const SPARC_REG_SP: Type = 85;
    pub const SPARC_REG_Y: Type = 86;
    pub const SPARC_REG_XCC: Type = 87;
    pub const SPARC_REG_ENDING: Type = 88;
    pub const SPARC_REG_O6: Type = 85;
    pub const SPARC_REG_I6: Type = 53;
}
pub mod sparc_insn {
    pub type Type = u32;
    pub const SPARC_INS_INVALID: Type = 0;
    pub const SPARC_INS_ADDCC: Type = 1;
    pub const SPARC_INS_ADDX: Type = 2;
    pub const SPARC_INS_ADDXCC: Type = 3;
    pub const SPARC_INS_ADDXC: Type = 4;
    pub const SPARC_INS_ADDXCCC: Type = 5;
    pub const SPARC_INS_ADD: Type = 6;
    pub const SPARC_INS_ALIGNADDR: Type = 7;
    pub const SPARC_INS_ALIGNADDRL: Type = 8;
    pub const SPARC_INS_ANDCC: Type = 9;
    pub const SPARC_INS_ANDNCC: Type = 10;
    pub const SPARC_INS_ANDN: Type = 11;
    pub const SPARC_INS_AND: Type = 12;
    pub const SPARC_INS_ARRAY16: Type = 13;
    pub const SPARC_INS_ARRAY32: Type = 14;
    pub const SPARC_INS_ARRAY8: Type = 15;
    pub const SPARC_INS_B: Type = 16;
    pub const SPARC_INS_JMP: Type = 17;
    pub const SPARC_INS_BMASK: Type = 18;
    pub const SPARC_INS_FB: Type = 19;
    pub const SPARC_INS_BRGEZ: Type = 20;
    pub const SPARC_INS_BRGZ: Type = 21;
    pub const SPARC_INS_BRLEZ: Type = 22;
    pub const SPARC_INS_BRLZ: Type = 23;
    pub const SPARC_INS_BRNZ: Type = 24;
    pub const SPARC_INS_BRZ: Type = 25;
    pub const SPARC_INS_BSHUFFLE: Type = 26;
    pub const SPARC_INS_CALL: Type = 27;
    pub const SPARC_INS_CASX: Type = 28;
    pub const SPARC_INS_CAS: Type = 29;
    pub const SPARC_INS_CMASK16: Type = 30;
    pub const SPARC_INS_CMASK32: Type = 31;
    pub const SPARC_INS_CMASK8: Type = 32;
    pub const SPARC_INS_CMP: Type = 33;
    pub const SPARC_INS_EDGE16: Type = 34;
    pub const SPARC_INS_EDGE16L: Type = 35;
    pub const SPARC_INS_EDGE16LN: Type = 36;
    pub const SPARC_INS_EDGE16N: Type = 37;
    pub const SPARC_INS_EDGE32: Type = 38;
    pub const SPARC_INS_EDGE32L: Type = 39;
    pub const SPARC_INS_EDGE32LN: Type = 40;
    pub const SPARC_INS_EDGE32N: Type = 41;
    pub const SPARC_INS_EDGE8: Type = 42;
    pub const SPARC_INS_EDGE8L: Type = 43;
    pub const SPARC_INS_EDGE8LN: Type = 44;
    pub const SPARC_INS_EDGE8N: Type = 45;
    pub const SPARC_INS_FABSD: Type = 46;
    pub const SPARC_INS_FABSQ: Type = 47;
    pub const SPARC_INS_FABSS: Type = 48;
    pub const SPARC_INS_FADDD: Type = 49;
    pub const SPARC_INS_FADDQ: Type = 50;
    pub const SPARC_INS_FADDS: Type = 51;
    pub const SPARC_INS_FALIGNDATA: Type = 52;
    pub const SPARC_INS_FAND: Type = 53;
    pub const SPARC_INS_FANDNOT1: Type = 54;
    pub const SPARC_INS_FANDNOT1S: Type = 55;
    pub const SPARC_INS_FANDNOT2: Type = 56;
    pub const SPARC_INS_FANDNOT2S: Type = 57;
    pub const SPARC_INS_FANDS: Type = 58;
    pub const SPARC_INS_FCHKSM16: Type = 59;
    pub const SPARC_INS_FCMPD: Type = 60;
    pub const SPARC_INS_FCMPEQ16: Type = 61;
    pub const SPARC_INS_FCMPEQ32: Type = 62;
    pub const SPARC_INS_FCMPGT16: Type = 63;
    pub const SPARC_INS_FCMPGT32: Type = 64;
    pub const SPARC_INS_FCMPLE16: Type = 65;
    pub const SPARC_INS_FCMPLE32: Type = 66;
    pub const SPARC_INS_FCMPNE16: Type = 67;
    pub const SPARC_INS_FCMPNE32: Type = 68;
    pub const SPARC_INS_FCMPQ: Type = 69;
    pub const SPARC_INS_FCMPS: Type = 70;
    pub const SPARC_INS_FDIVD: Type = 71;
    pub const SPARC_INS_FDIVQ: Type = 72;
    pub const SPARC_INS_FDIVS: Type = 73;
    pub const SPARC_INS_FDMULQ: Type = 74;
    pub const SPARC_INS_FDTOI: Type = 75;
    pub const SPARC_INS_FDTOQ: Type = 76;
    pub const SPARC_INS_FDTOS: Type = 77;
    pub const SPARC_INS_FDTOX: Type = 78;
    pub const SPARC_INS_FEXPAND: Type = 79;
    pub const SPARC_INS_FHADDD: Type = 80;
    pub const SPARC_INS_FHADDS: Type = 81;
    pub const SPARC_INS_FHSUBD: Type = 82;
    pub const SPARC_INS_FHSUBS: Type = 83;
    pub const SPARC_INS_FITOD: Type = 84;
    pub const SPARC_INS_FITOQ: Type = 85;
    pub const SPARC_INS_FITOS: Type = 86;
    pub const SPARC_INS_FLCMPD: Type = 87;
    pub const SPARC_INS_FLCMPS: Type = 88;
    pub const SPARC_INS_FLUSHW: Type = 89;
    pub const SPARC_INS_FMEAN16: Type = 90;
    pub const SPARC_INS_FMOVD: Type = 91;
    pub const SPARC_INS_FMOVQ: Type = 92;
    pub const SPARC_INS_FMOVRDGEZ: Type = 93;
    pub const SPARC_INS_FMOVRQGEZ: Type = 94;
    pub const SPARC_INS_FMOVRSGEZ: Type = 95;
    pub const SPARC_INS_FMOVRDGZ: Type = 96;
    pub const SPARC_INS_FMOVRQGZ: Type = 97;
    pub const SPARC_INS_FMOVRSGZ: Type = 98;
    pub const SPARC_INS_FMOVRDLEZ: Type = 99;
    pub const SPARC_INS_FMOVRQLEZ: Type = 100;
    pub const SPARC_INS_FMOVRSLEZ: Type = 101;
    pub const SPARC_INS_FMOVRDLZ: Type = 102;
    pub const SPARC_INS_FMOVRQLZ: Type = 103;
    pub const SPARC_INS_FMOVRSLZ: Type = 104;
    pub const SPARC_INS_FMOVRDNZ: Type = 105;
    pub const SPARC_INS_FMOVRQNZ: Type = 106;
    pub const SPARC_INS_FMOVRSNZ: Type = 107;
    pub const SPARC_INS_FMOVRDZ: Type = 108;
    pub const SPARC_INS_FMOVRQZ: Type = 109;
    pub const SPARC_INS_FMOVRSZ: Type = 110;
    pub const SPARC_INS_FMOVS: Type = 111;
    pub const SPARC_INS_FMUL8SUX16: Type = 112;
    pub const SPARC_INS_FMUL8ULX16: Type = 113;
    pub const SPARC_INS_FMUL8X16: Type = 114;
    pub const SPARC_INS_FMUL8X16AL: Type = 115;
    pub const SPARC_INS_FMUL8X16AU: Type = 116;
    pub const SPARC_INS_FMULD: Type = 117;
    pub const SPARC_INS_FMULD8SUX16: Type = 118;
    pub const SPARC_INS_FMULD8ULX16: Type = 119;
    pub const SPARC_INS_FMULQ: Type = 120;
    pub const SPARC_INS_FMULS: Type = 121;
    pub const SPARC_INS_FNADDD: Type = 122;
    pub const SPARC_INS_FNADDS: Type = 123;
    pub const SPARC_INS_FNAND: Type = 124;
    pub const SPARC_INS_FNANDS: Type = 125;
    pub const SPARC_INS_FNEGD: Type = 126;
    pub const SPARC_INS_FNEGQ: Type = 127;
    pub const SPARC_INS_FNEGS: Type = 128;
    pub const SPARC_INS_FNHADDD: Type = 129;
    pub const SPARC_INS_FNHADDS: Type = 130;
    pub const SPARC_INS_FNOR: Type = 131;
    pub const SPARC_INS_FNORS: Type = 132;
    pub const SPARC_INS_FNOT1: Type = 133;
    pub const SPARC_INS_FNOT1S: Type = 134;
    pub const SPARC_INS_FNOT2: Type = 135;
    pub const SPARC_INS_FNOT2S: Type = 136;
    pub const SPARC_INS_FONE: Type = 137;
    pub const SPARC_INS_FONES: Type = 138;
    pub const SPARC_INS_FOR: Type = 139;
    pub const SPARC_INS_FORNOT1: Type = 140;
    pub const SPARC_INS_FORNOT1S: Type = 141;
    pub const SPARC_INS_FORNOT2: Type = 142;
    pub const SPARC_INS_FORNOT2S: Type = 143;
    pub const SPARC_INS_FORS: Type = 144;
    pub const SPARC_INS_FPACK16: Type = 145;
    pub const SPARC_INS_FPACK32: Type = 146;
    pub const SPARC_INS_FPACKFIX: Type = 147;
    pub const SPARC_INS_FPADD16: Type = 148;
    pub const SPARC_INS_FPADD16S: Type = 149;
    pub const SPARC_INS_FPADD32: Type = 150;
    pub const SPARC_INS_FPADD32S: Type = 151;
    pub const SPARC_INS_FPADD64: Type = 152;
    pub const SPARC_INS_FPMERGE: Type = 153;
    pub const SPARC_INS_FPSUB16: Type = 154;
    pub const SPARC_INS_FPSUB16S: Type = 155;
    pub const SPARC_INS_FPSUB32: Type = 156;
    pub const SPARC_INS_FPSUB32S: Type = 157;
    pub const SPARC_INS_FQTOD: Type = 158;
    pub const SPARC_INS_FQTOI: Type = 159;
    pub const SPARC_INS_FQTOS: Type = 160;
    pub const SPARC_INS_FQTOX: Type = 161;
    pub const SPARC_INS_FSLAS16: Type = 162;
    pub const SPARC_INS_FSLAS32: Type = 163;
    pub const SPARC_INS_FSLL16: Type = 164;
    pub const SPARC_INS_FSLL32: Type = 165;
    pub const SPARC_INS_FSMULD: Type = 166;
    pub const SPARC_INS_FSQRTD: Type = 167;
    pub const SPARC_INS_FSQRTQ: Type = 168;
    pub const SPARC_INS_FSQRTS: Type = 169;
    pub const SPARC_INS_FSRA16: Type = 170;
    pub const SPARC_INS_FSRA32: Type = 171;
    pub const SPARC_INS_FSRC1: Type = 172;
    pub const SPARC_INS_FSRC1S: Type = 173;
    pub const SPARC_INS_FSRC2: Type = 174;
    pub const SPARC_INS_FSRC2S: Type = 175;
    pub const SPARC_INS_FSRL16: Type = 176;
    pub const SPARC_INS_FSRL32: Type = 177;
    pub const SPARC_INS_FSTOD: Type = 178;
    pub const SPARC_INS_FSTOI: Type = 179;
    pub const SPARC_INS_FSTOQ: Type = 180;
    pub const SPARC_INS_FSTOX: Type = 181;
    pub const SPARC_INS_FSUBD: Type = 182;
    pub const SPARC_INS_FSUBQ: Type = 183;
    pub const SPARC_INS_FSUBS: Type = 184;
    pub const SPARC_INS_FXNOR: Type = 185;
    pub const SPARC_INS_FXNORS: Type = 186;
    pub const SPARC_INS_FXOR: Type = 187;
    pub const SPARC_INS_FXORS: Type = 188;
    pub const SPARC_INS_FXTOD: Type = 189;
    pub const SPARC_INS_FXTOQ: Type = 190;
    pub const SPARC_INS_FXTOS: Type = 191;
    pub const SPARC_INS_FZERO: Type = 192;
    pub const SPARC_INS_FZEROS: Type = 193;
    pub const SPARC_INS_JMPL: Type = 194;
    pub const SPARC_INS_LDD: Type = 195;
    pub const SPARC_INS_LD: Type = 196;
    pub const SPARC_INS_LDQ: Type = 197;
    pub const SPARC_INS_LDSB: Type = 198;
    pub const SPARC_INS_LDSH: Type = 199;
    pub const SPARC_INS_LDSW: Type = 200;
    pub const SPARC_INS_LDUB: Type = 201;
    pub const SPARC_INS_LDUH: Type = 202;
    pub const SPARC_INS_LDX: Type = 203;
    pub const SPARC_INS_LZCNT: Type = 204;
    pub const SPARC_INS_MEMBAR: Type = 205;
    pub const SPARC_INS_MOVDTOX: Type = 206;
    pub const SPARC_INS_MOV: Type = 207;
    pub const SPARC_INS_MOVRGEZ: Type = 208;
    pub const SPARC_INS_MOVRGZ: Type = 209;
    pub const SPARC_INS_MOVRLEZ: Type = 210;
    pub const SPARC_INS_MOVRLZ: Type = 211;
    pub const SPARC_INS_MOVRNZ: Type = 212;
    pub const SPARC_INS_MOVRZ: Type = 213;
    pub const SPARC_INS_MOVSTOSW: Type = 214;
    pub const SPARC_INS_MOVSTOUW: Type = 215;
    pub const SPARC_INS_MULX: Type = 216;
    pub const SPARC_INS_NOP: Type = 217;
    pub const SPARC_INS_ORCC: Type = 218;
    pub const SPARC_INS_ORNCC: Type = 219;
    pub const SPARC_INS_ORN: Type = 220;
    pub const SPARC_INS_OR: Type = 221;
    pub const SPARC_INS_PDIST: Type = 222;
    pub const SPARC_INS_PDISTN: Type = 223;
    pub const SPARC_INS_POPC: Type = 224;
    pub const SPARC_INS_RD: Type = 225;
    pub const SPARC_INS_RESTORE: Type = 226;
    pub const SPARC_INS_RETT: Type = 227;
    pub const SPARC_INS_SAVE: Type = 228;
    pub const SPARC_INS_SDIVCC: Type = 229;
    pub const SPARC_INS_SDIVX: Type = 230;
    pub const SPARC_INS_SDIV: Type = 231;
    pub const SPARC_INS_SETHI: Type = 232;
    pub const SPARC_INS_SHUTDOWN: Type = 233;
    pub const SPARC_INS_SIAM: Type = 234;
    pub const SPARC_INS_SLLX: Type = 235;
    pub const SPARC_INS_SLL: Type = 236;
    pub const SPARC_INS_SMULCC: Type = 237;
    pub const SPARC_INS_SMUL: Type = 238;
    pub const SPARC_INS_SRAX: Type = 239;
    pub const SPARC_INS_SRA: Type = 240;
    pub const SPARC_INS_SRLX: Type = 241;
    pub const SPARC_INS_SRL: Type = 242;
    pub const SPARC_INS_STBAR: Type = 243;
    pub const SPARC_INS_STB: Type = 244;
    pub const SPARC_INS_STD: Type = 245;
    pub const SPARC_INS_ST: Type = 246;
    pub const SPARC_INS_STH: Type = 247;
    pub const SPARC_INS_STQ: Type = 248;
    pub const SPARC_INS_STX: Type = 249;
    pub const SPARC_INS_SUBCC: Type = 250;
    pub const SPARC_INS_SUBX: Type = 251;
    pub const SPARC_INS_SUBXCC: Type = 252;
    pub const SPARC_INS_SUB: Type = 253;
    pub const SPARC_INS_SWAP: Type = 254;
    pub const SPARC_INS_TADDCCTV: Type = 255;
    pub const SPARC_INS_TADDCC: Type = 256;
    pub const SPARC_INS_T: Type = 257;
    pub const SPARC_INS_TSUBCCTV: Type = 258;
    pub const SPARC_INS_TSUBCC: Type = 259;
    pub const SPARC_INS_UDIVCC: Type = 260;
    pub const SPARC_INS_UDIVX: Type = 261;
    pub const SPARC_INS_UDIV: Type = 262;
    pub const SPARC_INS_UMULCC: Type = 263;
    pub const SPARC_INS_UMULXHI: Type = 264;
    pub const SPARC_INS_UMUL: Type = 265;
    pub const SPARC_INS_UNIMP: Type = 266;
    pub const SPARC_INS_FCMPED: Type = 267;
    pub const SPARC_INS_FCMPEQ: Type = 268;
    pub const SPARC_INS_FCMPES: Type = 269;
    pub const SPARC_INS_WR: Type = 270;
    pub const SPARC_INS_XMULX: Type = 271;
    pub const SPARC_INS_XMULXHI: Type = 272;
    pub const SPARC_INS_XNORCC: Type = 273;
    pub const SPARC_INS_XNOR: Type = 274;
    pub const SPARC_INS_XORCC: Type = 275;
    pub const SPARC_INS_XOR: Type = 276;
    pub const SPARC_INS_RET: Type = 277;
    pub const SPARC_INS_RETL: Type = 278;
    pub const SPARC_INS_ENDING: Type = 279;
}
pub mod sparc_insn_group {
    pub type Type = u32;
    pub const SPARC_GRP_INVALID: Type = 0;
    pub const SPARC_GRP_JUMP: Type = 1;
    pub const SPARC_GRP_HARDQUAD: Type = 128;
    pub const SPARC_GRP_V9: Type = 129;
    pub const SPARC_GRP_VIS: Type = 130;
    pub const SPARC_GRP_VIS2: Type = 131;
    pub const SPARC_GRP_VIS3: Type = 132;
    pub const SPARC_GRP_32BIT: Type = 133;
    pub const SPARC_GRP_64BIT: Type = 134;
    pub const SPARC_GRP_ENDING: Type = 135;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum sysz_cc {
    SYSZ_CC_INVALID = 0,
    SYSZ_CC_O = 1,
    SYSZ_CC_H = 2,
    SYSZ_CC_NLE = 3,
    SYSZ_CC_L = 4,
    SYSZ_CC_NHE = 5,
    SYSZ_CC_LH = 6,
    SYSZ_CC_NE = 7,
    SYSZ_CC_E = 8,
    SYSZ_CC_NLH = 9,
    SYSZ_CC_HE = 10,
    SYSZ_CC_NL = 11,
    SYSZ_CC_LE = 12,
    SYSZ_CC_NH = 13,
    SYSZ_CC_NO = 14,
}
pub mod sysz_op_type {
    pub type Type = u32;
    pub const SYSZ_OP_INVALID: Type = 0;
    pub const SYSZ_OP_REG: Type = 1;
    pub const SYSZ_OP_IMM: Type = 2;
    pub const SYSZ_OP_MEM: Type = 3;
    pub const SYSZ_OP_ACREG: Type = 64;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sysz_op_mem {
    pub base: u8,
    pub index: u8,
    pub length: u64,
    pub disp: i64,
}
impl Clone for sysz_op_mem {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct cs_sysz_op {
    pub type_: sysz_op_type::Type,
    pub __bindgen_anon_1: cs_sysz_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy)]
pub union cs_sysz_op__bindgen_ty_1 {
    pub reg: ::std::os::raw::c_uint,
    pub imm: i64,
    pub mem: sysz_op_mem,
    _bindgen_union_align: [u64; 3usize],
}
impl Clone for cs_sysz_op__bindgen_ty_1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::fmt::Debug for cs_sysz_op__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "cs_sysz_op__bindgen_ty_1 {{ union }}")
    }
}
impl Clone for cs_sysz_op {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::fmt::Debug for cs_sysz_op {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "cs_sysz_op {{ type: {:?}, __bindgen_anon_1: {:?} }}",
            self.type_, self.__bindgen_anon_1
        )
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct cs_sysz {
    pub cc: sysz_cc,
    pub op_count: u8,
    pub operands: [cs_sysz_op; 6usize],
}
impl Clone for cs_sysz {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::fmt::Debug for cs_sysz {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "cs_sysz {{ cc: {:?}, op_count: {:?}, operands: {:?} }}",
            self.cc, self.op_count, self.operands
        )
    }
}
pub mod sysz_reg {
    pub type Type = u32;
    pub const SYSZ_REG_INVALID: Type = 0;
    pub const SYSZ_REG_0: Type = 1;
    pub const SYSZ_REG_1: Type = 2;
    pub const SYSZ_REG_2: Type = 3;
    pub const SYSZ_REG_3: Type = 4;
    pub const SYSZ_REG_4: Type = 5;
    pub const SYSZ_REG_5: Type = 6;
    pub const SYSZ_REG_6: Type = 7;
    pub const SYSZ_REG_7: Type = 8;
    pub const SYSZ_REG_8: Type = 9;
    pub const SYSZ_REG_9: Type = 10;
    pub const SYSZ_REG_10: Type = 11;
    pub const SYSZ_REG_11: Type = 12;
    pub const SYSZ_REG_12: Type = 13;
    pub const SYSZ_REG_13: Type = 14;
    pub const SYSZ_REG_14: Type = 15;
    pub const SYSZ_REG_15: Type = 16;
    pub const SYSZ_REG_CC: Type = 17;
    pub const SYSZ_REG_F0: Type = 18;
    pub const SYSZ_REG_F1: Type = 19;
    pub const SYSZ_REG_F2: Type = 20;
    pub const SYSZ_REG_F3: Type = 21;
    pub const SYSZ_REG_F4: Type = 22;
    pub const SYSZ_REG_F5: Type = 23;
    pub const SYSZ_REG_F6: Type = 24;
    pub const SYSZ_REG_F7: Type = 25;
    pub const SYSZ_REG_F8: Type = 26;
    pub const SYSZ_REG_F9: Type = 27;
    pub const SYSZ_REG_F10: Type = 28;
    pub const SYSZ_REG_F11: Type = 29;
    pub const SYSZ_REG_F12: Type = 30;
    pub const SYSZ_REG_F13: Type = 31;
    pub const SYSZ_REG_F14: Type = 32;
    pub const SYSZ_REG_F15: Type = 33;
    pub const SYSZ_REG_R0L: Type = 34;
    pub const SYSZ_REG_ENDING: Type = 35;
}
pub mod sysz_insn {
    pub type Type = u32;
    pub const SYSZ_INS_INVALID: Type = 0;
    pub const SYSZ_INS_A: Type = 1;
    pub const SYSZ_INS_ADB: Type = 2;
    pub const SYSZ_INS_ADBR: Type = 3;
    pub const SYSZ_INS_AEB: Type = 4;
    pub const SYSZ_INS_AEBR: Type = 5;
    pub const SYSZ_INS_AFI: Type = 6;
    pub const SYSZ_INS_AG: Type = 7;
    pub const SYSZ_INS_AGF: Type = 8;
    pub const SYSZ_INS_AGFI: Type = 9;
    pub const SYSZ_INS_AGFR: Type = 10;
    pub const SYSZ_INS_AGHI: Type = 11;
    pub const SYSZ_INS_AGHIK: Type = 12;
    pub const SYSZ_INS_AGR: Type = 13;
    pub const SYSZ_INS_AGRK: Type = 14;
    pub const SYSZ_INS_AGSI: Type = 15;
    pub const SYSZ_INS_AH: Type = 16;
    pub const SYSZ_INS_AHI: Type = 17;
    pub const SYSZ_INS_AHIK: Type = 18;
    pub const SYSZ_INS_AHY: Type = 19;
    pub const SYSZ_INS_AIH: Type = 20;
    pub const SYSZ_INS_AL: Type = 21;
    pub const SYSZ_INS_ALC: Type = 22;
    pub const SYSZ_INS_ALCG: Type = 23;
    pub const SYSZ_INS_ALCGR: Type = 24;
    pub const SYSZ_INS_ALCR: Type = 25;
    pub const SYSZ_INS_ALFI: Type = 26;
    pub const SYSZ_INS_ALG: Type = 27;
    pub const SYSZ_INS_ALGF: Type = 28;
    pub const SYSZ_INS_ALGFI: Type = 29;
    pub const SYSZ_INS_ALGFR: Type = 30;
    pub const SYSZ_INS_ALGHSIK: Type = 31;
    pub const SYSZ_INS_ALGR: Type = 32;
    pub const SYSZ_INS_ALGRK: Type = 33;
    pub const SYSZ_INS_ALHSIK: Type = 34;
    pub const SYSZ_INS_ALR: Type = 35;
    pub const SYSZ_INS_ALRK: Type = 36;
    pub const SYSZ_INS_ALY: Type = 37;
    pub const SYSZ_INS_AR: Type = 38;
    pub const SYSZ_INS_ARK: Type = 39;
    pub const SYSZ_INS_ASI: Type = 40;
    pub const SYSZ_INS_AXBR: Type = 41;
    pub const SYSZ_INS_AY: Type = 42;
    pub const SYSZ_INS_BCR: Type = 43;
    pub const SYSZ_INS_BRC: Type = 44;
    pub const SYSZ_INS_BRCL: Type = 45;
    pub const SYSZ_INS_CGIJ: Type = 46;
    pub const SYSZ_INS_CGRJ: Type = 47;
    pub const SYSZ_INS_CIJ: Type = 48;
    pub const SYSZ_INS_CLGIJ: Type = 49;
    pub const SYSZ_INS_CLGRJ: Type = 50;
    pub const SYSZ_INS_CLIJ: Type = 51;
    pub const SYSZ_INS_CLRJ: Type = 52;
    pub const SYSZ_INS_CRJ: Type = 53;
    pub const SYSZ_INS_BER: Type = 54;
    pub const SYSZ_INS_JE: Type = 55;
    pub const SYSZ_INS_JGE: Type = 56;
    pub const SYSZ_INS_LOCE: Type = 57;
    pub const SYSZ_INS_LOCGE: Type = 58;
    pub const SYSZ_INS_LOCGRE: Type = 59;
    pub const SYSZ_INS_LOCRE: Type = 60;
    pub const SYSZ_INS_STOCE: Type = 61;
    pub const SYSZ_INS_STOCGE: Type = 62;
    pub const SYSZ_INS_BHR: Type = 63;
    pub const SYSZ_INS_BHER: Type = 64;
    pub const SYSZ_INS_JHE: Type = 65;
    pub const SYSZ_INS_JGHE: Type = 66;
    pub const SYSZ_INS_LOCHE: Type = 67;
    pub const SYSZ_INS_LOCGHE: Type = 68;
    pub const SYSZ_INS_LOCGRHE: Type = 69;
    pub const SYSZ_INS_LOCRHE: Type = 70;
    pub const SYSZ_INS_STOCHE: Type = 71;
    pub const SYSZ_INS_STOCGHE: Type = 72;
    pub const SYSZ_INS_JH: Type = 73;
    pub const SYSZ_INS_JGH: Type = 74;
    pub const SYSZ_INS_LOCH: Type = 75;
    pub const SYSZ_INS_LOCGH: Type = 76;
    pub const SYSZ_INS_LOCGRH: Type = 77;
    pub const SYSZ_INS_LOCRH: Type = 78;
    pub const SYSZ_INS_STOCH: Type = 79;
    pub const SYSZ_INS_STOCGH: Type = 80;
    pub const SYSZ_INS_CGIJNLH: Type = 81;
    pub const SYSZ_INS_CGRJNLH: Type = 82;
    pub const SYSZ_INS_CIJNLH: Type = 83;
    pub const SYSZ_INS_CLGIJNLH: Type = 84;
    pub const SYSZ_INS_CLGRJNLH: Type = 85;
    pub const SYSZ_INS_CLIJNLH: Type = 86;
    pub const SYSZ_INS_CLRJNLH: Type = 87;
    pub const SYSZ_INS_CRJNLH: Type = 88;
    pub const SYSZ_INS_CGIJE: Type = 89;
    pub const SYSZ_INS_CGRJE: Type = 90;
    pub const SYSZ_INS_CIJE: Type = 91;
    pub const SYSZ_INS_CLGIJE: Type = 92;
    pub const SYSZ_INS_CLGRJE: Type = 93;
    pub const SYSZ_INS_CLIJE: Type = 94;
    pub const SYSZ_INS_CLRJE: Type = 95;
    pub const SYSZ_INS_CRJE: Type = 96;
    pub const SYSZ_INS_CGIJNLE: Type = 97;
    pub const SYSZ_INS_CGRJNLE: Type = 98;
    pub const SYSZ_INS_CIJNLE: Type = 99;
    pub const SYSZ_INS_CLGIJNLE: Type = 100;
    pub const SYSZ_INS_CLGRJNLE: Type = 101;
    pub const SYSZ_INS_CLIJNLE: Type = 102;
    pub const SYSZ_INS_CLRJNLE: Type = 103;
    pub const SYSZ_INS_CRJNLE: Type = 104;
    pub const SYSZ_INS_CGIJH: Type = 105;
    pub const SYSZ_INS_CGRJH: Type = 106;
    pub const SYSZ_INS_CIJH: Type = 107;
    pub const SYSZ_INS_CLGIJH: Type = 108;
    pub const SYSZ_INS_CLGRJH: Type = 109;
    pub const SYSZ_INS_CLIJH: Type = 110;
    pub const SYSZ_INS_CLRJH: Type = 111;
    pub const SYSZ_INS_CRJH: Type = 112;
    pub const SYSZ_INS_CGIJNL: Type = 113;
    pub const SYSZ_INS_CGRJNL: Type = 114;
    pub const SYSZ_INS_CIJNL: Type = 115;
    pub const SYSZ_INS_CLGIJNL: Type = 116;
    pub const SYSZ_INS_CLGRJNL: Type = 117;
    pub const SYSZ_INS_CLIJNL: Type = 118;
    pub const SYSZ_INS_CLRJNL: Type = 119;
    pub const SYSZ_INS_CRJNL: Type = 120;
    pub const SYSZ_INS_CGIJHE: Type = 121;
    pub const SYSZ_INS_CGRJHE: Type = 122;
    pub const SYSZ_INS_CIJHE: Type = 123;
    pub const SYSZ_INS_CLGIJHE: Type = 124;
    pub const SYSZ_INS_CLGRJHE: Type = 125;
    pub const SYSZ_INS_CLIJHE: Type = 126;
    pub const SYSZ_INS_CLRJHE: Type = 127;
    pub const SYSZ_INS_CRJHE: Type = 128;
    pub const SYSZ_INS_CGIJNHE: Type = 129;
    pub const SYSZ_INS_CGRJNHE: Type = 130;
    pub const SYSZ_INS_CIJNHE: Type = 131;
    pub const SYSZ_INS_CLGIJNHE: Type = 132;
    pub const SYSZ_INS_CLGRJNHE: Type = 133;
    pub const SYSZ_INS_CLIJNHE: Type = 134;
    pub const SYSZ_INS_CLRJNHE: Type = 135;
    pub const SYSZ_INS_CRJNHE: Type = 136;
    pub const SYSZ_INS_CGIJL: Type = 137;
    pub const SYSZ_INS_CGRJL: Type = 138;
    pub const SYSZ_INS_CIJL: Type = 139;
    pub const SYSZ_INS_CLGIJL: Type = 140;
    pub const SYSZ_INS_CLGRJL: Type = 141;
    pub const SYSZ_INS_CLIJL: Type = 142;
    pub const SYSZ_INS_CLRJL: Type = 143;
    pub const SYSZ_INS_CRJL: Type = 144;
    pub const SYSZ_INS_CGIJNH: Type = 145;
    pub const SYSZ_INS_CGRJNH: Type = 146;
    pub const SYSZ_INS_CIJNH: Type = 147;
    pub const SYSZ_INS_CLGIJNH: Type = 148;
    pub const SYSZ_INS_CLGRJNH: Type = 149;
    pub const SYSZ_INS_CLIJNH: Type = 150;
    pub const SYSZ_INS_CLRJNH: Type = 151;
    pub const SYSZ_INS_CRJNH: Type = 152;
    pub const SYSZ_INS_CGIJLE: Type = 153;
    pub const SYSZ_INS_CGRJLE: Type = 154;
    pub const SYSZ_INS_CIJLE: Type = 155;
    pub const SYSZ_INS_CLGIJLE: Type = 156;
    pub const SYSZ_INS_CLGRJLE: Type = 157;
    pub const SYSZ_INS_CLIJLE: Type = 158;
    pub const SYSZ_INS_CLRJLE: Type = 159;
    pub const SYSZ_INS_CRJLE: Type = 160;
    pub const SYSZ_INS_CGIJNE: Type = 161;
    pub const SYSZ_INS_CGRJNE: Type = 162;
    pub const SYSZ_INS_CIJNE: Type = 163;
    pub const SYSZ_INS_CLGIJNE: Type = 164;
    pub const SYSZ_INS_CLGRJNE: Type = 165;
    pub const SYSZ_INS_CLIJNE: Type = 166;
    pub const SYSZ_INS_CLRJNE: Type = 167;
    pub const SYSZ_INS_CRJNE: Type = 168;
    pub const SYSZ_INS_CGIJLH: Type = 169;
    pub const SYSZ_INS_CGRJLH: Type = 170;
    pub const SYSZ_INS_CIJLH: Type = 171;
    pub const SYSZ_INS_CLGIJLH: Type = 172;
    pub const SYSZ_INS_CLGRJLH: Type = 173;
    pub const SYSZ_INS_CLIJLH: Type = 174;
    pub const SYSZ_INS_CLRJLH: Type = 175;
    pub const SYSZ_INS_CRJLH: Type = 176;
    pub const SYSZ_INS_BLR: Type = 177;
    pub const SYSZ_INS_BLER: Type = 178;
    pub const SYSZ_INS_JLE: Type = 179;
    pub const SYSZ_INS_JGLE: Type = 180;
    pub const SYSZ_INS_LOCLE: Type = 181;
    pub const SYSZ_INS_LOCGLE: Type = 182;
    pub const SYSZ_INS_LOCGRLE: Type = 183;
    pub const SYSZ_INS_LOCRLE: Type = 184;
    pub const SYSZ_INS_STOCLE: Type = 185;
    pub const SYSZ_INS_STOCGLE: Type = 186;
    pub const SYSZ_INS_BLHR: Type = 187;
    pub const SYSZ_INS_JLH: Type = 188;
    pub const SYSZ_INS_JGLH: Type = 189;
    pub const SYSZ_INS_LOCLH: Type = 190;
    pub const SYSZ_INS_LOCGLH: Type = 191;
    pub const SYSZ_INS_LOCGRLH: Type = 192;
    pub const SYSZ_INS_LOCRLH: Type = 193;
    pub const SYSZ_INS_STOCLH: Type = 194;
    pub const SYSZ_INS_STOCGLH: Type = 195;
    pub const SYSZ_INS_JL: Type = 196;
    pub const SYSZ_INS_JGL: Type = 197;
    pub const SYSZ_INS_LOCL: Type = 198;
    pub const SYSZ_INS_LOCGL: Type = 199;
    pub const SYSZ_INS_LOCGRL: Type = 200;
    pub const SYSZ_INS_LOCRL: Type = 201;
    pub const SYSZ_INS_LOC: Type = 202;
    pub const SYSZ_INS_LOCG: Type = 203;
    pub const SYSZ_INS_LOCGR: Type = 204;
    pub const SYSZ_INS_LOCR: Type = 205;
    pub const SYSZ_INS_STOCL: Type = 206;
    pub const SYSZ_INS_STOCGL: Type = 207;
    pub const SYSZ_INS_BNER: Type = 208;
    pub const SYSZ_INS_JNE: Type = 209;
    pub const SYSZ_INS_JGNE: Type = 210;
    pub const SYSZ_INS_LOCNE: Type = 211;
    pub const SYSZ_INS_LOCGNE: Type = 212;
    pub const SYSZ_INS_LOCGRNE: Type = 213;
    pub const SYSZ_INS_LOCRNE: Type = 214;
    pub const SYSZ_INS_STOCNE: Type = 215;
    pub const SYSZ_INS_STOCGNE: Type = 216;
    pub const SYSZ_INS_BNHR: Type = 217;
    pub const SYSZ_INS_BNHER: Type = 218;
    pub const SYSZ_INS_JNHE: Type = 219;
    pub const SYSZ_INS_JGNHE: Type = 220;
    pub const SYSZ_INS_LOCNHE: Type = 221;
    pub const SYSZ_INS_LOCGNHE: Type = 222;
    pub const SYSZ_INS_LOCGRNHE: Type = 223;
    pub const SYSZ_INS_LOCRNHE: Type = 224;
    pub const SYSZ_INS_STOCNHE: Type = 225;
    pub const SYSZ_INS_STOCGNHE: Type = 226;
    pub const SYSZ_INS_JNH: Type = 227;
    pub const SYSZ_INS_JGNH: Type = 228;
    pub const SYSZ_INS_LOCNH: Type = 229;
    pub const SYSZ_INS_LOCGNH: Type = 230;
    pub const SYSZ_INS_LOCGRNH: Type = 231;
    pub const SYSZ_INS_LOCRNH: Type = 232;
    pub const SYSZ_INS_STOCNH: Type = 233;
    pub const SYSZ_INS_STOCGNH: Type = 234;
    pub const SYSZ_INS_BNLR: Type = 235;
    pub const SYSZ_INS_BNLER: Type = 236;
    pub const SYSZ_INS_JNLE: Type = 237;
    pub const SYSZ_INS_JGNLE: Type = 238;
    pub const SYSZ_INS_LOCNLE: Type = 239;
    pub const SYSZ_INS_LOCGNLE: Type = 240;
    pub const SYSZ_INS_LOCGRNLE: Type = 241;
    pub const SYSZ_INS_LOCRNLE: Type = 242;
    pub const SYSZ_INS_STOCNLE: Type = 243;
    pub const SYSZ_INS_STOCGNLE: Type = 244;
    pub const SYSZ_INS_BNLHR: Type = 245;
    pub const SYSZ_INS_JNLH: Type = 246;
    pub const SYSZ_INS_JGNLH: Type = 247;
    pub const SYSZ_INS_LOCNLH: Type = 248;
    pub const SYSZ_INS_LOCGNLH: Type = 249;
    pub const SYSZ_INS_LOCGRNLH: Type = 250;
    pub const SYSZ_INS_LOCRNLH: Type = 251;
    pub const SYSZ_INS_STOCNLH: Type = 252;
    pub const SYSZ_INS_STOCGNLH: Type = 253;
    pub const SYSZ_INS_JNL: Type = 254;
    pub const SYSZ_INS_JGNL: Type = 255;
    pub const SYSZ_INS_LOCNL: Type = 256;
    pub const SYSZ_INS_LOCGNL: Type = 257;
    pub const SYSZ_INS_LOCGRNL: Type = 258;
    pub const SYSZ_INS_LOCRNL: Type = 259;
    pub const SYSZ_INS_STOCNL: Type = 260;
    pub const SYSZ_INS_STOCGNL: Type = 261;
    pub const SYSZ_INS_BNOR: Type = 262;
    pub const SYSZ_INS_JNO: Type = 263;
    pub const SYSZ_INS_JGNO: Type = 264;
    pub const SYSZ_INS_LOCNO: Type = 265;
    pub const SYSZ_INS_LOCGNO: Type = 266;
    pub const SYSZ_INS_LOCGRNO: Type = 267;
    pub const SYSZ_INS_LOCRNO: Type = 268;
    pub const SYSZ_INS_STOCNO: Type = 269;
    pub const SYSZ_INS_STOCGNO: Type = 270;
    pub const SYSZ_INS_BOR: Type = 271;
    pub const SYSZ_INS_JO: Type = 272;
    pub const SYSZ_INS_JGO: Type = 273;
    pub const SYSZ_INS_LOCO: Type = 274;
    pub const SYSZ_INS_LOCGO: Type = 275;
    pub const SYSZ_INS_LOCGRO: Type = 276;
    pub const SYSZ_INS_LOCRO: Type = 277;
    pub const SYSZ_INS_STOCO: Type = 278;
    pub const SYSZ_INS_STOCGO: Type = 279;
    pub const SYSZ_INS_STOC: Type = 280;
    pub const SYSZ_INS_STOCG: Type = 281;
    pub const SYSZ_INS_BASR: Type = 282;
    pub const SYSZ_INS_BR: Type = 283;
    pub const SYSZ_INS_BRAS: Type = 284;
    pub const SYSZ_INS_BRASL: Type = 285;
    pub const SYSZ_INS_J: Type = 286;
    pub const SYSZ_INS_JG: Type = 287;
    pub const SYSZ_INS_BRCT: Type = 288;
    pub const SYSZ_INS_BRCTG: Type = 289;
    pub const SYSZ_INS_C: Type = 290;
    pub const SYSZ_INS_CDB: Type = 291;
    pub const SYSZ_INS_CDBR: Type = 292;
    pub const SYSZ_INS_CDFBR: Type = 293;
    pub const SYSZ_INS_CDGBR: Type = 294;
    pub const SYSZ_INS_CDLFBR: Type = 295;
    pub const SYSZ_INS_CDLGBR: Type = 296;
    pub const SYSZ_INS_CEB: Type = 297;
    pub const SYSZ_INS_CEBR: Type = 298;
    pub const SYSZ_INS_CEFBR: Type = 299;
    pub const SYSZ_INS_CEGBR: Type = 300;
    pub const SYSZ_INS_CELFBR: Type = 301;
    pub const SYSZ_INS_CELGBR: Type = 302;
    pub const SYSZ_INS_CFDBR: Type = 303;
    pub const SYSZ_INS_CFEBR: Type = 304;
    pub const SYSZ_INS_CFI: Type = 305;
    pub const SYSZ_INS_CFXBR: Type = 306;
    pub const SYSZ_INS_CG: Type = 307;
    pub const SYSZ_INS_CGDBR: Type = 308;
    pub const SYSZ_INS_CGEBR: Type = 309;
    pub const SYSZ_INS_CGF: Type = 310;
    pub const SYSZ_INS_CGFI: Type = 311;
    pub const SYSZ_INS_CGFR: Type = 312;
    pub const SYSZ_INS_CGFRL: Type = 313;
    pub const SYSZ_INS_CGH: Type = 314;
    pub const SYSZ_INS_CGHI: Type = 315;
    pub const SYSZ_INS_CGHRL: Type = 316;
    pub const SYSZ_INS_CGHSI: Type = 317;
    pub const SYSZ_INS_CGR: Type = 318;
    pub const SYSZ_INS_CGRL: Type = 319;
    pub const SYSZ_INS_CGXBR: Type = 320;
    pub const SYSZ_INS_CH: Type = 321;
    pub const SYSZ_INS_CHF: Type = 322;
    pub const SYSZ_INS_CHHSI: Type = 323;
    pub const SYSZ_INS_CHI: Type = 324;
    pub const SYSZ_INS_CHRL: Type = 325;
    pub const SYSZ_INS_CHSI: Type = 326;
    pub const SYSZ_INS_CHY: Type = 327;
    pub const SYSZ_INS_CIH: Type = 328;
    pub const SYSZ_INS_CL: Type = 329;
    pub const SYSZ_INS_CLC: Type = 330;
    pub const SYSZ_INS_CLFDBR: Type = 331;
    pub const SYSZ_INS_CLFEBR: Type = 332;
    pub const SYSZ_INS_CLFHSI: Type = 333;
    pub const SYSZ_INS_CLFI: Type = 334;
    pub const SYSZ_INS_CLFXBR: Type = 335;
    pub const SYSZ_INS_CLG: Type = 336;
    pub const SYSZ_INS_CLGDBR: Type = 337;
    pub const SYSZ_INS_CLGEBR: Type = 338;
    pub const SYSZ_INS_CLGF: Type = 339;
    pub const SYSZ_INS_CLGFI: Type = 340;
    pub const SYSZ_INS_CLGFR: Type = 341;
    pub const SYSZ_INS_CLGFRL: Type = 342;
    pub const SYSZ_INS_CLGHRL: Type = 343;
    pub const SYSZ_INS_CLGHSI: Type = 344;
    pub const SYSZ_INS_CLGR: Type = 345;
    pub const SYSZ_INS_CLGRL: Type = 346;
    pub const SYSZ_INS_CLGXBR: Type = 347;
    pub const SYSZ_INS_CLHF: Type = 348;
    pub const SYSZ_INS_CLHHSI: Type = 349;
    pub const SYSZ_INS_CLHRL: Type = 350;
    pub const SYSZ_INS_CLI: Type = 351;
    pub const SYSZ_INS_CLIH: Type = 352;
    pub const SYSZ_INS_CLIY: Type = 353;
    pub const SYSZ_INS_CLR: Type = 354;
    pub const SYSZ_INS_CLRL: Type = 355;
    pub const SYSZ_INS_CLST: Type = 356;
    pub const SYSZ_INS_CLY: Type = 357;
    pub const SYSZ_INS_CPSDR: Type = 358;
    pub const SYSZ_INS_CR: Type = 359;
    pub const SYSZ_INS_CRL: Type = 360;
    pub const SYSZ_INS_CS: Type = 361;
    pub const SYSZ_INS_CSG: Type = 362;
    pub const SYSZ_INS_CSY: Type = 363;
    pub const SYSZ_INS_CXBR: Type = 364;
    pub const SYSZ_INS_CXFBR: Type = 365;
    pub const SYSZ_INS_CXGBR: Type = 366;
    pub const SYSZ_INS_CXLFBR: Type = 367;
    pub const SYSZ_INS_CXLGBR: Type = 368;
    pub const SYSZ_INS_CY: Type = 369;
    pub const SYSZ_INS_DDB: Type = 370;
    pub const SYSZ_INS_DDBR: Type = 371;
    pub const SYSZ_INS_DEB: Type = 372;
    pub const SYSZ_INS_DEBR: Type = 373;
    pub const SYSZ_INS_DL: Type = 374;
    pub const SYSZ_INS_DLG: Type = 375;
    pub const SYSZ_INS_DLGR: Type = 376;
    pub const SYSZ_INS_DLR: Type = 377;
    pub const SYSZ_INS_DSG: Type = 378;
    pub const SYSZ_INS_DSGF: Type = 379;
    pub const SYSZ_INS_DSGFR: Type = 380;
    pub const SYSZ_INS_DSGR: Type = 381;
    pub const SYSZ_INS_DXBR: Type = 382;
    pub const SYSZ_INS_EAR: Type = 383;
    pub const SYSZ_INS_FIDBR: Type = 384;
    pub const SYSZ_INS_FIDBRA: Type = 385;
    pub const SYSZ_INS_FIEBR: Type = 386;
    pub const SYSZ_INS_FIEBRA: Type = 387;
    pub const SYSZ_INS_FIXBR: Type = 388;
    pub const SYSZ_INS_FIXBRA: Type = 389;
    pub const SYSZ_INS_FLOGR: Type = 390;
    pub const SYSZ_INS_IC: Type = 391;
    pub const SYSZ_INS_ICY: Type = 392;
    pub const SYSZ_INS_IIHF: Type = 393;
    pub const SYSZ_INS_IIHH: Type = 394;
    pub const SYSZ_INS_IIHL: Type = 395;
    pub const SYSZ_INS_IILF: Type = 396;
    pub const SYSZ_INS_IILH: Type = 397;
    pub const SYSZ_INS_IILL: Type = 398;
    pub const SYSZ_INS_IPM: Type = 399;
    pub const SYSZ_INS_L: Type = 400;
    pub const SYSZ_INS_LA: Type = 401;
    pub const SYSZ_INS_LAA: Type = 402;
    pub const SYSZ_INS_LAAG: Type = 403;
    pub const SYSZ_INS_LAAL: Type = 404;
    pub const SYSZ_INS_LAALG: Type = 405;
    pub const SYSZ_INS_LAN: Type = 406;
    pub const SYSZ_INS_LANG: Type = 407;
    pub const SYSZ_INS_LAO: Type = 408;
    pub const SYSZ_INS_LAOG: Type = 409;
    pub const SYSZ_INS_LARL: Type = 410;
    pub const SYSZ_INS_LAX: Type = 411;
    pub const SYSZ_INS_LAXG: Type = 412;
    pub const SYSZ_INS_LAY: Type = 413;
    pub const SYSZ_INS_LB: Type = 414;
    pub const SYSZ_INS_LBH: Type = 415;
    pub const SYSZ_INS_LBR: Type = 416;
    pub const SYSZ_INS_LCDBR: Type = 417;
    pub const SYSZ_INS_LCEBR: Type = 418;
    pub const SYSZ_INS_LCGFR: Type = 419;
    pub const SYSZ_INS_LCGR: Type = 420;
    pub const SYSZ_INS_LCR: Type = 421;
    pub const SYSZ_INS_LCXBR: Type = 422;
    pub const SYSZ_INS_LD: Type = 423;
    pub const SYSZ_INS_LDEB: Type = 424;
    pub const SYSZ_INS_LDEBR: Type = 425;
    pub const SYSZ_INS_LDGR: Type = 426;
    pub const SYSZ_INS_LDR: Type = 427;
    pub const SYSZ_INS_LDXBR: Type = 428;
    pub const SYSZ_INS_LDXBRA: Type = 429;
    pub const SYSZ_INS_LDY: Type = 430;
    pub const SYSZ_INS_LE: Type = 431;
    pub const SYSZ_INS_LEDBR: Type = 432;
    pub const SYSZ_INS_LEDBRA: Type = 433;
    pub const SYSZ_INS_LER: Type = 434;
    pub const SYSZ_INS_LEXBR: Type = 435;
    pub const SYSZ_INS_LEXBRA: Type = 436;
    pub const SYSZ_INS_LEY: Type = 437;
    pub const SYSZ_INS_LFH: Type = 438;
    pub const SYSZ_INS_LG: Type = 439;
    pub const SYSZ_INS_LGB: Type = 440;
    pub const SYSZ_INS_LGBR: Type = 441;
    pub const SYSZ_INS_LGDR: Type = 442;
    pub const SYSZ_INS_LGF: Type = 443;
    pub const SYSZ_INS_LGFI: Type = 444;
    pub const SYSZ_INS_LGFR: Type = 445;
    pub const SYSZ_INS_LGFRL: Type = 446;
    pub const SYSZ_INS_LGH: Type = 447;
    pub const SYSZ_INS_LGHI: Type = 448;
    pub const SYSZ_INS_LGHR: Type = 449;
    pub const SYSZ_INS_LGHRL: Type = 450;
    pub const SYSZ_INS_LGR: Type = 451;
    pub const SYSZ_INS_LGRL: Type = 452;
    pub const SYSZ_INS_LH: Type = 453;
    pub const SYSZ_INS_LHH: Type = 454;
    pub const SYSZ_INS_LHI: Type = 455;
    pub const SYSZ_INS_LHR: Type = 456;
    pub const SYSZ_INS_LHRL: Type = 457;
    pub const SYSZ_INS_LHY: Type = 458;
    pub const SYSZ_INS_LLC: Type = 459;
    pub const SYSZ_INS_LLCH: Type = 460;
    pub const SYSZ_INS_LLCR: Type = 461;
    pub const SYSZ_INS_LLGC: Type = 462;
    pub const SYSZ_INS_LLGCR: Type = 463;
    pub const SYSZ_INS_LLGF: Type = 464;
    pub const SYSZ_INS_LLGFR: Type = 465;
    pub const SYSZ_INS_LLGFRL: Type = 466;
    pub const SYSZ_INS_LLGH: Type = 467;
    pub const SYSZ_INS_LLGHR: Type = 468;
    pub const SYSZ_INS_LLGHRL: Type = 469;
    pub const SYSZ_INS_LLH: Type = 470;
    pub const SYSZ_INS_LLHH: Type = 471;
    pub const SYSZ_INS_LLHR: Type = 472;
    pub const SYSZ_INS_LLHRL: Type = 473;
    pub const SYSZ_INS_LLIHF: Type = 474;
    pub const SYSZ_INS_LLIHH: Type = 475;
    pub const SYSZ_INS_LLIHL: Type = 476;
    pub const SYSZ_INS_LLILF: Type = 477;
    pub const SYSZ_INS_LLILH: Type = 478;
    pub const SYSZ_INS_LLILL: Type = 479;
    pub const SYSZ_INS_LMG: Type = 480;
    pub const SYSZ_INS_LNDBR: Type = 481;
    pub const SYSZ_INS_LNEBR: Type = 482;
    pub const SYSZ_INS_LNGFR: Type = 483;
    pub const SYSZ_INS_LNGR: Type = 484;
    pub const SYSZ_INS_LNR: Type = 485;
    pub const SYSZ_INS_LNXBR: Type = 486;
    pub const SYSZ_INS_LPDBR: Type = 487;
    pub const SYSZ_INS_LPEBR: Type = 488;
    pub const SYSZ_INS_LPGFR: Type = 489;
    pub const SYSZ_INS_LPGR: Type = 490;
    pub const SYSZ_INS_LPR: Type = 491;
    pub const SYSZ_INS_LPXBR: Type = 492;
    pub const SYSZ_INS_LR: Type = 493;
    pub const SYSZ_INS_LRL: Type = 494;
    pub const SYSZ_INS_LRV: Type = 495;
    pub const SYSZ_INS_LRVG: Type = 496;
    pub const SYSZ_INS_LRVGR: Type = 497;
    pub const SYSZ_INS_LRVR: Type = 498;
    pub const SYSZ_INS_LT: Type = 499;
    pub const SYSZ_INS_LTDBR: Type = 500;
    pub const SYSZ_INS_LTEBR: Type = 501;
    pub const SYSZ_INS_LTG: Type = 502;
    pub const SYSZ_INS_LTGF: Type = 503;
    pub const SYSZ_INS_LTGFR: Type = 504;
    pub const SYSZ_INS_LTGR: Type = 505;
    pub const SYSZ_INS_LTR: Type = 506;
    pub const SYSZ_INS_LTXBR: Type = 507;
    pub const SYSZ_INS_LXDB: Type = 508;
    pub const SYSZ_INS_LXDBR: Type = 509;
    pub const SYSZ_INS_LXEB: Type = 510;
    pub const SYSZ_INS_LXEBR: Type = 511;
    pub const SYSZ_INS_LXR: Type = 512;
    pub const SYSZ_INS_LY: Type = 513;
    pub const SYSZ_INS_LZDR: Type = 514;
    pub const SYSZ_INS_LZER: Type = 515;
    pub const SYSZ_INS_LZXR: Type = 516;
    pub const SYSZ_INS_MADB: Type = 517;
    pub const SYSZ_INS_MADBR: Type = 518;
    pub const SYSZ_INS_MAEB: Type = 519;
    pub const SYSZ_INS_MAEBR: Type = 520;
    pub const SYSZ_INS_MDB: Type = 521;
    pub const SYSZ_INS_MDBR: Type = 522;
    pub const SYSZ_INS_MDEB: Type = 523;
    pub const SYSZ_INS_MDEBR: Type = 524;
    pub const SYSZ_INS_MEEB: Type = 525;
    pub const SYSZ_INS_MEEBR: Type = 526;
    pub const SYSZ_INS_MGHI: Type = 527;
    pub const SYSZ_INS_MH: Type = 528;
    pub const SYSZ_INS_MHI: Type = 529;
    pub const SYSZ_INS_MHY: Type = 530;
    pub const SYSZ_INS_MLG: Type = 531;
    pub const SYSZ_INS_MLGR: Type = 532;
    pub const SYSZ_INS_MS: Type = 533;
    pub const SYSZ_INS_MSDB: Type = 534;
    pub const SYSZ_INS_MSDBR: Type = 535;
    pub const SYSZ_INS_MSEB: Type = 536;
    pub const SYSZ_INS_MSEBR: Type = 537;
    pub const SYSZ_INS_MSFI: Type = 538;
    pub const SYSZ_INS_MSG: Type = 539;
    pub const SYSZ_INS_MSGF: Type = 540;
    pub const SYSZ_INS_MSGFI: Type = 541;
    pub const SYSZ_INS_MSGFR: Type = 542;
    pub const SYSZ_INS_MSGR: Type = 543;
    pub const SYSZ_INS_MSR: Type = 544;
    pub const SYSZ_INS_MSY: Type = 545;
    pub const SYSZ_INS_MVC: Type = 546;
    pub const SYSZ_INS_MVGHI: Type = 547;
    pub const SYSZ_INS_MVHHI: Type = 548;
    pub const SYSZ_INS_MVHI: Type = 549;
    pub const SYSZ_INS_MVI: Type = 550;
    pub const SYSZ_INS_MVIY: Type = 551;
    pub const SYSZ_INS_MVST: Type = 552;
    pub const SYSZ_INS_MXBR: Type = 553;
    pub const SYSZ_INS_MXDB: Type = 554;
    pub const SYSZ_INS_MXDBR: Type = 555;
    pub const SYSZ_INS_N: Type = 556;
    pub const SYSZ_INS_NC: Type = 557;
    pub const SYSZ_INS_NG: Type = 558;
    pub const SYSZ_INS_NGR: Type = 559;
    pub const SYSZ_INS_NGRK: Type = 560;
    pub const SYSZ_INS_NI: Type = 561;
    pub const SYSZ_INS_NIHF: Type = 562;
    pub const SYSZ_INS_NIHH: Type = 563;
    pub const SYSZ_INS_NIHL: Type = 564;
    pub const SYSZ_INS_NILF: Type = 565;
    pub const SYSZ_INS_NILH: Type = 566;
    pub const SYSZ_INS_NILL: Type = 567;
    pub const SYSZ_INS_NIY: Type = 568;
    pub const SYSZ_INS_NR: Type = 569;
    pub const SYSZ_INS_NRK: Type = 570;
    pub const SYSZ_INS_NY: Type = 571;
    pub const SYSZ_INS_O: Type = 572;
    pub const SYSZ_INS_OC: Type = 573;
    pub const SYSZ_INS_OG: Type = 574;
    pub const SYSZ_INS_OGR: Type = 575;
    pub const SYSZ_INS_OGRK: Type = 576;
    pub const SYSZ_INS_OI: Type = 577;
    pub const SYSZ_INS_OIHF: Type = 578;
    pub const SYSZ_INS_OIHH: Type = 579;
    pub const SYSZ_INS_OIHL: Type = 580;
    pub const SYSZ_INS_OILF: Type = 581;
    pub const SYSZ_INS_OILH: Type = 582;
    pub const SYSZ_INS_OILL: Type = 583;
    pub const SYSZ_INS_OIY: Type = 584;
    pub const SYSZ_INS_OR: Type = 585;
    pub const SYSZ_INS_ORK: Type = 586;
    pub const SYSZ_INS_OY: Type = 587;
    pub const SYSZ_INS_PFD: Type = 588;
    pub const SYSZ_INS_PFDRL: Type = 589;
    pub const SYSZ_INS_RISBG: Type = 590;
    pub const SYSZ_INS_RISBHG: Type = 591;
    pub const SYSZ_INS_RISBLG: Type = 592;
    pub const SYSZ_INS_RLL: Type = 593;
    pub const SYSZ_INS_RLLG: Type = 594;
    pub const SYSZ_INS_RNSBG: Type = 595;
    pub const SYSZ_INS_ROSBG: Type = 596;
    pub const SYSZ_INS_RXSBG: Type = 597;
    pub const SYSZ_INS_S: Type = 598;
    pub const SYSZ_INS_SDB: Type = 599;
    pub const SYSZ_INS_SDBR: Type = 600;
    pub const SYSZ_INS_SEB: Type = 601;
    pub const SYSZ_INS_SEBR: Type = 602;
    pub const SYSZ_INS_SG: Type = 603;
    pub const SYSZ_INS_SGF: Type = 604;
    pub const SYSZ_INS_SGFR: Type = 605;
    pub const SYSZ_INS_SGR: Type = 606;
    pub const SYSZ_INS_SGRK: Type = 607;
    pub const SYSZ_INS_SH: Type = 608;
    pub const SYSZ_INS_SHY: Type = 609;
    pub const SYSZ_INS_SL: Type = 610;
    pub const SYSZ_INS_SLB: Type = 611;
    pub const SYSZ_INS_SLBG: Type = 612;
    pub const SYSZ_INS_SLBR: Type = 613;
    pub const SYSZ_INS_SLFI: Type = 614;
    pub const SYSZ_INS_SLG: Type = 615;
    pub const SYSZ_INS_SLBGR: Type = 616;
    pub const SYSZ_INS_SLGF: Type = 617;
    pub const SYSZ_INS_SLGFI: Type = 618;
    pub const SYSZ_INS_SLGFR: Type = 619;
    pub const SYSZ_INS_SLGR: Type = 620;
    pub const SYSZ_INS_SLGRK: Type = 621;
    pub const SYSZ_INS_SLL: Type = 622;
    pub const SYSZ_INS_SLLG: Type = 623;
    pub const SYSZ_INS_SLLK: Type = 624;
    pub const SYSZ_INS_SLR: Type = 625;
    pub const SYSZ_INS_SLRK: Type = 626;
    pub const SYSZ_INS_SLY: Type = 627;
    pub const SYSZ_INS_SQDB: Type = 628;
    pub const SYSZ_INS_SQDBR: Type = 629;
    pub const SYSZ_INS_SQEB: Type = 630;
    pub const SYSZ_INS_SQEBR: Type = 631;
    pub const SYSZ_INS_SQXBR: Type = 632;
    pub const SYSZ_INS_SR: Type = 633;
    pub const SYSZ_INS_SRA: Type = 634;
    pub const SYSZ_INS_SRAG: Type = 635;
    pub const SYSZ_INS_SRAK: Type = 636;
    pub const SYSZ_INS_SRK: Type = 637;
    pub const SYSZ_INS_SRL: Type = 638;
    pub const SYSZ_INS_SRLG: Type = 639;
    pub const SYSZ_INS_SRLK: Type = 640;
    pub const SYSZ_INS_SRST: Type = 641;
    pub const SYSZ_INS_ST: Type = 642;
    pub const SYSZ_INS_STC: Type = 643;
    pub const SYSZ_INS_STCH: Type = 644;
    pub const SYSZ_INS_STCY: Type = 645;
    pub const SYSZ_INS_STD: Type = 646;
    pub const SYSZ_INS_STDY: Type = 647;
    pub const SYSZ_INS_STE: Type = 648;
    pub const SYSZ_INS_STEY: Type = 649;
    pub const SYSZ_INS_STFH: Type = 650;
    pub const SYSZ_INS_STG: Type = 651;
    pub const SYSZ_INS_STGRL: Type = 652;
    pub const SYSZ_INS_STH: Type = 653;
    pub const SYSZ_INS_STHH: Type = 654;
    pub const SYSZ_INS_STHRL: Type = 655;
    pub const SYSZ_INS_STHY: Type = 656;
    pub const SYSZ_INS_STMG: Type = 657;
    pub const SYSZ_INS_STRL: Type = 658;
    pub const SYSZ_INS_STRV: Type = 659;
    pub const SYSZ_INS_STRVG: Type = 660;
    pub const SYSZ_INS_STY: Type = 661;
    pub const SYSZ_INS_SXBR: Type = 662;
    pub const SYSZ_INS_SY: Type = 663;
    pub const SYSZ_INS_TM: Type = 664;
    pub const SYSZ_INS_TMHH: Type = 665;
    pub const SYSZ_INS_TMHL: Type = 666;
    pub const SYSZ_INS_TMLH: Type = 667;
    pub const SYSZ_INS_TMLL: Type = 668;
    pub const SYSZ_INS_TMY: Type = 669;
    pub const SYSZ_INS_X: Type = 670;
    pub const SYSZ_INS_XC: Type = 671;
    pub const SYSZ_INS_XG: Type = 672;
    pub const SYSZ_INS_XGR: Type = 673;
    pub const SYSZ_INS_XGRK: Type = 674;
    pub const SYSZ_INS_XI: Type = 675;
    pub const SYSZ_INS_XIHF: Type = 676;
    pub const SYSZ_INS_XILF: Type = 677;
    pub const SYSZ_INS_XIY: Type = 678;
    pub const SYSZ_INS_XR: Type = 679;
    pub const SYSZ_INS_XRK: Type = 680;
    pub const SYSZ_INS_XY: Type = 681;
    pub const SYSZ_INS_ENDING: Type = 682;
}
pub mod sysz_insn_group {
    pub type Type = u32;
    pub const SYSZ_GRP_INVALID: Type = 0;
    pub const SYSZ_GRP_JUMP: Type = 1;
    pub const SYSZ_GRP_DISTINCTOPS: Type = 128;
    pub const SYSZ_GRP_FPEXTENSION: Type = 129;
    pub const SYSZ_GRP_HIGHWORD: Type = 130;
    pub const SYSZ_GRP_INTERLOCKEDACCESS1: Type = 131;
    pub const SYSZ_GRP_LOADSTOREONCOND: Type = 132;
    pub const SYSZ_GRP_ENDING: Type = 133;
}
pub mod x86_reg {
    pub type Type = u32;
    pub const X86_REG_INVALID: Type = 0;
    pub const X86_REG_AH: Type = 1;
    pub const X86_REG_AL: Type = 2;
    pub const X86_REG_AX: Type = 3;
    pub const X86_REG_BH: Type = 4;
    pub const X86_REG_BL: Type = 5;
    pub const X86_REG_BP: Type = 6;
    pub const X86_REG_BPL: Type = 7;
    pub const X86_REG_BX: Type = 8;
    pub const X86_REG_CH: Type = 9;
    pub const X86_REG_CL: Type = 10;
    pub const X86_REG_CS: Type = 11;
    pub const X86_REG_CX: Type = 12;
    pub const X86_REG_DH: Type = 13;
    pub const X86_REG_DI: Type = 14;
    pub const X86_REG_DIL: Type = 15;
    pub const X86_REG_DL: Type = 16;
    pub const X86_REG_DS: Type = 17;
    pub const X86_REG_DX: Type = 18;
    pub const X86_REG_EAX: Type = 19;
    pub const X86_REG_EBP: Type = 20;
    pub const X86_REG_EBX: Type = 21;
    pub const X86_REG_ECX: Type = 22;
    pub const X86_REG_EDI: Type = 23;
    pub const X86_REG_EDX: Type = 24;
    pub const X86_REG_EFLAGS: Type = 25;
    pub const X86_REG_EIP: Type = 26;
    pub const X86_REG_EIZ: Type = 27;
    pub const X86_REG_ES: Type = 28;
    pub const X86_REG_ESI: Type = 29;
    pub const X86_REG_ESP: Type = 30;
    pub const X86_REG_FPSW: Type = 31;
    pub const X86_REG_FS: Type = 32;
    pub const X86_REG_GS: Type = 33;
    pub const X86_REG_IP: Type = 34;
    pub const X86_REG_RAX: Type = 35;
    pub const X86_REG_RBP: Type = 36;
    pub const X86_REG_RBX: Type = 37;
    pub const X86_REG_RCX: Type = 38;
    pub const X86_REG_RDI: Type = 39;
    pub const X86_REG_RDX: Type = 40;
    pub const X86_REG_RIP: Type = 41;
    pub const X86_REG_RIZ: Type = 42;
    pub const X86_REG_RSI: Type = 43;
    pub const X86_REG_RSP: Type = 44;
    pub const X86_REG_SI: Type = 45;
    pub const X86_REG_SIL: Type = 46;
    pub const X86_REG_SP: Type = 47;
    pub const X86_REG_SPL: Type = 48;
    pub const X86_REG_SS: Type = 49;
    pub const X86_REG_CR0: Type = 50;
    pub const X86_REG_CR1: Type = 51;
    pub const X86_REG_CR2: Type = 52;
    pub const X86_REG_CR3: Type = 53;
    pub const X86_REG_CR4: Type = 54;
    pub const X86_REG_CR5: Type = 55;
    pub const X86_REG_CR6: Type = 56;
    pub const X86_REG_CR7: Type = 57;
    pub const X86_REG_CR8: Type = 58;
    pub const X86_REG_CR9: Type = 59;
    pub const X86_REG_CR10: Type = 60;
    pub const X86_REG_CR11: Type = 61;
    pub const X86_REG_CR12: Type = 62;
    pub const X86_REG_CR13: Type = 63;
    pub const X86_REG_CR14: Type = 64;
    pub const X86_REG_CR15: Type = 65;
    pub const X86_REG_DR0: Type = 66;
    pub const X86_REG_DR1: Type = 67;
    pub const X86_REG_DR2: Type = 68;
    pub const X86_REG_DR3: Type = 69;
    pub const X86_REG_DR4: Type = 70;
    pub const X86_REG_DR5: Type = 71;
    pub const X86_REG_DR6: Type = 72;
    pub const X86_REG_DR7: Type = 73;
    pub const X86_REG_FP0: Type = 74;
    pub const X86_REG_FP1: Type = 75;
    pub const X86_REG_FP2: Type = 76;
    pub const X86_REG_FP3: Type = 77;
    pub const X86_REG_FP4: Type = 78;
    pub const X86_REG_FP5: Type = 79;
    pub const X86_REG_FP6: Type = 80;
    pub const X86_REG_FP7: Type = 81;
    pub const X86_REG_K0: Type = 82;
    pub const X86_REG_K1: Type = 83;
    pub const X86_REG_K2: Type = 84;
    pub const X86_REG_K3: Type = 85;
    pub const X86_REG_K4: Type = 86;
    pub const X86_REG_K5: Type = 87;
    pub const X86_REG_K6: Type = 88;
    pub const X86_REG_K7: Type = 89;
    pub const X86_REG_MM0: Type = 90;
    pub const X86_REG_MM1: Type = 91;
    pub const X86_REG_MM2: Type = 92;
    pub const X86_REG_MM3: Type = 93;
    pub const X86_REG_MM4: Type = 94;
    pub const X86_REG_MM5: Type = 95;
    pub const X86_REG_MM6: Type = 96;
    pub const X86_REG_MM7: Type = 97;
    pub const X86_REG_R8: Type = 98;
    pub const X86_REG_R9: Type = 99;
    pub const X86_REG_R10: Type = 100;
    pub const X86_REG_R11: Type = 101;
    pub const X86_REG_R12: Type = 102;
    pub const X86_REG_R13: Type = 103;
    pub const X86_REG_R14: Type = 104;
    pub const X86_REG_R15: Type = 105;
    pub const X86_REG_ST0: Type = 106;
    pub const X86_REG_ST1: Type = 107;
    pub const X86_REG_ST2: Type = 108;
    pub const X86_REG_ST3: Type = 109;
    pub const X86_REG_ST4: Type = 110;
    pub const X86_REG_ST5: Type = 111;
    pub const X86_REG_ST6: Type = 112;
    pub const X86_REG_ST7: Type = 113;
    pub const X86_REG_XMM0: Type = 114;
    pub const X86_REG_XMM1: Type = 115;
    pub const X86_REG_XMM2: Type = 116;
    pub const X86_REG_XMM3: Type = 117;
    pub const X86_REG_XMM4: Type = 118;
    pub const X86_REG_XMM5: Type = 119;
    pub const X86_REG_XMM6: Type = 120;
    pub const X86_REG_XMM7: Type = 121;
    pub const X86_REG_XMM8: Type = 122;
    pub const X86_REG_XMM9: Type = 123;
    pub const X86_REG_XMM10: Type = 124;
    pub const X86_REG_XMM11: Type = 125;
    pub const X86_REG_XMM12: Type = 126;
    pub const X86_REG_XMM13: Type = 127;
    pub const X86_REG_XMM14: Type = 128;
    pub const X86_REG_XMM15: Type = 129;
    pub const X86_REG_XMM16: Type = 130;
    pub const X86_REG_XMM17: Type = 131;
    pub const X86_REG_XMM18: Type = 132;
    pub const X86_REG_XMM19: Type = 133;
    pub const X86_REG_XMM20: Type = 134;
    pub const X86_REG_XMM21: Type = 135;
    pub const X86_REG_XMM22: Type = 136;
    pub const X86_REG_XMM23: Type = 137;
    pub const X86_REG_XMM24: Type = 138;
    pub const X86_REG_XMM25: Type = 139;
    pub const X86_REG_XMM26: Type = 140;
    pub const X86_REG_XMM27: Type = 141;
    pub const X86_REG_XMM28: Type = 142;
    pub const X86_REG_XMM29: Type = 143;
    pub const X86_REG_XMM30: Type = 144;
    pub const X86_REG_XMM31: Type = 145;
    pub const X86_REG_YMM0: Type = 146;
    pub const X86_REG_YMM1: Type = 147;
    pub const X86_REG_YMM2: Type = 148;
    pub const X86_REG_YMM3: Type = 149;
    pub const X86_REG_YMM4: Type = 150;
    pub const X86_REG_YMM5: Type = 151;
    pub const X86_REG_YMM6: Type = 152;
    pub const X86_REG_YMM7: Type = 153;
    pub const X86_REG_YMM8: Type = 154;
    pub const X86_REG_YMM9: Type = 155;
    pub const X86_REG_YMM10: Type = 156;
    pub const X86_REG_YMM11: Type = 157;
    pub const X86_REG_YMM12: Type = 158;
    pub const X86_REG_YMM13: Type = 159;
    pub const X86_REG_YMM14: Type = 160;
    pub const X86_REG_YMM15: Type = 161;
    pub const X86_REG_YMM16: Type = 162;
    pub const X86_REG_YMM17: Type = 163;
    pub const X86_REG_YMM18: Type = 164;
    pub const X86_REG_YMM19: Type = 165;
    pub const X86_REG_YMM20: Type = 166;
    pub const X86_REG_YMM21: Type = 167;
    pub const X86_REG_YMM22: Type = 168;
    pub const X86_REG_YMM23: Type = 169;
    pub const X86_REG_YMM24: Type = 170;
    pub const X86_REG_YMM25: Type = 171;
    pub const X86_REG_YMM26: Type = 172;
    pub const X86_REG_YMM27: Type = 173;
    pub const X86_REG_YMM28: Type = 174;
    pub const X86_REG_YMM29: Type = 175;
    pub const X86_REG_YMM30: Type = 176;
    pub const X86_REG_YMM31: Type = 177;
    pub const X86_REG_ZMM0: Type = 178;
    pub const X86_REG_ZMM1: Type = 179;
    pub const X86_REG_ZMM2: Type = 180;
    pub const X86_REG_ZMM3: Type = 181;
    pub const X86_REG_ZMM4: Type = 182;
    pub const X86_REG_ZMM5: Type = 183;
    pub const X86_REG_ZMM6: Type = 184;
    pub const X86_REG_ZMM7: Type = 185;
    pub const X86_REG_ZMM8: Type = 186;
    pub const X86_REG_ZMM9: Type = 187;
    pub const X86_REG_ZMM10: Type = 188;
    pub const X86_REG_ZMM11: Type = 189;
    pub const X86_REG_ZMM12: Type = 190;
    pub const X86_REG_ZMM13: Type = 191;
    pub const X86_REG_ZMM14: Type = 192;
    pub const X86_REG_ZMM15: Type = 193;
    pub const X86_REG_ZMM16: Type = 194;
    pub const X86_REG_ZMM17: Type = 195;
    pub const X86_REG_ZMM18: Type = 196;
    pub const X86_REG_ZMM19: Type = 197;
    pub const X86_REG_ZMM20: Type = 198;
    pub const X86_REG_ZMM21: Type = 199;
    pub const X86_REG_ZMM22: Type = 200;
    pub const X86_REG_ZMM23: Type = 201;
    pub const X86_REG_ZMM24: Type = 202;
    pub const X86_REG_ZMM25: Type = 203;
    pub const X86_REG_ZMM26: Type = 204;
    pub const X86_REG_ZMM27: Type = 205;
    pub const X86_REG_ZMM28: Type = 206;
    pub const X86_REG_ZMM29: Type = 207;
    pub const X86_REG_ZMM30: Type = 208;
    pub const X86_REG_ZMM31: Type = 209;
    pub const X86_REG_R8B: Type = 210;
    pub const X86_REG_R9B: Type = 211;
    pub const X86_REG_R10B: Type = 212;
    pub const X86_REG_R11B: Type = 213;
    pub const X86_REG_R12B: Type = 214;
    pub const X86_REG_R13B: Type = 215;
    pub const X86_REG_R14B: Type = 216;
    pub const X86_REG_R15B: Type = 217;
    pub const X86_REG_R8D: Type = 218;
    pub const X86_REG_R9D: Type = 219;
    pub const X86_REG_R10D: Type = 220;
    pub const X86_REG_R11D: Type = 221;
    pub const X86_REG_R12D: Type = 222;
    pub const X86_REG_R13D: Type = 223;
    pub const X86_REG_R14D: Type = 224;
    pub const X86_REG_R15D: Type = 225;
    pub const X86_REG_R8W: Type = 226;
    pub const X86_REG_R9W: Type = 227;
    pub const X86_REG_R10W: Type = 228;
    pub const X86_REG_R11W: Type = 229;
    pub const X86_REG_R12W: Type = 230;
    pub const X86_REG_R13W: Type = 231;
    pub const X86_REG_R14W: Type = 232;
    pub const X86_REG_R15W: Type = 233;
    pub const X86_REG_ENDING: Type = 234;
}
pub mod x86_op_type {
    pub type Type = u32;
    pub const X86_OP_INVALID: Type = 0;
    pub const X86_OP_REG: Type = 1;
    pub const X86_OP_IMM: Type = 2;
    pub const X86_OP_MEM: Type = 3;
    pub const X86_OP_FP: Type = 4;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum x86_avx_bcast {
    X86_AVX_BCAST_INVALID = 0,
    X86_AVX_BCAST_2 = 1,
    X86_AVX_BCAST_4 = 2,
    X86_AVX_BCAST_8 = 3,
    X86_AVX_BCAST_16 = 4,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum x86_sse_cc {
    X86_SSE_CC_INVALID = 0,
    X86_SSE_CC_EQ = 1,
    X86_SSE_CC_LT = 2,
    X86_SSE_CC_LE = 3,
    X86_SSE_CC_UNORD = 4,
    X86_SSE_CC_NEQ = 5,
    X86_SSE_CC_NLT = 6,
    X86_SSE_CC_NLE = 7,
    X86_SSE_CC_ORD = 8,
    X86_SSE_CC_EQ_UQ = 9,
    X86_SSE_CC_NGE = 10,
    X86_SSE_CC_NGT = 11,
    X86_SSE_CC_FALSE = 12,
    X86_SSE_CC_NEQ_OQ = 13,
    X86_SSE_CC_GE = 14,
    X86_SSE_CC_GT = 15,
    X86_SSE_CC_TRUE = 16,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum x86_avx_cc {
    X86_AVX_CC_INVALID = 0,
    X86_AVX_CC_EQ = 1,
    X86_AVX_CC_LT = 2,
    X86_AVX_CC_LE = 3,
    X86_AVX_CC_UNORD = 4,
    X86_AVX_CC_NEQ = 5,
    X86_AVX_CC_NLT = 6,
    X86_AVX_CC_NLE = 7,
    X86_AVX_CC_ORD = 8,
    X86_AVX_CC_EQ_UQ = 9,
    X86_AVX_CC_NGE = 10,
    X86_AVX_CC_NGT = 11,
    X86_AVX_CC_FALSE = 12,
    X86_AVX_CC_NEQ_OQ = 13,
    X86_AVX_CC_GE = 14,
    X86_AVX_CC_GT = 15,
    X86_AVX_CC_TRUE = 16,
    X86_AVX_CC_EQ_OS = 17,
    X86_AVX_CC_LT_OQ = 18,
    X86_AVX_CC_LE_OQ = 19,
    X86_AVX_CC_UNORD_S = 20,
    X86_AVX_CC_NEQ_US = 21,
    X86_AVX_CC_NLT_UQ = 22,
    X86_AVX_CC_NLE_UQ = 23,
    X86_AVX_CC_ORD_S = 24,
    X86_AVX_CC_EQ_US = 25,
    X86_AVX_CC_NGE_UQ = 26,
    X86_AVX_CC_NGT_UQ = 27,
    X86_AVX_CC_FALSE_OS = 28,
    X86_AVX_CC_NEQ_OS = 29,
    X86_AVX_CC_GE_OQ = 30,
    X86_AVX_CC_GT_OQ = 31,
    X86_AVX_CC_TRUE_US = 32,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum x86_avx_rm {
    X86_AVX_RM_INVALID = 0,
    X86_AVX_RM_RN = 1,
    X86_AVX_RM_RD = 2,
    X86_AVX_RM_RU = 3,
    X86_AVX_RM_RZ = 4,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum x86_prefix {
    X86_PREFIX_LOCK = 240,
    X86_PREFIX_REP = 243,
    X86_PREFIX_REPNE = 242,
    X86_PREFIX_CS = 46,
    X86_PREFIX_SS = 54,
    X86_PREFIX_DS = 62,
    X86_PREFIX_ES = 38,
    X86_PREFIX_FS = 100,
    X86_PREFIX_GS = 101,
    X86_PREFIX_OPSIZE = 102,
    X86_PREFIX_ADDRSIZE = 103,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct x86_op_mem {
    pub segment: ::std::os::raw::c_uint,
    pub base: ::std::os::raw::c_uint,
    pub index: ::std::os::raw::c_uint,
    pub scale: ::std::os::raw::c_int,
    pub disp: i64,
}
impl Clone for x86_op_mem {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct cs_x86_op {
    pub type_: x86_op_type::Type,
    pub __bindgen_anon_1: cs_x86_op__bindgen_ty_1,
    pub size: u8,
    pub avx_bcast: x86_avx_bcast,
    pub avx_zero_opmask: bool,
}
#[repr(C)]
#[derive(Copy)]
pub union cs_x86_op__bindgen_ty_1 {
    pub reg: x86_reg::Type,
    pub imm: i64,
    pub fp: f64,
    pub mem: x86_op_mem,
    _bindgen_union_align: [u64; 3usize],
}
impl Clone for cs_x86_op__bindgen_ty_1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::fmt::Debug for cs_x86_op__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "cs_x86_op__bindgen_ty_1 {{ union }}")
    }
}
impl Clone for cs_x86_op {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::fmt::Debug for cs_x86_op {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write ! ( f , "cs_x86_op {{ type: {:?}, __bindgen_anon_1: {:?}, size: {:?}, avx_bcast: {:?}, avx_zero_opmask: {:?} }}" , self . type_ , self . __bindgen_anon_1 , self . size , self . avx_bcast , self . avx_zero_opmask )
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct cs_x86 {
    pub prefix: [u8; 4usize],
    pub opcode: [u8; 4usize],
    pub rex: u8,
    pub addr_size: u8,
    pub modrm: u8,
    pub sib: u8,
    pub disp: i32,
    pub sib_index: x86_reg::Type,
    pub sib_scale: i8,
    pub sib_base: x86_reg::Type,
    pub sse_cc: x86_sse_cc,
    pub avx_cc: x86_avx_cc,
    pub avx_sae: bool,
    pub avx_rm: x86_avx_rm,
    pub op_count: u8,
    pub operands: [cs_x86_op; 8usize],
}
impl Clone for cs_x86 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::fmt::Debug for cs_x86 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write ! ( f , "cs_x86 {{ prefix: {:?}, opcode: {:?}, rex: {:?}, addr_size: {:?}, modrm: {:?}, sib: {:?}, disp: {:?}, sib_index: {:?}, sib_scale: {:?}, sib_base: {:?}, sse_cc: {:?}, avx_cc: {:?}, avx_sae: {:?}, avx_rm: {:?}, op_count: {:?}, operands: {:?} }}" , self . prefix , self . opcode , self . rex , self . addr_size , self . modrm , self . sib , self . disp , self . sib_index , self . sib_scale , self . sib_base , self . sse_cc , self . avx_cc , self . avx_sae , self . avx_rm , self . op_count , self . operands )
    }
}
pub mod x86_insn {
    pub type Type = u32;
    pub const X86_INS_INVALID: Type = 0;
    pub const X86_INS_AAA: Type = 1;
    pub const X86_INS_AAD: Type = 2;
    pub const X86_INS_AAM: Type = 3;
    pub const X86_INS_AAS: Type = 4;
    pub const X86_INS_FABS: Type = 5;
    pub const X86_INS_ADC: Type = 6;
    pub const X86_INS_ADCX: Type = 7;
    pub const X86_INS_ADD: Type = 8;
    pub const X86_INS_ADDPD: Type = 9;
    pub const X86_INS_ADDPS: Type = 10;
    pub const X86_INS_ADDSD: Type = 11;
    pub const X86_INS_ADDSS: Type = 12;
    pub const X86_INS_ADDSUBPD: Type = 13;
    pub const X86_INS_ADDSUBPS: Type = 14;
    pub const X86_INS_FADD: Type = 15;
    pub const X86_INS_FIADD: Type = 16;
    pub const X86_INS_FADDP: Type = 17;
    pub const X86_INS_ADOX: Type = 18;
    pub const X86_INS_AESDECLAST: Type = 19;
    pub const X86_INS_AESDEC: Type = 20;
    pub const X86_INS_AESENCLAST: Type = 21;
    pub const X86_INS_AESENC: Type = 22;
    pub const X86_INS_AESIMC: Type = 23;
    pub const X86_INS_AESKEYGENASSIST: Type = 24;
    pub const X86_INS_AND: Type = 25;
    pub const X86_INS_ANDN: Type = 26;
    pub const X86_INS_ANDNPD: Type = 27;
    pub const X86_INS_ANDNPS: Type = 28;
    pub const X86_INS_ANDPD: Type = 29;
    pub const X86_INS_ANDPS: Type = 30;
    pub const X86_INS_ARPL: Type = 31;
    pub const X86_INS_BEXTR: Type = 32;
    pub const X86_INS_BLCFILL: Type = 33;
    pub const X86_INS_BLCI: Type = 34;
    pub const X86_INS_BLCIC: Type = 35;
    pub const X86_INS_BLCMSK: Type = 36;
    pub const X86_INS_BLCS: Type = 37;
    pub const X86_INS_BLENDPD: Type = 38;
    pub const X86_INS_BLENDPS: Type = 39;
    pub const X86_INS_BLENDVPD: Type = 40;
    pub const X86_INS_BLENDVPS: Type = 41;
    pub const X86_INS_BLSFILL: Type = 42;
    pub const X86_INS_BLSI: Type = 43;
    pub const X86_INS_BLSIC: Type = 44;
    pub const X86_INS_BLSMSK: Type = 45;
    pub const X86_INS_BLSR: Type = 46;
    pub const X86_INS_BOUND: Type = 47;
    pub const X86_INS_BSF: Type = 48;
    pub const X86_INS_BSR: Type = 49;
    pub const X86_INS_BSWAP: Type = 50;
    pub const X86_INS_BT: Type = 51;
    pub const X86_INS_BTC: Type = 52;
    pub const X86_INS_BTR: Type = 53;
    pub const X86_INS_BTS: Type = 54;
    pub const X86_INS_BZHI: Type = 55;
    pub const X86_INS_CALL: Type = 56;
    pub const X86_INS_CBW: Type = 57;
    pub const X86_INS_CDQ: Type = 58;
    pub const X86_INS_CDQE: Type = 59;
    pub const X86_INS_FCHS: Type = 60;
    pub const X86_INS_CLAC: Type = 61;
    pub const X86_INS_CLC: Type = 62;
    pub const X86_INS_CLD: Type = 63;
    pub const X86_INS_CLFLUSH: Type = 64;
    pub const X86_INS_CLGI: Type = 65;
    pub const X86_INS_CLI: Type = 66;
    pub const X86_INS_CLTS: Type = 67;
    pub const X86_INS_CMC: Type = 68;
    pub const X86_INS_CMOVA: Type = 69;
    pub const X86_INS_CMOVAE: Type = 70;
    pub const X86_INS_CMOVB: Type = 71;
    pub const X86_INS_CMOVBE: Type = 72;
    pub const X86_INS_FCMOVBE: Type = 73;
    pub const X86_INS_FCMOVB: Type = 74;
    pub const X86_INS_CMOVE: Type = 75;
    pub const X86_INS_FCMOVE: Type = 76;
    pub const X86_INS_CMOVG: Type = 77;
    pub const X86_INS_CMOVGE: Type = 78;
    pub const X86_INS_CMOVL: Type = 79;
    pub const X86_INS_CMOVLE: Type = 80;
    pub const X86_INS_FCMOVNBE: Type = 81;
    pub const X86_INS_FCMOVNB: Type = 82;
    pub const X86_INS_CMOVNE: Type = 83;
    pub const X86_INS_FCMOVNE: Type = 84;
    pub const X86_INS_CMOVNO: Type = 85;
    pub const X86_INS_CMOVNP: Type = 86;
    pub const X86_INS_FCMOVNU: Type = 87;
    pub const X86_INS_CMOVNS: Type = 88;
    pub const X86_INS_CMOVO: Type = 89;
    pub const X86_INS_CMOVP: Type = 90;
    pub const X86_INS_FCMOVU: Type = 91;
    pub const X86_INS_CMOVS: Type = 92;
    pub const X86_INS_CMP: Type = 93;
    pub const X86_INS_CMPPD: Type = 94;
    pub const X86_INS_CMPPS: Type = 95;
    pub const X86_INS_CMPSB: Type = 96;
    pub const X86_INS_CMPSD: Type = 97;
    pub const X86_INS_CMPSQ: Type = 98;
    pub const X86_INS_CMPSS: Type = 99;
    pub const X86_INS_CMPSW: Type = 100;
    pub const X86_INS_CMPXCHG16B: Type = 101;
    pub const X86_INS_CMPXCHG: Type = 102;
    pub const X86_INS_CMPXCHG8B: Type = 103;
    pub const X86_INS_COMISD: Type = 104;
    pub const X86_INS_COMISS: Type = 105;
    pub const X86_INS_FCOMP: Type = 106;
    pub const X86_INS_FCOMPI: Type = 107;
    pub const X86_INS_FCOMI: Type = 108;
    pub const X86_INS_FCOM: Type = 109;
    pub const X86_INS_FCOS: Type = 110;
    pub const X86_INS_CPUID: Type = 111;
    pub const X86_INS_CQO: Type = 112;
    pub const X86_INS_CRC32: Type = 113;
    pub const X86_INS_CVTDQ2PD: Type = 114;
    pub const X86_INS_CVTDQ2PS: Type = 115;
    pub const X86_INS_CVTPD2DQ: Type = 116;
    pub const X86_INS_CVTPD2PS: Type = 117;
    pub const X86_INS_CVTPS2DQ: Type = 118;
    pub const X86_INS_CVTPS2PD: Type = 119;
    pub const X86_INS_CVTSD2SI: Type = 120;
    pub const X86_INS_CVTSD2SS: Type = 121;
    pub const X86_INS_CVTSI2SD: Type = 122;
    pub const X86_INS_CVTSI2SS: Type = 123;
    pub const X86_INS_CVTSS2SD: Type = 124;
    pub const X86_INS_CVTSS2SI: Type = 125;
    pub const X86_INS_CVTTPD2DQ: Type = 126;
    pub const X86_INS_CVTTPS2DQ: Type = 127;
    pub const X86_INS_CVTTSD2SI: Type = 128;
    pub const X86_INS_CVTTSS2SI: Type = 129;
    pub const X86_INS_CWD: Type = 130;
    pub const X86_INS_CWDE: Type = 131;
    pub const X86_INS_DAA: Type = 132;
    pub const X86_INS_DAS: Type = 133;
    pub const X86_INS_DATA16: Type = 134;
    pub const X86_INS_DEC: Type = 135;
    pub const X86_INS_DIV: Type = 136;
    pub const X86_INS_DIVPD: Type = 137;
    pub const X86_INS_DIVPS: Type = 138;
    pub const X86_INS_FDIVR: Type = 139;
    pub const X86_INS_FIDIVR: Type = 140;
    pub const X86_INS_FDIVRP: Type = 141;
    pub const X86_INS_DIVSD: Type = 142;
    pub const X86_INS_DIVSS: Type = 143;
    pub const X86_INS_FDIV: Type = 144;
    pub const X86_INS_FIDIV: Type = 145;
    pub const X86_INS_FDIVP: Type = 146;
    pub const X86_INS_DPPD: Type = 147;
    pub const X86_INS_DPPS: Type = 148;
    pub const X86_INS_RET: Type = 149;
    pub const X86_INS_ENCLS: Type = 150;
    pub const X86_INS_ENCLU: Type = 151;
    pub const X86_INS_ENTER: Type = 152;
    pub const X86_INS_EXTRACTPS: Type = 153;
    pub const X86_INS_EXTRQ: Type = 154;
    pub const X86_INS_F2XM1: Type = 155;
    pub const X86_INS_LCALL: Type = 156;
    pub const X86_INS_LJMP: Type = 157;
    pub const X86_INS_FBLD: Type = 158;
    pub const X86_INS_FBSTP: Type = 159;
    pub const X86_INS_FCOMPP: Type = 160;
    pub const X86_INS_FDECSTP: Type = 161;
    pub const X86_INS_FEMMS: Type = 162;
    pub const X86_INS_FFREE: Type = 163;
    pub const X86_INS_FICOM: Type = 164;
    pub const X86_INS_FICOMP: Type = 165;
    pub const X86_INS_FINCSTP: Type = 166;
    pub const X86_INS_FLDCW: Type = 167;
    pub const X86_INS_FLDENV: Type = 168;
    pub const X86_INS_FLDL2E: Type = 169;
    pub const X86_INS_FLDL2T: Type = 170;
    pub const X86_INS_FLDLG2: Type = 171;
    pub const X86_INS_FLDLN2: Type = 172;
    pub const X86_INS_FLDPI: Type = 173;
    pub const X86_INS_FNCLEX: Type = 174;
    pub const X86_INS_FNINIT: Type = 175;
    pub const X86_INS_FNOP: Type = 176;
    pub const X86_INS_FNSTCW: Type = 177;
    pub const X86_INS_FNSTSW: Type = 178;
    pub const X86_INS_FPATAN: Type = 179;
    pub const X86_INS_FPREM: Type = 180;
    pub const X86_INS_FPREM1: Type = 181;
    pub const X86_INS_FPTAN: Type = 182;
    pub const X86_INS_FRNDINT: Type = 183;
    pub const X86_INS_FRSTOR: Type = 184;
    pub const X86_INS_FNSAVE: Type = 185;
    pub const X86_INS_FSCALE: Type = 186;
    pub const X86_INS_FSETPM: Type = 187;
    pub const X86_INS_FSINCOS: Type = 188;
    pub const X86_INS_FNSTENV: Type = 189;
    pub const X86_INS_FXAM: Type = 190;
    pub const X86_INS_FXRSTOR: Type = 191;
    pub const X86_INS_FXRSTOR64: Type = 192;
    pub const X86_INS_FXSAVE: Type = 193;
    pub const X86_INS_FXSAVE64: Type = 194;
    pub const X86_INS_FXTRACT: Type = 195;
    pub const X86_INS_FYL2X: Type = 196;
    pub const X86_INS_FYL2XP1: Type = 197;
    pub const X86_INS_MOVAPD: Type = 198;
    pub const X86_INS_MOVAPS: Type = 199;
    pub const X86_INS_ORPD: Type = 200;
    pub const X86_INS_ORPS: Type = 201;
    pub const X86_INS_VMOVAPD: Type = 202;
    pub const X86_INS_VMOVAPS: Type = 203;
    pub const X86_INS_XORPD: Type = 204;
    pub const X86_INS_XORPS: Type = 205;
    pub const X86_INS_GETSEC: Type = 206;
    pub const X86_INS_HADDPD: Type = 207;
    pub const X86_INS_HADDPS: Type = 208;
    pub const X86_INS_HLT: Type = 209;
    pub const X86_INS_HSUBPD: Type = 210;
    pub const X86_INS_HSUBPS: Type = 211;
    pub const X86_INS_IDIV: Type = 212;
    pub const X86_INS_FILD: Type = 213;
    pub const X86_INS_IMUL: Type = 214;
    pub const X86_INS_IN: Type = 215;
    pub const X86_INS_INC: Type = 216;
    pub const X86_INS_INSB: Type = 217;
    pub const X86_INS_INSERTPS: Type = 218;
    pub const X86_INS_INSERTQ: Type = 219;
    pub const X86_INS_INSD: Type = 220;
    pub const X86_INS_INSW: Type = 221;
    pub const X86_INS_INT: Type = 222;
    pub const X86_INS_INT1: Type = 223;
    pub const X86_INS_INT3: Type = 224;
    pub const X86_INS_INTO: Type = 225;
    pub const X86_INS_INVD: Type = 226;
    pub const X86_INS_INVEPT: Type = 227;
    pub const X86_INS_INVLPG: Type = 228;
    pub const X86_INS_INVLPGA: Type = 229;
    pub const X86_INS_INVPCID: Type = 230;
    pub const X86_INS_INVVPID: Type = 231;
    pub const X86_INS_IRET: Type = 232;
    pub const X86_INS_IRETD: Type = 233;
    pub const X86_INS_IRETQ: Type = 234;
    pub const X86_INS_FISTTP: Type = 235;
    pub const X86_INS_FIST: Type = 236;
    pub const X86_INS_FISTP: Type = 237;
    pub const X86_INS_UCOMISD: Type = 238;
    pub const X86_INS_UCOMISS: Type = 239;
    pub const X86_INS_VCMP: Type = 240;
    pub const X86_INS_VCOMISD: Type = 241;
    pub const X86_INS_VCOMISS: Type = 242;
    pub const X86_INS_VCVTSD2SS: Type = 243;
    pub const X86_INS_VCVTSI2SD: Type = 244;
    pub const X86_INS_VCVTSI2SS: Type = 245;
    pub const X86_INS_VCVTSS2SD: Type = 246;
    pub const X86_INS_VCVTTSD2SI: Type = 247;
    pub const X86_INS_VCVTTSD2USI: Type = 248;
    pub const X86_INS_VCVTTSS2SI: Type = 249;
    pub const X86_INS_VCVTTSS2USI: Type = 250;
    pub const X86_INS_VCVTUSI2SD: Type = 251;
    pub const X86_INS_VCVTUSI2SS: Type = 252;
    pub const X86_INS_VUCOMISD: Type = 253;
    pub const X86_INS_VUCOMISS: Type = 254;
    pub const X86_INS_JAE: Type = 255;
    pub const X86_INS_JA: Type = 256;
    pub const X86_INS_JBE: Type = 257;
    pub const X86_INS_JB: Type = 258;
    pub const X86_INS_JCXZ: Type = 259;
    pub const X86_INS_JECXZ: Type = 260;
    pub const X86_INS_JE: Type = 261;
    pub const X86_INS_JGE: Type = 262;
    pub const X86_INS_JG: Type = 263;
    pub const X86_INS_JLE: Type = 264;
    pub const X86_INS_JL: Type = 265;
    pub const X86_INS_JMP: Type = 266;
    pub const X86_INS_JNE: Type = 267;
    pub const X86_INS_JNO: Type = 268;
    pub const X86_INS_JNP: Type = 269;
    pub const X86_INS_JNS: Type = 270;
    pub const X86_INS_JO: Type = 271;
    pub const X86_INS_JP: Type = 272;
    pub const X86_INS_JRCXZ: Type = 273;
    pub const X86_INS_JS: Type = 274;
    pub const X86_INS_KANDB: Type = 275;
    pub const X86_INS_KANDD: Type = 276;
    pub const X86_INS_KANDNB: Type = 277;
    pub const X86_INS_KANDND: Type = 278;
    pub const X86_INS_KANDNQ: Type = 279;
    pub const X86_INS_KANDNW: Type = 280;
    pub const X86_INS_KANDQ: Type = 281;
    pub const X86_INS_KANDW: Type = 282;
    pub const X86_INS_KMOVB: Type = 283;
    pub const X86_INS_KMOVD: Type = 284;
    pub const X86_INS_KMOVQ: Type = 285;
    pub const X86_INS_KMOVW: Type = 286;
    pub const X86_INS_KNOTB: Type = 287;
    pub const X86_INS_KNOTD: Type = 288;
    pub const X86_INS_KNOTQ: Type = 289;
    pub const X86_INS_KNOTW: Type = 290;
    pub const X86_INS_KORB: Type = 291;
    pub const X86_INS_KORD: Type = 292;
    pub const X86_INS_KORQ: Type = 293;
    pub const X86_INS_KORTESTW: Type = 294;
    pub const X86_INS_KORW: Type = 295;
    pub const X86_INS_KSHIFTLW: Type = 296;
    pub const X86_INS_KSHIFTRW: Type = 297;
    pub const X86_INS_KUNPCKBW: Type = 298;
    pub const X86_INS_KXNORB: Type = 299;
    pub const X86_INS_KXNORD: Type = 300;
    pub const X86_INS_KXNORQ: Type = 301;
    pub const X86_INS_KXNORW: Type = 302;
    pub const X86_INS_KXORB: Type = 303;
    pub const X86_INS_KXORD: Type = 304;
    pub const X86_INS_KXORQ: Type = 305;
    pub const X86_INS_KXORW: Type = 306;
    pub const X86_INS_LAHF: Type = 307;
    pub const X86_INS_LAR: Type = 308;
    pub const X86_INS_LDDQU: Type = 309;
    pub const X86_INS_LDMXCSR: Type = 310;
    pub const X86_INS_LDS: Type = 311;
    pub const X86_INS_FLDZ: Type = 312;
    pub const X86_INS_FLD1: Type = 313;
    pub const X86_INS_FLD: Type = 314;
    pub const X86_INS_LEA: Type = 315;
    pub const X86_INS_LEAVE: Type = 316;
    pub const X86_INS_LES: Type = 317;
    pub const X86_INS_LFENCE: Type = 318;
    pub const X86_INS_LFS: Type = 319;
    pub const X86_INS_LGDT: Type = 320;
    pub const X86_INS_LGS: Type = 321;
    pub const X86_INS_LIDT: Type = 322;
    pub const X86_INS_LLDT: Type = 323;
    pub const X86_INS_LMSW: Type = 324;
    pub const X86_INS_OR: Type = 325;
    pub const X86_INS_SUB: Type = 326;
    pub const X86_INS_XOR: Type = 327;
    pub const X86_INS_LODSB: Type = 328;
    pub const X86_INS_LODSD: Type = 329;
    pub const X86_INS_LODSQ: Type = 330;
    pub const X86_INS_LODSW: Type = 331;
    pub const X86_INS_LOOP: Type = 332;
    pub const X86_INS_LOOPE: Type = 333;
    pub const X86_INS_LOOPNE: Type = 334;
    pub const X86_INS_RETF: Type = 335;
    pub const X86_INS_RETFQ: Type = 336;
    pub const X86_INS_LSL: Type = 337;
    pub const X86_INS_LSS: Type = 338;
    pub const X86_INS_LTR: Type = 339;
    pub const X86_INS_XADD: Type = 340;
    pub const X86_INS_LZCNT: Type = 341;
    pub const X86_INS_MASKMOVDQU: Type = 342;
    pub const X86_INS_MAXPD: Type = 343;
    pub const X86_INS_MAXPS: Type = 344;
    pub const X86_INS_MAXSD: Type = 345;
    pub const X86_INS_MAXSS: Type = 346;
    pub const X86_INS_MFENCE: Type = 347;
    pub const X86_INS_MINPD: Type = 348;
    pub const X86_INS_MINPS: Type = 349;
    pub const X86_INS_MINSD: Type = 350;
    pub const X86_INS_MINSS: Type = 351;
    pub const X86_INS_CVTPD2PI: Type = 352;
    pub const X86_INS_CVTPI2PD: Type = 353;
    pub const X86_INS_CVTPI2PS: Type = 354;
    pub const X86_INS_CVTPS2PI: Type = 355;
    pub const X86_INS_CVTTPD2PI: Type = 356;
    pub const X86_INS_CVTTPS2PI: Type = 357;
    pub const X86_INS_EMMS: Type = 358;
    pub const X86_INS_MASKMOVQ: Type = 359;
    pub const X86_INS_MOVD: Type = 360;
    pub const X86_INS_MOVDQ2Q: Type = 361;
    pub const X86_INS_MOVNTQ: Type = 362;
    pub const X86_INS_MOVQ2DQ: Type = 363;
    pub const X86_INS_MOVQ: Type = 364;
    pub const X86_INS_PABSB: Type = 365;
    pub const X86_INS_PABSD: Type = 366;
    pub const X86_INS_PABSW: Type = 367;
    pub const X86_INS_PACKSSDW: Type = 368;
    pub const X86_INS_PACKSSWB: Type = 369;
    pub const X86_INS_PACKUSWB: Type = 370;
    pub const X86_INS_PADDB: Type = 371;
    pub const X86_INS_PADDD: Type = 372;
    pub const X86_INS_PADDQ: Type = 373;
    pub const X86_INS_PADDSB: Type = 374;
    pub const X86_INS_PADDSW: Type = 375;
    pub const X86_INS_PADDUSB: Type = 376;
    pub const X86_INS_PADDUSW: Type = 377;
    pub const X86_INS_PADDW: Type = 378;
    pub const X86_INS_PALIGNR: Type = 379;
    pub const X86_INS_PANDN: Type = 380;
    pub const X86_INS_PAND: Type = 381;
    pub const X86_INS_PAVGB: Type = 382;
    pub const X86_INS_PAVGW: Type = 383;
    pub const X86_INS_PCMPEQB: Type = 384;
    pub const X86_INS_PCMPEQD: Type = 385;
    pub const X86_INS_PCMPEQW: Type = 386;
    pub const X86_INS_PCMPGTB: Type = 387;
    pub const X86_INS_PCMPGTD: Type = 388;
    pub const X86_INS_PCMPGTW: Type = 389;
    pub const X86_INS_PEXTRW: Type = 390;
    pub const X86_INS_PHADDSW: Type = 391;
    pub const X86_INS_PHADDW: Type = 392;
    pub const X86_INS_PHADDD: Type = 393;
    pub const X86_INS_PHSUBD: Type = 394;
    pub const X86_INS_PHSUBSW: Type = 395;
    pub const X86_INS_PHSUBW: Type = 396;
    pub const X86_INS_PINSRW: Type = 397;
    pub const X86_INS_PMADDUBSW: Type = 398;
    pub const X86_INS_PMADDWD: Type = 399;
    pub const X86_INS_PMAXSW: Type = 400;
    pub const X86_INS_PMAXUB: Type = 401;
    pub const X86_INS_PMINSW: Type = 402;
    pub const X86_INS_PMINUB: Type = 403;
    pub const X86_INS_PMOVMSKB: Type = 404;
    pub const X86_INS_PMULHRSW: Type = 405;
    pub const X86_INS_PMULHUW: Type = 406;
    pub const X86_INS_PMULHW: Type = 407;
    pub const X86_INS_PMULLW: Type = 408;
    pub const X86_INS_PMULUDQ: Type = 409;
    pub const X86_INS_POR: Type = 410;
    pub const X86_INS_PSADBW: Type = 411;
    pub const X86_INS_PSHUFB: Type = 412;
    pub const X86_INS_PSHUFW: Type = 413;
    pub const X86_INS_PSIGNB: Type = 414;
    pub const X86_INS_PSIGND: Type = 415;
    pub const X86_INS_PSIGNW: Type = 416;
    pub const X86_INS_PSLLD: Type = 417;
    pub const X86_INS_PSLLQ: Type = 418;
    pub const X86_INS_PSLLW: Type = 419;
    pub const X86_INS_PSRAD: Type = 420;
    pub const X86_INS_PSRAW: Type = 421;
    pub const X86_INS_PSRLD: Type = 422;
    pub const X86_INS_PSRLQ: Type = 423;
    pub const X86_INS_PSRLW: Type = 424;
    pub const X86_INS_PSUBB: Type = 425;
    pub const X86_INS_PSUBD: Type = 426;
    pub const X86_INS_PSUBQ: Type = 427;
    pub const X86_INS_PSUBSB: Type = 428;
    pub const X86_INS_PSUBSW: Type = 429;
    pub const X86_INS_PSUBUSB: Type = 430;
    pub const X86_INS_PSUBUSW: Type = 431;
    pub const X86_INS_PSUBW: Type = 432;
    pub const X86_INS_PUNPCKHBW: Type = 433;
    pub const X86_INS_PUNPCKHDQ: Type = 434;
    pub const X86_INS_PUNPCKHWD: Type = 435;
    pub const X86_INS_PUNPCKLBW: Type = 436;
    pub const X86_INS_PUNPCKLDQ: Type = 437;
    pub const X86_INS_PUNPCKLWD: Type = 438;
    pub const X86_INS_PXOR: Type = 439;
    pub const X86_INS_MONITOR: Type = 440;
    pub const X86_INS_MONTMUL: Type = 441;
    pub const X86_INS_MOV: Type = 442;
    pub const X86_INS_MOVABS: Type = 443;
    pub const X86_INS_MOVBE: Type = 444;
    pub const X86_INS_MOVDDUP: Type = 445;
    pub const X86_INS_MOVDQA: Type = 446;
    pub const X86_INS_MOVDQU: Type = 447;
    pub const X86_INS_MOVHLPS: Type = 448;
    pub const X86_INS_MOVHPD: Type = 449;
    pub const X86_INS_MOVHPS: Type = 450;
    pub const X86_INS_MOVLHPS: Type = 451;
    pub const X86_INS_MOVLPD: Type = 452;
    pub const X86_INS_MOVLPS: Type = 453;
    pub const X86_INS_MOVMSKPD: Type = 454;
    pub const X86_INS_MOVMSKPS: Type = 455;
    pub const X86_INS_MOVNTDQA: Type = 456;
    pub const X86_INS_MOVNTDQ: Type = 457;
    pub const X86_INS_MOVNTI: Type = 458;
    pub const X86_INS_MOVNTPD: Type = 459;
    pub const X86_INS_MOVNTPS: Type = 460;
    pub const X86_INS_MOVNTSD: Type = 461;
    pub const X86_INS_MOVNTSS: Type = 462;
    pub const X86_INS_MOVSB: Type = 463;
    pub const X86_INS_MOVSD: Type = 464;
    pub const X86_INS_MOVSHDUP: Type = 465;
    pub const X86_INS_MOVSLDUP: Type = 466;
    pub const X86_INS_MOVSQ: Type = 467;
    pub const X86_INS_MOVSS: Type = 468;
    pub const X86_INS_MOVSW: Type = 469;
    pub const X86_INS_MOVSX: Type = 470;
    pub const X86_INS_MOVSXD: Type = 471;
    pub const X86_INS_MOVUPD: Type = 472;
    pub const X86_INS_MOVUPS: Type = 473;
    pub const X86_INS_MOVZX: Type = 474;
    pub const X86_INS_MPSADBW: Type = 475;
    pub const X86_INS_MUL: Type = 476;
    pub const X86_INS_MULPD: Type = 477;
    pub const X86_INS_MULPS: Type = 478;
    pub const X86_INS_MULSD: Type = 479;
    pub const X86_INS_MULSS: Type = 480;
    pub const X86_INS_MULX: Type = 481;
    pub const X86_INS_FMUL: Type = 482;
    pub const X86_INS_FIMUL: Type = 483;
    pub const X86_INS_FMULP: Type = 484;
    pub const X86_INS_MWAIT: Type = 485;
    pub const X86_INS_NEG: Type = 486;
    pub const X86_INS_NOP: Type = 487;
    pub const X86_INS_NOT: Type = 488;
    pub const X86_INS_OUT: Type = 489;
    pub const X86_INS_OUTSB: Type = 490;
    pub const X86_INS_OUTSD: Type = 491;
    pub const X86_INS_OUTSW: Type = 492;
    pub const X86_INS_PACKUSDW: Type = 493;
    pub const X86_INS_PAUSE: Type = 494;
    pub const X86_INS_PAVGUSB: Type = 495;
    pub const X86_INS_PBLENDVB: Type = 496;
    pub const X86_INS_PBLENDW: Type = 497;
    pub const X86_INS_PCLMULQDQ: Type = 498;
    pub const X86_INS_PCMPEQQ: Type = 499;
    pub const X86_INS_PCMPESTRI: Type = 500;
    pub const X86_INS_PCMPESTRM: Type = 501;
    pub const X86_INS_PCMPGTQ: Type = 502;
    pub const X86_INS_PCMPISTRI: Type = 503;
    pub const X86_INS_PCMPISTRM: Type = 504;
    pub const X86_INS_PDEP: Type = 505;
    pub const X86_INS_PEXT: Type = 506;
    pub const X86_INS_PEXTRB: Type = 507;
    pub const X86_INS_PEXTRD: Type = 508;
    pub const X86_INS_PEXTRQ: Type = 509;
    pub const X86_INS_PF2ID: Type = 510;
    pub const X86_INS_PF2IW: Type = 511;
    pub const X86_INS_PFACC: Type = 512;
    pub const X86_INS_PFADD: Type = 513;
    pub const X86_INS_PFCMPEQ: Type = 514;
    pub const X86_INS_PFCMPGE: Type = 515;
    pub const X86_INS_PFCMPGT: Type = 516;
    pub const X86_INS_PFMAX: Type = 517;
    pub const X86_INS_PFMIN: Type = 518;
    pub const X86_INS_PFMUL: Type = 519;
    pub const X86_INS_PFNACC: Type = 520;
    pub const X86_INS_PFPNACC: Type = 521;
    pub const X86_INS_PFRCPIT1: Type = 522;
    pub const X86_INS_PFRCPIT2: Type = 523;
    pub const X86_INS_PFRCP: Type = 524;
    pub const X86_INS_PFRSQIT1: Type = 525;
    pub const X86_INS_PFRSQRT: Type = 526;
    pub const X86_INS_PFSUBR: Type = 527;
    pub const X86_INS_PFSUB: Type = 528;
    pub const X86_INS_PHMINPOSUW: Type = 529;
    pub const X86_INS_PI2FD: Type = 530;
    pub const X86_INS_PI2FW: Type = 531;
    pub const X86_INS_PINSRB: Type = 532;
    pub const X86_INS_PINSRD: Type = 533;
    pub const X86_INS_PINSRQ: Type = 534;
    pub const X86_INS_PMAXSB: Type = 535;
    pub const X86_INS_PMAXSD: Type = 536;
    pub const X86_INS_PMAXUD: Type = 537;
    pub const X86_INS_PMAXUW: Type = 538;
    pub const X86_INS_PMINSB: Type = 539;
    pub const X86_INS_PMINSD: Type = 540;
    pub const X86_INS_PMINUD: Type = 541;
    pub const X86_INS_PMINUW: Type = 542;
    pub const X86_INS_PMOVSXBD: Type = 543;
    pub const X86_INS_PMOVSXBQ: Type = 544;
    pub const X86_INS_PMOVSXBW: Type = 545;
    pub const X86_INS_PMOVSXDQ: Type = 546;
    pub const X86_INS_PMOVSXWD: Type = 547;
    pub const X86_INS_PMOVSXWQ: Type = 548;
    pub const X86_INS_PMOVZXBD: Type = 549;
    pub const X86_INS_PMOVZXBQ: Type = 550;
    pub const X86_INS_PMOVZXBW: Type = 551;
    pub const X86_INS_PMOVZXDQ: Type = 552;
    pub const X86_INS_PMOVZXWD: Type = 553;
    pub const X86_INS_PMOVZXWQ: Type = 554;
    pub const X86_INS_PMULDQ: Type = 555;
    pub const X86_INS_PMULHRW: Type = 556;
    pub const X86_INS_PMULLD: Type = 557;
    pub const X86_INS_POP: Type = 558;
    pub const X86_INS_POPAW: Type = 559;
    pub const X86_INS_POPAL: Type = 560;
    pub const X86_INS_POPCNT: Type = 561;
    pub const X86_INS_POPF: Type = 562;
    pub const X86_INS_POPFD: Type = 563;
    pub const X86_INS_POPFQ: Type = 564;
    pub const X86_INS_PREFETCH: Type = 565;
    pub const X86_INS_PREFETCHNTA: Type = 566;
    pub const X86_INS_PREFETCHT0: Type = 567;
    pub const X86_INS_PREFETCHT1: Type = 568;
    pub const X86_INS_PREFETCHT2: Type = 569;
    pub const X86_INS_PREFETCHW: Type = 570;
    pub const X86_INS_PSHUFD: Type = 571;
    pub const X86_INS_PSHUFHW: Type = 572;
    pub const X86_INS_PSHUFLW: Type = 573;
    pub const X86_INS_PSLLDQ: Type = 574;
    pub const X86_INS_PSRLDQ: Type = 575;
    pub const X86_INS_PSWAPD: Type = 576;
    pub const X86_INS_PTEST: Type = 577;
    pub const X86_INS_PUNPCKHQDQ: Type = 578;
    pub const X86_INS_PUNPCKLQDQ: Type = 579;
    pub const X86_INS_PUSH: Type = 580;
    pub const X86_INS_PUSHAW: Type = 581;
    pub const X86_INS_PUSHAL: Type = 582;
    pub const X86_INS_PUSHF: Type = 583;
    pub const X86_INS_PUSHFD: Type = 584;
    pub const X86_INS_PUSHFQ: Type = 585;
    pub const X86_INS_RCL: Type = 586;
    pub const X86_INS_RCPPS: Type = 587;
    pub const X86_INS_RCPSS: Type = 588;
    pub const X86_INS_RCR: Type = 589;
    pub const X86_INS_RDFSBASE: Type = 590;
    pub const X86_INS_RDGSBASE: Type = 591;
    pub const X86_INS_RDMSR: Type = 592;
    pub const X86_INS_RDPMC: Type = 593;
    pub const X86_INS_RDRAND: Type = 594;
    pub const X86_INS_RDSEED: Type = 595;
    pub const X86_INS_RDTSC: Type = 596;
    pub const X86_INS_RDTSCP: Type = 597;
    pub const X86_INS_ROL: Type = 598;
    pub const X86_INS_ROR: Type = 599;
    pub const X86_INS_RORX: Type = 600;
    pub const X86_INS_ROUNDPD: Type = 601;
    pub const X86_INS_ROUNDPS: Type = 602;
    pub const X86_INS_ROUNDSD: Type = 603;
    pub const X86_INS_ROUNDSS: Type = 604;
    pub const X86_INS_RSM: Type = 605;
    pub const X86_INS_RSQRTPS: Type = 606;
    pub const X86_INS_RSQRTSS: Type = 607;
    pub const X86_INS_SAHF: Type = 608;
    pub const X86_INS_SAL: Type = 609;
    pub const X86_INS_SALC: Type = 610;
    pub const X86_INS_SAR: Type = 611;
    pub const X86_INS_SARX: Type = 612;
    pub const X86_INS_SBB: Type = 613;
    pub const X86_INS_SCASB: Type = 614;
    pub const X86_INS_SCASD: Type = 615;
    pub const X86_INS_SCASQ: Type = 616;
    pub const X86_INS_SCASW: Type = 617;
    pub const X86_INS_SETAE: Type = 618;
    pub const X86_INS_SETA: Type = 619;
    pub const X86_INS_SETBE: Type = 620;
    pub const X86_INS_SETB: Type = 621;
    pub const X86_INS_SETE: Type = 622;
    pub const X86_INS_SETGE: Type = 623;
    pub const X86_INS_SETG: Type = 624;
    pub const X86_INS_SETLE: Type = 625;
    pub const X86_INS_SETL: Type = 626;
    pub const X86_INS_SETNE: Type = 627;
    pub const X86_INS_SETNO: Type = 628;
    pub const X86_INS_SETNP: Type = 629;
    pub const X86_INS_SETNS: Type = 630;
    pub const X86_INS_SETO: Type = 631;
    pub const X86_INS_SETP: Type = 632;
    pub const X86_INS_SETS: Type = 633;
    pub const X86_INS_SFENCE: Type = 634;
    pub const X86_INS_SGDT: Type = 635;
    pub const X86_INS_SHA1MSG1: Type = 636;
    pub const X86_INS_SHA1MSG2: Type = 637;
    pub const X86_INS_SHA1NEXTE: Type = 638;
    pub const X86_INS_SHA1RNDS4: Type = 639;
    pub const X86_INS_SHA256MSG1: Type = 640;
    pub const X86_INS_SHA256MSG2: Type = 641;
    pub const X86_INS_SHA256RNDS2: Type = 642;
    pub const X86_INS_SHL: Type = 643;
    pub const X86_INS_SHLD: Type = 644;
    pub const X86_INS_SHLX: Type = 645;
    pub const X86_INS_SHR: Type = 646;
    pub const X86_INS_SHRD: Type = 647;
    pub const X86_INS_SHRX: Type = 648;
    pub const X86_INS_SHUFPD: Type = 649;
    pub const X86_INS_SHUFPS: Type = 650;
    pub const X86_INS_SIDT: Type = 651;
    pub const X86_INS_FSIN: Type = 652;
    pub const X86_INS_SKINIT: Type = 653;
    pub const X86_INS_SLDT: Type = 654;
    pub const X86_INS_SMSW: Type = 655;
    pub const X86_INS_SQRTPD: Type = 656;
    pub const X86_INS_SQRTPS: Type = 657;
    pub const X86_INS_SQRTSD: Type = 658;
    pub const X86_INS_SQRTSS: Type = 659;
    pub const X86_INS_FSQRT: Type = 660;
    pub const X86_INS_STAC: Type = 661;
    pub const X86_INS_STC: Type = 662;
    pub const X86_INS_STD: Type = 663;
    pub const X86_INS_STGI: Type = 664;
    pub const X86_INS_STI: Type = 665;
    pub const X86_INS_STMXCSR: Type = 666;
    pub const X86_INS_STOSB: Type = 667;
    pub const X86_INS_STOSD: Type = 668;
    pub const X86_INS_STOSQ: Type = 669;
    pub const X86_INS_STOSW: Type = 670;
    pub const X86_INS_STR: Type = 671;
    pub const X86_INS_FST: Type = 672;
    pub const X86_INS_FSTP: Type = 673;
    pub const X86_INS_FSTPNCE: Type = 674;
    pub const X86_INS_SUBPD: Type = 675;
    pub const X86_INS_SUBPS: Type = 676;
    pub const X86_INS_FSUBR: Type = 677;
    pub const X86_INS_FISUBR: Type = 678;
    pub const X86_INS_FSUBRP: Type = 679;
    pub const X86_INS_SUBSD: Type = 680;
    pub const X86_INS_SUBSS: Type = 681;
    pub const X86_INS_FSUB: Type = 682;
    pub const X86_INS_FISUB: Type = 683;
    pub const X86_INS_FSUBP: Type = 684;
    pub const X86_INS_SWAPGS: Type = 685;
    pub const X86_INS_SYSCALL: Type = 686;
    pub const X86_INS_SYSENTER: Type = 687;
    pub const X86_INS_SYSEXIT: Type = 688;
    pub const X86_INS_SYSRET: Type = 689;
    pub const X86_INS_T1MSKC: Type = 690;
    pub const X86_INS_TEST: Type = 691;
    pub const X86_INS_UD2: Type = 692;
    pub const X86_INS_FTST: Type = 693;
    pub const X86_INS_TZCNT: Type = 694;
    pub const X86_INS_TZMSK: Type = 695;
    pub const X86_INS_FUCOMPI: Type = 696;
    pub const X86_INS_FUCOMI: Type = 697;
    pub const X86_INS_FUCOMPP: Type = 698;
    pub const X86_INS_FUCOMP: Type = 699;
    pub const X86_INS_FUCOM: Type = 700;
    pub const X86_INS_UD2B: Type = 701;
    pub const X86_INS_UNPCKHPD: Type = 702;
    pub const X86_INS_UNPCKHPS: Type = 703;
    pub const X86_INS_UNPCKLPD: Type = 704;
    pub const X86_INS_UNPCKLPS: Type = 705;
    pub const X86_INS_VADDPD: Type = 706;
    pub const X86_INS_VADDPS: Type = 707;
    pub const X86_INS_VADDSD: Type = 708;
    pub const X86_INS_VADDSS: Type = 709;
    pub const X86_INS_VADDSUBPD: Type = 710;
    pub const X86_INS_VADDSUBPS: Type = 711;
    pub const X86_INS_VAESDECLAST: Type = 712;
    pub const X86_INS_VAESDEC: Type = 713;
    pub const X86_INS_VAESENCLAST: Type = 714;
    pub const X86_INS_VAESENC: Type = 715;
    pub const X86_INS_VAESIMC: Type = 716;
    pub const X86_INS_VAESKEYGENASSIST: Type = 717;
    pub const X86_INS_VALIGND: Type = 718;
    pub const X86_INS_VALIGNQ: Type = 719;
    pub const X86_INS_VANDNPD: Type = 720;
    pub const X86_INS_VANDNPS: Type = 721;
    pub const X86_INS_VANDPD: Type = 722;
    pub const X86_INS_VANDPS: Type = 723;
    pub const X86_INS_VBLENDMPD: Type = 724;
    pub const X86_INS_VBLENDMPS: Type = 725;
    pub const X86_INS_VBLENDPD: Type = 726;
    pub const X86_INS_VBLENDPS: Type = 727;
    pub const X86_INS_VBLENDVPD: Type = 728;
    pub const X86_INS_VBLENDVPS: Type = 729;
    pub const X86_INS_VBROADCASTF128: Type = 730;
    pub const X86_INS_VBROADCASTI128: Type = 731;
    pub const X86_INS_VBROADCASTI32X4: Type = 732;
    pub const X86_INS_VBROADCASTI64X4: Type = 733;
    pub const X86_INS_VBROADCASTSD: Type = 734;
    pub const X86_INS_VBROADCASTSS: Type = 735;
    pub const X86_INS_VCMPPD: Type = 736;
    pub const X86_INS_VCMPPS: Type = 737;
    pub const X86_INS_VCMPSD: Type = 738;
    pub const X86_INS_VCMPSS: Type = 739;
    pub const X86_INS_VCVTDQ2PD: Type = 740;
    pub const X86_INS_VCVTDQ2PS: Type = 741;
    pub const X86_INS_VCVTPD2DQX: Type = 742;
    pub const X86_INS_VCVTPD2DQ: Type = 743;
    pub const X86_INS_VCVTPD2PSX: Type = 744;
    pub const X86_INS_VCVTPD2PS: Type = 745;
    pub const X86_INS_VCVTPD2UDQ: Type = 746;
    pub const X86_INS_VCVTPH2PS: Type = 747;
    pub const X86_INS_VCVTPS2DQ: Type = 748;
    pub const X86_INS_VCVTPS2PD: Type = 749;
    pub const X86_INS_VCVTPS2PH: Type = 750;
    pub const X86_INS_VCVTPS2UDQ: Type = 751;
    pub const X86_INS_VCVTSD2SI: Type = 752;
    pub const X86_INS_VCVTSD2USI: Type = 753;
    pub const X86_INS_VCVTSS2SI: Type = 754;
    pub const X86_INS_VCVTSS2USI: Type = 755;
    pub const X86_INS_VCVTTPD2DQX: Type = 756;
    pub const X86_INS_VCVTTPD2DQ: Type = 757;
    pub const X86_INS_VCVTTPD2UDQ: Type = 758;
    pub const X86_INS_VCVTTPS2DQ: Type = 759;
    pub const X86_INS_VCVTTPS2UDQ: Type = 760;
    pub const X86_INS_VCVTUDQ2PD: Type = 761;
    pub const X86_INS_VCVTUDQ2PS: Type = 762;
    pub const X86_INS_VDIVPD: Type = 763;
    pub const X86_INS_VDIVPS: Type = 764;
    pub const X86_INS_VDIVSD: Type = 765;
    pub const X86_INS_VDIVSS: Type = 766;
    pub const X86_INS_VDPPD: Type = 767;
    pub const X86_INS_VDPPS: Type = 768;
    pub const X86_INS_VERR: Type = 769;
    pub const X86_INS_VERW: Type = 770;
    pub const X86_INS_VEXTRACTF128: Type = 771;
    pub const X86_INS_VEXTRACTF32X4: Type = 772;
    pub const X86_INS_VEXTRACTF64X4: Type = 773;
    pub const X86_INS_VEXTRACTI128: Type = 774;
    pub const X86_INS_VEXTRACTI32X4: Type = 775;
    pub const X86_INS_VEXTRACTI64X4: Type = 776;
    pub const X86_INS_VEXTRACTPS: Type = 777;
    pub const X86_INS_VFMADD132PD: Type = 778;
    pub const X86_INS_VFMADD132PS: Type = 779;
    pub const X86_INS_VFMADD213PD: Type = 780;
    pub const X86_INS_VFMADD213PS: Type = 781;
    pub const X86_INS_VFMADDPD: Type = 782;
    pub const X86_INS_VFMADD231PD: Type = 783;
    pub const X86_INS_VFMADDPS: Type = 784;
    pub const X86_INS_VFMADD231PS: Type = 785;
    pub const X86_INS_VFMADDSD: Type = 786;
    pub const X86_INS_VFMADD213SD: Type = 787;
    pub const X86_INS_VFMADD132SD: Type = 788;
    pub const X86_INS_VFMADD231SD: Type = 789;
    pub const X86_INS_VFMADDSS: Type = 790;
    pub const X86_INS_VFMADD213SS: Type = 791;
    pub const X86_INS_VFMADD132SS: Type = 792;
    pub const X86_INS_VFMADD231SS: Type = 793;
    pub const X86_INS_VFMADDSUB132PD: Type = 794;
    pub const X86_INS_VFMADDSUB132PS: Type = 795;
    pub const X86_INS_VFMADDSUB213PD: Type = 796;
    pub const X86_INS_VFMADDSUB213PS: Type = 797;
    pub const X86_INS_VFMADDSUBPD: Type = 798;
    pub const X86_INS_VFMADDSUB231PD: Type = 799;
    pub const X86_INS_VFMADDSUBPS: Type = 800;
    pub const X86_INS_VFMADDSUB231PS: Type = 801;
    pub const X86_INS_VFMSUB132PD: Type = 802;
    pub const X86_INS_VFMSUB132PS: Type = 803;
    pub const X86_INS_VFMSUB213PD: Type = 804;
    pub const X86_INS_VFMSUB213PS: Type = 805;
    pub const X86_INS_VFMSUBADD132PD: Type = 806;
    pub const X86_INS_VFMSUBADD132PS: Type = 807;
    pub const X86_INS_VFMSUBADD213PD: Type = 808;
    pub const X86_INS_VFMSUBADD213PS: Type = 809;
    pub const X86_INS_VFMSUBADDPD: Type = 810;
    pub const X86_INS_VFMSUBADD231PD: Type = 811;
    pub const X86_INS_VFMSUBADDPS: Type = 812;
    pub const X86_INS_VFMSUBADD231PS: Type = 813;
    pub const X86_INS_VFMSUBPD: Type = 814;
    pub const X86_INS_VFMSUB231PD: Type = 815;
    pub const X86_INS_VFMSUBPS: Type = 816;
    pub const X86_INS_VFMSUB231PS: Type = 817;
    pub const X86_INS_VFMSUBSD: Type = 818;
    pub const X86_INS_VFMSUB213SD: Type = 819;
    pub const X86_INS_VFMSUB132SD: Type = 820;
    pub const X86_INS_VFMSUB231SD: Type = 821;
    pub const X86_INS_VFMSUBSS: Type = 822;
    pub const X86_INS_VFMSUB213SS: Type = 823;
    pub const X86_INS_VFMSUB132SS: Type = 824;
    pub const X86_INS_VFMSUB231SS: Type = 825;
    pub const X86_INS_VFNMADD132PD: Type = 826;
    pub const X86_INS_VFNMADD132PS: Type = 827;
    pub const X86_INS_VFNMADD213PD: Type = 828;
    pub const X86_INS_VFNMADD213PS: Type = 829;
    pub const X86_INS_VFNMADDPD: Type = 830;
    pub const X86_INS_VFNMADD231PD: Type = 831;
    pub const X86_INS_VFNMADDPS: Type = 832;
    pub const X86_INS_VFNMADD231PS: Type = 833;
    pub const X86_INS_VFNMADDSD: Type = 834;
    pub const X86_INS_VFNMADD213SD: Type = 835;
    pub const X86_INS_VFNMADD132SD: Type = 836;
    pub const X86_INS_VFNMADD231SD: Type = 837;
    pub const X86_INS_VFNMADDSS: Type = 838;
    pub const X86_INS_VFNMADD213SS: Type = 839;
    pub const X86_INS_VFNMADD132SS: Type = 840;
    pub const X86_INS_VFNMADD231SS: Type = 841;
    pub const X86_INS_VFNMSUB132PD: Type = 842;
    pub const X86_INS_VFNMSUB132PS: Type = 843;
    pub const X86_INS_VFNMSUB213PD: Type = 844;
    pub const X86_INS_VFNMSUB213PS: Type = 845;
    pub const X86_INS_VFNMSUBPD: Type = 846;
    pub const X86_INS_VFNMSUB231PD: Type = 847;
    pub const X86_INS_VFNMSUBPS: Type = 848;
    pub const X86_INS_VFNMSUB231PS: Type = 849;
    pub const X86_INS_VFNMSUBSD: Type = 850;
    pub const X86_INS_VFNMSUB213SD: Type = 851;
    pub const X86_INS_VFNMSUB132SD: Type = 852;
    pub const X86_INS_VFNMSUB231SD: Type = 853;
    pub const X86_INS_VFNMSUBSS: Type = 854;
    pub const X86_INS_VFNMSUB213SS: Type = 855;
    pub const X86_INS_VFNMSUB132SS: Type = 856;
    pub const X86_INS_VFNMSUB231SS: Type = 857;
    pub const X86_INS_VFRCZPD: Type = 858;
    pub const X86_INS_VFRCZPS: Type = 859;
    pub const X86_INS_VFRCZSD: Type = 860;
    pub const X86_INS_VFRCZSS: Type = 861;
    pub const X86_INS_VORPD: Type = 862;
    pub const X86_INS_VORPS: Type = 863;
    pub const X86_INS_VXORPD: Type = 864;
    pub const X86_INS_VXORPS: Type = 865;
    pub const X86_INS_VGATHERDPD: Type = 866;
    pub const X86_INS_VGATHERDPS: Type = 867;
    pub const X86_INS_VGATHERPF0DPD: Type = 868;
    pub const X86_INS_VGATHERPF0DPS: Type = 869;
    pub const X86_INS_VGATHERPF0QPD: Type = 870;
    pub const X86_INS_VGATHERPF0QPS: Type = 871;
    pub const X86_INS_VGATHERPF1DPD: Type = 872;
    pub const X86_INS_VGATHERPF1DPS: Type = 873;
    pub const X86_INS_VGATHERPF1QPD: Type = 874;
    pub const X86_INS_VGATHERPF1QPS: Type = 875;
    pub const X86_INS_VGATHERQPD: Type = 876;
    pub const X86_INS_VGATHERQPS: Type = 877;
    pub const X86_INS_VHADDPD: Type = 878;
    pub const X86_INS_VHADDPS: Type = 879;
    pub const X86_INS_VHSUBPD: Type = 880;
    pub const X86_INS_VHSUBPS: Type = 881;
    pub const X86_INS_VINSERTF128: Type = 882;
    pub const X86_INS_VINSERTF32X4: Type = 883;
    pub const X86_INS_VINSERTF64X4: Type = 884;
    pub const X86_INS_VINSERTI128: Type = 885;
    pub const X86_INS_VINSERTI32X4: Type = 886;
    pub const X86_INS_VINSERTI64X4: Type = 887;
    pub const X86_INS_VINSERTPS: Type = 888;
    pub const X86_INS_VLDDQU: Type = 889;
    pub const X86_INS_VLDMXCSR: Type = 890;
    pub const X86_INS_VMASKMOVDQU: Type = 891;
    pub const X86_INS_VMASKMOVPD: Type = 892;
    pub const X86_INS_VMASKMOVPS: Type = 893;
    pub const X86_INS_VMAXPD: Type = 894;
    pub const X86_INS_VMAXPS: Type = 895;
    pub const X86_INS_VMAXSD: Type = 896;
    pub const X86_INS_VMAXSS: Type = 897;
    pub const X86_INS_VMCALL: Type = 898;
    pub const X86_INS_VMCLEAR: Type = 899;
    pub const X86_INS_VMFUNC: Type = 900;
    pub const X86_INS_VMINPD: Type = 901;
    pub const X86_INS_VMINPS: Type = 902;
    pub const X86_INS_VMINSD: Type = 903;
    pub const X86_INS_VMINSS: Type = 904;
    pub const X86_INS_VMLAUNCH: Type = 905;
    pub const X86_INS_VMLOAD: Type = 906;
    pub const X86_INS_VMMCALL: Type = 907;
    pub const X86_INS_VMOVQ: Type = 908;
    pub const X86_INS_VMOVDDUP: Type = 909;
    pub const X86_INS_VMOVD: Type = 910;
    pub const X86_INS_VMOVDQA32: Type = 911;
    pub const X86_INS_VMOVDQA64: Type = 912;
    pub const X86_INS_VMOVDQA: Type = 913;
    pub const X86_INS_VMOVDQU16: Type = 914;
    pub const X86_INS_VMOVDQU32: Type = 915;
    pub const X86_INS_VMOVDQU64: Type = 916;
    pub const X86_INS_VMOVDQU8: Type = 917;
    pub const X86_INS_VMOVDQU: Type = 918;
    pub const X86_INS_VMOVHLPS: Type = 919;
    pub const X86_INS_VMOVHPD: Type = 920;
    pub const X86_INS_VMOVHPS: Type = 921;
    pub const X86_INS_VMOVLHPS: Type = 922;
    pub const X86_INS_VMOVLPD: Type = 923;
    pub const X86_INS_VMOVLPS: Type = 924;
    pub const X86_INS_VMOVMSKPD: Type = 925;
    pub const X86_INS_VMOVMSKPS: Type = 926;
    pub const X86_INS_VMOVNTDQA: Type = 927;
    pub const X86_INS_VMOVNTDQ: Type = 928;
    pub const X86_INS_VMOVNTPD: Type = 929;
    pub const X86_INS_VMOVNTPS: Type = 930;
    pub const X86_INS_VMOVSD: Type = 931;
    pub const X86_INS_VMOVSHDUP: Type = 932;
    pub const X86_INS_VMOVSLDUP: Type = 933;
    pub const X86_INS_VMOVSS: Type = 934;
    pub const X86_INS_VMOVUPD: Type = 935;
    pub const X86_INS_VMOVUPS: Type = 936;
    pub const X86_INS_VMPSADBW: Type = 937;
    pub const X86_INS_VMPTRLD: Type = 938;
    pub const X86_INS_VMPTRST: Type = 939;
    pub const X86_INS_VMREAD: Type = 940;
    pub const X86_INS_VMRESUME: Type = 941;
    pub const X86_INS_VMRUN: Type = 942;
    pub const X86_INS_VMSAVE: Type = 943;
    pub const X86_INS_VMULPD: Type = 944;
    pub const X86_INS_VMULPS: Type = 945;
    pub const X86_INS_VMULSD: Type = 946;
    pub const X86_INS_VMULSS: Type = 947;
    pub const X86_INS_VMWRITE: Type = 948;
    pub const X86_INS_VMXOFF: Type = 949;
    pub const X86_INS_VMXON: Type = 950;
    pub const X86_INS_VPABSB: Type = 951;
    pub const X86_INS_VPABSD: Type = 952;
    pub const X86_INS_VPABSQ: Type = 953;
    pub const X86_INS_VPABSW: Type = 954;
    pub const X86_INS_VPACKSSDW: Type = 955;
    pub const X86_INS_VPACKSSWB: Type = 956;
    pub const X86_INS_VPACKUSDW: Type = 957;
    pub const X86_INS_VPACKUSWB: Type = 958;
    pub const X86_INS_VPADDB: Type = 959;
    pub const X86_INS_VPADDD: Type = 960;
    pub const X86_INS_VPADDQ: Type = 961;
    pub const X86_INS_VPADDSB: Type = 962;
    pub const X86_INS_VPADDSW: Type = 963;
    pub const X86_INS_VPADDUSB: Type = 964;
    pub const X86_INS_VPADDUSW: Type = 965;
    pub const X86_INS_VPADDW: Type = 966;
    pub const X86_INS_VPALIGNR: Type = 967;
    pub const X86_INS_VPANDD: Type = 968;
    pub const X86_INS_VPANDND: Type = 969;
    pub const X86_INS_VPANDNQ: Type = 970;
    pub const X86_INS_VPANDN: Type = 971;
    pub const X86_INS_VPANDQ: Type = 972;
    pub const X86_INS_VPAND: Type = 973;
    pub const X86_INS_VPAVGB: Type = 974;
    pub const X86_INS_VPAVGW: Type = 975;
    pub const X86_INS_VPBLENDD: Type = 976;
    pub const X86_INS_VPBLENDMD: Type = 977;
    pub const X86_INS_VPBLENDMQ: Type = 978;
    pub const X86_INS_VPBLENDVB: Type = 979;
    pub const X86_INS_VPBLENDW: Type = 980;
    pub const X86_INS_VPBROADCASTB: Type = 981;
    pub const X86_INS_VPBROADCASTD: Type = 982;
    pub const X86_INS_VPBROADCASTMB2Q: Type = 983;
    pub const X86_INS_VPBROADCASTMW2D: Type = 984;
    pub const X86_INS_VPBROADCASTQ: Type = 985;
    pub const X86_INS_VPBROADCASTW: Type = 986;
    pub const X86_INS_VPCLMULQDQ: Type = 987;
    pub const X86_INS_VPCMOV: Type = 988;
    pub const X86_INS_VPCMP: Type = 989;
    pub const X86_INS_VPCMPD: Type = 990;
    pub const X86_INS_VPCMPEQB: Type = 991;
    pub const X86_INS_VPCMPEQD: Type = 992;
    pub const X86_INS_VPCMPEQQ: Type = 993;
    pub const X86_INS_VPCMPEQW: Type = 994;
    pub const X86_INS_VPCMPESTRI: Type = 995;
    pub const X86_INS_VPCMPESTRM: Type = 996;
    pub const X86_INS_VPCMPGTB: Type = 997;
    pub const X86_INS_VPCMPGTD: Type = 998;
    pub const X86_INS_VPCMPGTQ: Type = 999;
    pub const X86_INS_VPCMPGTW: Type = 1000;
    pub const X86_INS_VPCMPISTRI: Type = 1001;
    pub const X86_INS_VPCMPISTRM: Type = 1002;
    pub const X86_INS_VPCMPQ: Type = 1003;
    pub const X86_INS_VPCMPUD: Type = 1004;
    pub const X86_INS_VPCMPUQ: Type = 1005;
    pub const X86_INS_VPCOMB: Type = 1006;
    pub const X86_INS_VPCOMD: Type = 1007;
    pub const X86_INS_VPCOMQ: Type = 1008;
    pub const X86_INS_VPCOMUB: Type = 1009;
    pub const X86_INS_VPCOMUD: Type = 1010;
    pub const X86_INS_VPCOMUQ: Type = 1011;
    pub const X86_INS_VPCOMUW: Type = 1012;
    pub const X86_INS_VPCOMW: Type = 1013;
    pub const X86_INS_VPCONFLICTD: Type = 1014;
    pub const X86_INS_VPCONFLICTQ: Type = 1015;
    pub const X86_INS_VPERM2F128: Type = 1016;
    pub const X86_INS_VPERM2I128: Type = 1017;
    pub const X86_INS_VPERMD: Type = 1018;
    pub const X86_INS_VPERMI2D: Type = 1019;
    pub const X86_INS_VPERMI2PD: Type = 1020;
    pub const X86_INS_VPERMI2PS: Type = 1021;
    pub const X86_INS_VPERMI2Q: Type = 1022;
    pub const X86_INS_VPERMIL2PD: Type = 1023;
    pub const X86_INS_VPERMIL2PS: Type = 1024;
    pub const X86_INS_VPERMILPD: Type = 1025;
    pub const X86_INS_VPERMILPS: Type = 1026;
    pub const X86_INS_VPERMPD: Type = 1027;
    pub const X86_INS_VPERMPS: Type = 1028;
    pub const X86_INS_VPERMQ: Type = 1029;
    pub const X86_INS_VPERMT2D: Type = 1030;
    pub const X86_INS_VPERMT2PD: Type = 1031;
    pub const X86_INS_VPERMT2PS: Type = 1032;
    pub const X86_INS_VPERMT2Q: Type = 1033;
    pub const X86_INS_VPEXTRB: Type = 1034;
    pub const X86_INS_VPEXTRD: Type = 1035;
    pub const X86_INS_VPEXTRQ: Type = 1036;
    pub const X86_INS_VPEXTRW: Type = 1037;
    pub const X86_INS_VPGATHERDD: Type = 1038;
    pub const X86_INS_VPGATHERDQ: Type = 1039;
    pub const X86_INS_VPGATHERQD: Type = 1040;
    pub const X86_INS_VPGATHERQQ: Type = 1041;
    pub const X86_INS_VPHADDBD: Type = 1042;
    pub const X86_INS_VPHADDBQ: Type = 1043;
    pub const X86_INS_VPHADDBW: Type = 1044;
    pub const X86_INS_VPHADDDQ: Type = 1045;
    pub const X86_INS_VPHADDD: Type = 1046;
    pub const X86_INS_VPHADDSW: Type = 1047;
    pub const X86_INS_VPHADDUBD: Type = 1048;
    pub const X86_INS_VPHADDUBQ: Type = 1049;
    pub const X86_INS_VPHADDUBW: Type = 1050;
    pub const X86_INS_VPHADDUDQ: Type = 1051;
    pub const X86_INS_VPHADDUWD: Type = 1052;
    pub const X86_INS_VPHADDUWQ: Type = 1053;
    pub const X86_INS_VPHADDWD: Type = 1054;
    pub const X86_INS_VPHADDWQ: Type = 1055;
    pub const X86_INS_VPHADDW: Type = 1056;
    pub const X86_INS_VPHMINPOSUW: Type = 1057;
    pub const X86_INS_VPHSUBBW: Type = 1058;
    pub const X86_INS_VPHSUBDQ: Type = 1059;
    pub const X86_INS_VPHSUBD: Type = 1060;
    pub const X86_INS_VPHSUBSW: Type = 1061;
    pub const X86_INS_VPHSUBWD: Type = 1062;
    pub const X86_INS_VPHSUBW: Type = 1063;
    pub const X86_INS_VPINSRB: Type = 1064;
    pub const X86_INS_VPINSRD: Type = 1065;
    pub const X86_INS_VPINSRQ: Type = 1066;
    pub const X86_INS_VPINSRW: Type = 1067;
    pub const X86_INS_VPLZCNTD: Type = 1068;
    pub const X86_INS_VPLZCNTQ: Type = 1069;
    pub const X86_INS_VPMACSDD: Type = 1070;
    pub const X86_INS_VPMACSDQH: Type = 1071;
    pub const X86_INS_VPMACSDQL: Type = 1072;
    pub const X86_INS_VPMACSSDD: Type = 1073;
    pub const X86_INS_VPMACSSDQH: Type = 1074;
    pub const X86_INS_VPMACSSDQL: Type = 1075;
    pub const X86_INS_VPMACSSWD: Type = 1076;
    pub const X86_INS_VPMACSSWW: Type = 1077;
    pub const X86_INS_VPMACSWD: Type = 1078;
    pub const X86_INS_VPMACSWW: Type = 1079;
    pub const X86_INS_VPMADCSSWD: Type = 1080;
    pub const X86_INS_VPMADCSWD: Type = 1081;
    pub const X86_INS_VPMADDUBSW: Type = 1082;
    pub const X86_INS_VPMADDWD: Type = 1083;
    pub const X86_INS_VPMASKMOVD: Type = 1084;
    pub const X86_INS_VPMASKMOVQ: Type = 1085;
    pub const X86_INS_VPMAXSB: Type = 1086;
    pub const X86_INS_VPMAXSD: Type = 1087;
    pub const X86_INS_VPMAXSQ: Type = 1088;
    pub const X86_INS_VPMAXSW: Type = 1089;
    pub const X86_INS_VPMAXUB: Type = 1090;
    pub const X86_INS_VPMAXUD: Type = 1091;
    pub const X86_INS_VPMAXUQ: Type = 1092;
    pub const X86_INS_VPMAXUW: Type = 1093;
    pub const X86_INS_VPMINSB: Type = 1094;
    pub const X86_INS_VPMINSD: Type = 1095;
    pub const X86_INS_VPMINSQ: Type = 1096;
    pub const X86_INS_VPMINSW: Type = 1097;
    pub const X86_INS_VPMINUB: Type = 1098;
    pub const X86_INS_VPMINUD: Type = 1099;
    pub const X86_INS_VPMINUQ: Type = 1100;
    pub const X86_INS_VPMINUW: Type = 1101;
    pub const X86_INS_VPMOVDB: Type = 1102;
    pub const X86_INS_VPMOVDW: Type = 1103;
    pub const X86_INS_VPMOVMSKB: Type = 1104;
    pub const X86_INS_VPMOVQB: Type = 1105;
    pub const X86_INS_VPMOVQD: Type = 1106;
    pub const X86_INS_VPMOVQW: Type = 1107;
    pub const X86_INS_VPMOVSDB: Type = 1108;
    pub const X86_INS_VPMOVSDW: Type = 1109;
    pub const X86_INS_VPMOVSQB: Type = 1110;
    pub const X86_INS_VPMOVSQD: Type = 1111;
    pub const X86_INS_VPMOVSQW: Type = 1112;
    pub const X86_INS_VPMOVSXBD: Type = 1113;
    pub const X86_INS_VPMOVSXBQ: Type = 1114;
    pub const X86_INS_VPMOVSXBW: Type = 1115;
    pub const X86_INS_VPMOVSXDQ: Type = 1116;
    pub const X86_INS_VPMOVSXWD: Type = 1117;
    pub const X86_INS_VPMOVSXWQ: Type = 1118;
    pub const X86_INS_VPMOVUSDB: Type = 1119;
    pub const X86_INS_VPMOVUSDW: Type = 1120;
    pub const X86_INS_VPMOVUSQB: Type = 1121;
    pub const X86_INS_VPMOVUSQD: Type = 1122;
    pub const X86_INS_VPMOVUSQW: Type = 1123;
    pub const X86_INS_VPMOVZXBD: Type = 1124;
    pub const X86_INS_VPMOVZXBQ: Type = 1125;
    pub const X86_INS_VPMOVZXBW: Type = 1126;
    pub const X86_INS_VPMOVZXDQ: Type = 1127;
    pub const X86_INS_VPMOVZXWD: Type = 1128;
    pub const X86_INS_VPMOVZXWQ: Type = 1129;
    pub const X86_INS_VPMULDQ: Type = 1130;
    pub const X86_INS_VPMULHRSW: Type = 1131;
    pub const X86_INS_VPMULHUW: Type = 1132;
    pub const X86_INS_VPMULHW: Type = 1133;
    pub const X86_INS_VPMULLD: Type = 1134;
    pub const X86_INS_VPMULLW: Type = 1135;
    pub const X86_INS_VPMULUDQ: Type = 1136;
    pub const X86_INS_VPORD: Type = 1137;
    pub const X86_INS_VPORQ: Type = 1138;
    pub const X86_INS_VPOR: Type = 1139;
    pub const X86_INS_VPPERM: Type = 1140;
    pub const X86_INS_VPROTB: Type = 1141;
    pub const X86_INS_VPROTD: Type = 1142;
    pub const X86_INS_VPROTQ: Type = 1143;
    pub const X86_INS_VPROTW: Type = 1144;
    pub const X86_INS_VPSADBW: Type = 1145;
    pub const X86_INS_VPSCATTERDD: Type = 1146;
    pub const X86_INS_VPSCATTERDQ: Type = 1147;
    pub const X86_INS_VPSCATTERQD: Type = 1148;
    pub const X86_INS_VPSCATTERQQ: Type = 1149;
    pub const X86_INS_VPSHAB: Type = 1150;
    pub const X86_INS_VPSHAD: Type = 1151;
    pub const X86_INS_VPSHAQ: Type = 1152;
    pub const X86_INS_VPSHAW: Type = 1153;
    pub const X86_INS_VPSHLB: Type = 1154;
    pub const X86_INS_VPSHLD: Type = 1155;
    pub const X86_INS_VPSHLQ: Type = 1156;
    pub const X86_INS_VPSHLW: Type = 1157;
    pub const X86_INS_VPSHUFB: Type = 1158;
    pub const X86_INS_VPSHUFD: Type = 1159;
    pub const X86_INS_VPSHUFHW: Type = 1160;
    pub const X86_INS_VPSHUFLW: Type = 1161;
    pub const X86_INS_VPSIGNB: Type = 1162;
    pub const X86_INS_VPSIGND: Type = 1163;
    pub const X86_INS_VPSIGNW: Type = 1164;
    pub const X86_INS_VPSLLDQ: Type = 1165;
    pub const X86_INS_VPSLLD: Type = 1166;
    pub const X86_INS_VPSLLQ: Type = 1167;
    pub const X86_INS_VPSLLVD: Type = 1168;
    pub const X86_INS_VPSLLVQ: Type = 1169;
    pub const X86_INS_VPSLLW: Type = 1170;
    pub const X86_INS_VPSRAD: Type = 1171;
    pub const X86_INS_VPSRAQ: Type = 1172;
    pub const X86_INS_VPSRAVD: Type = 1173;
    pub const X86_INS_VPSRAVQ: Type = 1174;
    pub const X86_INS_VPSRAW: Type = 1175;
    pub const X86_INS_VPSRLDQ: Type = 1176;
    pub const X86_INS_VPSRLD: Type = 1177;
    pub const X86_INS_VPSRLQ: Type = 1178;
    pub const X86_INS_VPSRLVD: Type = 1179;
    pub const X86_INS_VPSRLVQ: Type = 1180;
    pub const X86_INS_VPSRLW: Type = 1181;
    pub const X86_INS_VPSUBB: Type = 1182;
    pub const X86_INS_VPSUBD: Type = 1183;
    pub const X86_INS_VPSUBQ: Type = 1184;
    pub const X86_INS_VPSUBSB: Type = 1185;
    pub const X86_INS_VPSUBSW: Type = 1186;
    pub const X86_INS_VPSUBUSB: Type = 1187;
    pub const X86_INS_VPSUBUSW: Type = 1188;
    pub const X86_INS_VPSUBW: Type = 1189;
    pub const X86_INS_VPTESTMD: Type = 1190;
    pub const X86_INS_VPTESTMQ: Type = 1191;
    pub const X86_INS_VPTESTNMD: Type = 1192;
    pub const X86_INS_VPTESTNMQ: Type = 1193;
    pub const X86_INS_VPTEST: Type = 1194;
    pub const X86_INS_VPUNPCKHBW: Type = 1195;
    pub const X86_INS_VPUNPCKHDQ: Type = 1196;
    pub const X86_INS_VPUNPCKHQDQ: Type = 1197;
    pub const X86_INS_VPUNPCKHWD: Type = 1198;
    pub const X86_INS_VPUNPCKLBW: Type = 1199;
    pub const X86_INS_VPUNPCKLDQ: Type = 1200;
    pub const X86_INS_VPUNPCKLQDQ: Type = 1201;
    pub const X86_INS_VPUNPCKLWD: Type = 1202;
    pub const X86_INS_VPXORD: Type = 1203;
    pub const X86_INS_VPXORQ: Type = 1204;
    pub const X86_INS_VPXOR: Type = 1205;
    pub const X86_INS_VRCP14PD: Type = 1206;
    pub const X86_INS_VRCP14PS: Type = 1207;
    pub const X86_INS_VRCP14SD: Type = 1208;
    pub const X86_INS_VRCP14SS: Type = 1209;
    pub const X86_INS_VRCP28PD: Type = 1210;
    pub const X86_INS_VRCP28PS: Type = 1211;
    pub const X86_INS_VRCP28SD: Type = 1212;
    pub const X86_INS_VRCP28SS: Type = 1213;
    pub const X86_INS_VRCPPS: Type = 1214;
    pub const X86_INS_VRCPSS: Type = 1215;
    pub const X86_INS_VRNDSCALEPD: Type = 1216;
    pub const X86_INS_VRNDSCALEPS: Type = 1217;
    pub const X86_INS_VRNDSCALESD: Type = 1218;
    pub const X86_INS_VRNDSCALESS: Type = 1219;
    pub const X86_INS_VROUNDPD: Type = 1220;
    pub const X86_INS_VROUNDPS: Type = 1221;
    pub const X86_INS_VROUNDSD: Type = 1222;
    pub const X86_INS_VROUNDSS: Type = 1223;
    pub const X86_INS_VRSQRT14PD: Type = 1224;
    pub const X86_INS_VRSQRT14PS: Type = 1225;
    pub const X86_INS_VRSQRT14SD: Type = 1226;
    pub const X86_INS_VRSQRT14SS: Type = 1227;
    pub const X86_INS_VRSQRT28PD: Type = 1228;
    pub const X86_INS_VRSQRT28PS: Type = 1229;
    pub const X86_INS_VRSQRT28SD: Type = 1230;
    pub const X86_INS_VRSQRT28SS: Type = 1231;
    pub const X86_INS_VRSQRTPS: Type = 1232;
    pub const X86_INS_VRSQRTSS: Type = 1233;
    pub const X86_INS_VSCATTERDPD: Type = 1234;
    pub const X86_INS_VSCATTERDPS: Type = 1235;
    pub const X86_INS_VSCATTERPF0DPD: Type = 1236;
    pub const X86_INS_VSCATTERPF0DPS: Type = 1237;
    pub const X86_INS_VSCATTERPF0QPD: Type = 1238;
    pub const X86_INS_VSCATTERPF0QPS: Type = 1239;
    pub const X86_INS_VSCATTERPF1DPD: Type = 1240;
    pub const X86_INS_VSCATTERPF1DPS: Type = 1241;
    pub const X86_INS_VSCATTERPF1QPD: Type = 1242;
    pub const X86_INS_VSCATTERPF1QPS: Type = 1243;
    pub const X86_INS_VSCATTERQPD: Type = 1244;
    pub const X86_INS_VSCATTERQPS: Type = 1245;
    pub const X86_INS_VSHUFPD: Type = 1246;
    pub const X86_INS_VSHUFPS: Type = 1247;
    pub const X86_INS_VSQRTPD: Type = 1248;
    pub const X86_INS_VSQRTPS: Type = 1249;
    pub const X86_INS_VSQRTSD: Type = 1250;
    pub const X86_INS_VSQRTSS: Type = 1251;
    pub const X86_INS_VSTMXCSR: Type = 1252;
    pub const X86_INS_VSUBPD: Type = 1253;
    pub const X86_INS_VSUBPS: Type = 1254;
    pub const X86_INS_VSUBSD: Type = 1255;
    pub const X86_INS_VSUBSS: Type = 1256;
    pub const X86_INS_VTESTPD: Type = 1257;
    pub const X86_INS_VTESTPS: Type = 1258;
    pub const X86_INS_VUNPCKHPD: Type = 1259;
    pub const X86_INS_VUNPCKHPS: Type = 1260;
    pub const X86_INS_VUNPCKLPD: Type = 1261;
    pub const X86_INS_VUNPCKLPS: Type = 1262;
    pub const X86_INS_VZEROALL: Type = 1263;
    pub const X86_INS_VZEROUPPER: Type = 1264;
    pub const X86_INS_WAIT: Type = 1265;
    pub const X86_INS_WBINVD: Type = 1266;
    pub const X86_INS_WRFSBASE: Type = 1267;
    pub const X86_INS_WRGSBASE: Type = 1268;
    pub const X86_INS_WRMSR: Type = 1269;
    pub const X86_INS_XABORT: Type = 1270;
    pub const X86_INS_XACQUIRE: Type = 1271;
    pub const X86_INS_XBEGIN: Type = 1272;
    pub const X86_INS_XCHG: Type = 1273;
    pub const X86_INS_FXCH: Type = 1274;
    pub const X86_INS_XCRYPTCBC: Type = 1275;
    pub const X86_INS_XCRYPTCFB: Type = 1276;
    pub const X86_INS_XCRYPTCTR: Type = 1277;
    pub const X86_INS_XCRYPTECB: Type = 1278;
    pub const X86_INS_XCRYPTOFB: Type = 1279;
    pub const X86_INS_XEND: Type = 1280;
    pub const X86_INS_XGETBV: Type = 1281;
    pub const X86_INS_XLATB: Type = 1282;
    pub const X86_INS_XRELEASE: Type = 1283;
    pub const X86_INS_XRSTOR: Type = 1284;
    pub const X86_INS_XRSTOR64: Type = 1285;
    pub const X86_INS_XSAVE: Type = 1286;
    pub const X86_INS_XSAVE64: Type = 1287;
    pub const X86_INS_XSAVEOPT: Type = 1288;
    pub const X86_INS_XSAVEOPT64: Type = 1289;
    pub const X86_INS_XSETBV: Type = 1290;
    pub const X86_INS_XSHA1: Type = 1291;
    pub const X86_INS_XSHA256: Type = 1292;
    pub const X86_INS_XSTORE: Type = 1293;
    pub const X86_INS_XTEST: Type = 1294;
    pub const X86_INS_ENDING: Type = 1295;
}
pub mod x86_insn_group {
    pub type Type = u32;
    pub const X86_GRP_INVALID: Type = 0;
    pub const X86_GRP_JUMP: Type = 1;
    pub const X86_GRP_CALL: Type = 2;
    pub const X86_GRP_RET: Type = 3;
    pub const X86_GRP_INT: Type = 4;
    pub const X86_GRP_IRET: Type = 5;
    pub const X86_GRP_VM: Type = 128;
    pub const X86_GRP_3DNOW: Type = 129;
    pub const X86_GRP_AES: Type = 130;
    pub const X86_GRP_ADX: Type = 131;
    pub const X86_GRP_AVX: Type = 132;
    pub const X86_GRP_AVX2: Type = 133;
    pub const X86_GRP_AVX512: Type = 134;
    pub const X86_GRP_BMI: Type = 135;
    pub const X86_GRP_BMI2: Type = 136;
    pub const X86_GRP_CMOV: Type = 137;
    pub const X86_GRP_F16C: Type = 138;
    pub const X86_GRP_FMA: Type = 139;
    pub const X86_GRP_FMA4: Type = 140;
    pub const X86_GRP_FSGSBASE: Type = 141;
    pub const X86_GRP_HLE: Type = 142;
    pub const X86_GRP_MMX: Type = 143;
    pub const X86_GRP_MODE32: Type = 144;
    pub const X86_GRP_MODE64: Type = 145;
    pub const X86_GRP_RTM: Type = 146;
    pub const X86_GRP_SHA: Type = 147;
    pub const X86_GRP_SSE1: Type = 148;
    pub const X86_GRP_SSE2: Type = 149;
    pub const X86_GRP_SSE3: Type = 150;
    pub const X86_GRP_SSE41: Type = 151;
    pub const X86_GRP_SSE42: Type = 152;
    pub const X86_GRP_SSE4A: Type = 153;
    pub const X86_GRP_SSSE3: Type = 154;
    pub const X86_GRP_PCLMUL: Type = 155;
    pub const X86_GRP_XOP: Type = 156;
    pub const X86_GRP_CDI: Type = 157;
    pub const X86_GRP_ERI: Type = 158;
    pub const X86_GRP_TBM: Type = 159;
    pub const X86_GRP_16BITMODE: Type = 160;
    pub const X86_GRP_NOT64BITMODE: Type = 161;
    pub const X86_GRP_SGX: Type = 162;
    pub const X86_GRP_DQI: Type = 163;
    pub const X86_GRP_BWI: Type = 164;
    pub const X86_GRP_PFI: Type = 165;
    pub const X86_GRP_VLX: Type = 166;
    pub const X86_GRP_SMAP: Type = 167;
    pub const X86_GRP_NOVLX: Type = 168;
    pub const X86_GRP_ENDING: Type = 169;
}
pub mod xcore_op_type {
    pub type Type = u32;
    pub const XCORE_OP_INVALID: Type = 0;
    pub const XCORE_OP_REG: Type = 1;
    pub const XCORE_OP_IMM: Type = 2;
    pub const XCORE_OP_MEM: Type = 3;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct xcore_op_mem {
    pub base: u8,
    pub index: u8,
    pub disp: i32,
    pub direct: ::std::os::raw::c_int,
}
impl Clone for xcore_op_mem {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct cs_xcore_op {
    pub type_: xcore_op_type::Type,
    pub __bindgen_anon_1: cs_xcore_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy)]
pub union cs_xcore_op__bindgen_ty_1 {
    pub reg: ::std::os::raw::c_uint,
    pub imm: i32,
    pub mem: xcore_op_mem,
    _bindgen_union_align: [u32; 3usize],
}
impl Clone for cs_xcore_op__bindgen_ty_1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::fmt::Debug for cs_xcore_op__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "cs_xcore_op__bindgen_ty_1 {{ union }}")
    }
}
impl Clone for cs_xcore_op {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::fmt::Debug for cs_xcore_op {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "cs_xcore_op {{ type: {:?}, __bindgen_anon_1: {:?} }}",
            self.type_, self.__bindgen_anon_1
        )
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct cs_xcore {
    pub op_count: u8,
    pub operands: [cs_xcore_op; 8usize],
}
impl Clone for cs_xcore {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::fmt::Debug for cs_xcore {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "cs_xcore {{ op_count: {:?}, operands: {:?} }}",
            self.op_count, self.operands
        )
    }
}
pub mod xcore_reg {
    pub type Type = u32;
    pub const XCORE_REG_INVALID: Type = 0;
    pub const XCORE_REG_CP: Type = 1;
    pub const XCORE_REG_DP: Type = 2;
    pub const XCORE_REG_LR: Type = 3;
    pub const XCORE_REG_SP: Type = 4;
    pub const XCORE_REG_R0: Type = 5;
    pub const XCORE_REG_R1: Type = 6;
    pub const XCORE_REG_R2: Type = 7;
    pub const XCORE_REG_R3: Type = 8;
    pub const XCORE_REG_R4: Type = 9;
    pub const XCORE_REG_R5: Type = 10;
    pub const XCORE_REG_R6: Type = 11;
    pub const XCORE_REG_R7: Type = 12;
    pub const XCORE_REG_R8: Type = 13;
    pub const XCORE_REG_R9: Type = 14;
    pub const XCORE_REG_R10: Type = 15;
    pub const XCORE_REG_R11: Type = 16;
    pub const XCORE_REG_PC: Type = 17;
    pub const XCORE_REG_SCP: Type = 18;
    pub const XCORE_REG_SSR: Type = 19;
    pub const XCORE_REG_ET: Type = 20;
    pub const XCORE_REG_ED: Type = 21;
    pub const XCORE_REG_SED: Type = 22;
    pub const XCORE_REG_KEP: Type = 23;
    pub const XCORE_REG_KSP: Type = 24;
    pub const XCORE_REG_ID: Type = 25;
    pub const XCORE_REG_ENDING: Type = 26;
}
pub mod xcore_insn {
    pub type Type = u32;
    pub const XCORE_INS_INVALID: Type = 0;
    pub const XCORE_INS_ADD: Type = 1;
    pub const XCORE_INS_ANDNOT: Type = 2;
    pub const XCORE_INS_AND: Type = 3;
    pub const XCORE_INS_ASHR: Type = 4;
    pub const XCORE_INS_BAU: Type = 5;
    pub const XCORE_INS_BITREV: Type = 6;
    pub const XCORE_INS_BLA: Type = 7;
    pub const XCORE_INS_BLAT: Type = 8;
    pub const XCORE_INS_BL: Type = 9;
    pub const XCORE_INS_BF: Type = 10;
    pub const XCORE_INS_BT: Type = 11;
    pub const XCORE_INS_BU: Type = 12;
    pub const XCORE_INS_BRU: Type = 13;
    pub const XCORE_INS_BYTEREV: Type = 14;
    pub const XCORE_INS_CHKCT: Type = 15;
    pub const XCORE_INS_CLRE: Type = 16;
    pub const XCORE_INS_CLRPT: Type = 17;
    pub const XCORE_INS_CLRSR: Type = 18;
    pub const XCORE_INS_CLZ: Type = 19;
    pub const XCORE_INS_CRC8: Type = 20;
    pub const XCORE_INS_CRC32: Type = 21;
    pub const XCORE_INS_DCALL: Type = 22;
    pub const XCORE_INS_DENTSP: Type = 23;
    pub const XCORE_INS_DGETREG: Type = 24;
    pub const XCORE_INS_DIVS: Type = 25;
    pub const XCORE_INS_DIVU: Type = 26;
    pub const XCORE_INS_DRESTSP: Type = 27;
    pub const XCORE_INS_DRET: Type = 28;
    pub const XCORE_INS_ECALLF: Type = 29;
    pub const XCORE_INS_ECALLT: Type = 30;
    pub const XCORE_INS_EDU: Type = 31;
    pub const XCORE_INS_EEF: Type = 32;
    pub const XCORE_INS_EET: Type = 33;
    pub const XCORE_INS_EEU: Type = 34;
    pub const XCORE_INS_ENDIN: Type = 35;
    pub const XCORE_INS_ENTSP: Type = 36;
    pub const XCORE_INS_EQ: Type = 37;
    pub const XCORE_INS_EXTDP: Type = 38;
    pub const XCORE_INS_EXTSP: Type = 39;
    pub const XCORE_INS_FREER: Type = 40;
    pub const XCORE_INS_FREET: Type = 41;
    pub const XCORE_INS_GETD: Type = 42;
    pub const XCORE_INS_GET: Type = 43;
    pub const XCORE_INS_GETN: Type = 44;
    pub const XCORE_INS_GETR: Type = 45;
    pub const XCORE_INS_GETSR: Type = 46;
    pub const XCORE_INS_GETST: Type = 47;
    pub const XCORE_INS_GETTS: Type = 48;
    pub const XCORE_INS_INCT: Type = 49;
    pub const XCORE_INS_INIT: Type = 50;
    pub const XCORE_INS_INPW: Type = 51;
    pub const XCORE_INS_INSHR: Type = 52;
    pub const XCORE_INS_INT: Type = 53;
    pub const XCORE_INS_IN: Type = 54;
    pub const XCORE_INS_KCALL: Type = 55;
    pub const XCORE_INS_KENTSP: Type = 56;
    pub const XCORE_INS_KRESTSP: Type = 57;
    pub const XCORE_INS_KRET: Type = 58;
    pub const XCORE_INS_LADD: Type = 59;
    pub const XCORE_INS_LD16S: Type = 60;
    pub const XCORE_INS_LD8U: Type = 61;
    pub const XCORE_INS_LDA16: Type = 62;
    pub const XCORE_INS_LDAP: Type = 63;
    pub const XCORE_INS_LDAW: Type = 64;
    pub const XCORE_INS_LDC: Type = 65;
    pub const XCORE_INS_LDW: Type = 66;
    pub const XCORE_INS_LDIVU: Type = 67;
    pub const XCORE_INS_LMUL: Type = 68;
    pub const XCORE_INS_LSS: Type = 69;
    pub const XCORE_INS_LSUB: Type = 70;
    pub const XCORE_INS_LSU: Type = 71;
    pub const XCORE_INS_MACCS: Type = 72;
    pub const XCORE_INS_MACCU: Type = 73;
    pub const XCORE_INS_MJOIN: Type = 74;
    pub const XCORE_INS_MKMSK: Type = 75;
    pub const XCORE_INS_MSYNC: Type = 76;
    pub const XCORE_INS_MUL: Type = 77;
    pub const XCORE_INS_NEG: Type = 78;
    pub const XCORE_INS_NOT: Type = 79;
    pub const XCORE_INS_OR: Type = 80;
    pub const XCORE_INS_OUTCT: Type = 81;
    pub const XCORE_INS_OUTPW: Type = 82;
    pub const XCORE_INS_OUTSHR: Type = 83;
    pub const XCORE_INS_OUTT: Type = 84;
    pub const XCORE_INS_OUT: Type = 85;
    pub const XCORE_INS_PEEK: Type = 86;
    pub const XCORE_INS_REMS: Type = 87;
    pub const XCORE_INS_REMU: Type = 88;
    pub const XCORE_INS_RETSP: Type = 89;
    pub const XCORE_INS_SETCLK: Type = 90;
    pub const XCORE_INS_SET: Type = 91;
    pub const XCORE_INS_SETC: Type = 92;
    pub const XCORE_INS_SETD: Type = 93;
    pub const XCORE_INS_SETEV: Type = 94;
    pub const XCORE_INS_SETN: Type = 95;
    pub const XCORE_INS_SETPSC: Type = 96;
    pub const XCORE_INS_SETPT: Type = 97;
    pub const XCORE_INS_SETRDY: Type = 98;
    pub const XCORE_INS_SETSR: Type = 99;
    pub const XCORE_INS_SETTW: Type = 100;
    pub const XCORE_INS_SETV: Type = 101;
    pub const XCORE_INS_SEXT: Type = 102;
    pub const XCORE_INS_SHL: Type = 103;
    pub const XCORE_INS_SHR: Type = 104;
    pub const XCORE_INS_SSYNC: Type = 105;
    pub const XCORE_INS_ST16: Type = 106;
    pub const XCORE_INS_ST8: Type = 107;
    pub const XCORE_INS_STW: Type = 108;
    pub const XCORE_INS_SUB: Type = 109;
    pub const XCORE_INS_SYNCR: Type = 110;
    pub const XCORE_INS_TESTCT: Type = 111;
    pub const XCORE_INS_TESTLCL: Type = 112;
    pub const XCORE_INS_TESTWCT: Type = 113;
    pub const XCORE_INS_TSETMR: Type = 114;
    pub const XCORE_INS_START: Type = 115;
    pub const XCORE_INS_WAITEF: Type = 116;
    pub const XCORE_INS_WAITET: Type = 117;
    pub const XCORE_INS_WAITEU: Type = 118;
    pub const XCORE_INS_XOR: Type = 119;
    pub const XCORE_INS_ZEXT: Type = 120;
    pub const XCORE_INS_ENDING: Type = 121;
}
pub mod xcore_insn_group {
    pub type Type = u32;
    pub const XCORE_GRP_INVALID: Type = 0;
    pub const XCORE_GRP_JUMP: Type = 1;
    pub const XCORE_GRP_ENDING: Type = 2;
}
#[repr(C)]
#[derive(Copy)]
/// NOTE: All information in cs_detail is only available when CS_OPT_DETAIL = CS_OPT_ON
pub struct cs_detail {
    /// list of implicit registers read by this insn
    pub regs_read: [u8; 12usize],
    /// number of implicit registers read by this insn
    pub regs_read_count: u8,
    /// list of implicit registers modified by this insn
    pub regs_write: [u8; 20usize],
    /// number of implicit registers modified by this insn
    pub regs_write_count: u8,
    /// list of group this instruction belong to
    pub groups: [u8; 8usize],
    /// number of groups this insn belongs to
    pub groups_count: u8,
    /// Architecture-specific instruction info
    pub __bindgen_anon_1: cs_detail__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy)]
pub union cs_detail__bindgen_ty_1 {
    pub x86: cs_x86,
    pub arm64: cs_arm64,
    pub arm: cs_arm,
    pub mips: cs_mips,
    pub ppc: cs_ppc,
    pub sparc: cs_sparc,
    pub sysz: cs_sysz,
    pub xcore: cs_xcore,
    _bindgen_union_align: [u64; 185usize],
}
impl Clone for cs_detail__bindgen_ty_1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::fmt::Debug for cs_detail__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "cs_detail__bindgen_ty_1 {{ union }}")
    }
}
impl Clone for cs_detail {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::fmt::Debug for cs_detail {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write ! ( f , "cs_detail {{ regs_read: {:?}, regs_read_count: {:?}, regs_write: {:?}, regs_write_count: {:?}, groups: {:?}, groups_count: {:?}, __bindgen_anon_1: {:?} }}" , self . regs_read , self . regs_read_count , self . regs_write , self . regs_write_count , self . groups , self . groups_count , self . __bindgen_anon_1 )
    }
}
#[repr(C)]
#[derive(Copy)]
/// Detail information of disassembled instruction
pub struct cs_insn {
    /// Instruction ID (basically a numeric ID for the instruction mnemonic)
    ///
    /// Find the instruction id in the '[ARCH]_insn' enum in the header file
    /// of corresponding architecture, such as 'arm_insn' in arm.h for ARM,
    /// 'x86_insn' in x86.h for X86, etc...
    ///
    /// This information is available even when CS_OPT_DETAIL = CS_OPT_OFF
    ///
    /// NOTE: in Skipdata mode, "data" instruction has 0 for this id field.
    pub id: ::std::os::raw::c_uint,
    /// Address (EIP) of this instruction
    ///
    /// This information is available even when CS_OPT_DETAIL = CS_OPT_OFF
    pub address: u64,
    /// Size of this instruction
    ///
    /// This information is available even when CS_OPT_DETAIL = CS_OPT_OFF
    pub size: u16,
    /// Machine bytes of this instruction, with number of bytes indicated by @size above
    ///
    /// This information is available even when CS_OPT_DETAIL = CS_OPT_OFF
    pub bytes: [u8; 16usize],
    /// Ascii text of instruction mnemonic
    ///
    /// This information is available even when CS_OPT_DETAIL = CS_OPT_OFF
    pub mnemonic: [::std::os::raw::c_char; 32usize],
    /// Ascii text of instruction operands
    ///
    /// This information is available even when CS_OPT_DETAIL = CS_OPT_OFF
    pub op_str: [::std::os::raw::c_char; 160usize],
    /// Pointer to cs_detail.
    /// NOTE: detail pointer is only valid when both requirements below are met:
    ///
    /// 1. CS_OP_DETAIL = CS_OPT_ON
    /// 2. Engine is not in Skipdata mode (CS_OP_SKIPDATA option set to CS_OPT_ON)
    ///
    /// NOTE 2: when in Skipdata mode, or when detail mode is OFF, even if this pointer
    ///     is not NULL, its content is still irrelevant.
    pub detail: *mut cs_detail,
}
impl Clone for cs_insn {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::fmt::Debug for cs_insn {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write ! ( f , "cs_insn {{ id: {:?}, address: {:?}, size: {:?}, bytes: {:?}, mnemonic: [{}], op_str: [{}], detail: {:?} }}" , self . id , self . address , self . size , self . bytes , self . mnemonic . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) , self . op_str . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) , self . detail )
    }
}
pub mod cs_err {
    pub type Type = u32;
    pub const CS_ERR_OK: Type = 0;
    pub const CS_ERR_MEM: Type = 1;
    pub const CS_ERR_ARCH: Type = 2;
    pub const CS_ERR_HANDLE: Type = 3;
    pub const CS_ERR_CSH: Type = 4;
    pub const CS_ERR_MODE: Type = 5;
    pub const CS_ERR_OPTION: Type = 6;
    pub const CS_ERR_DETAIL: Type = 7;
    pub const CS_ERR_MEMSETUP: Type = 8;
    pub const CS_ERR_VERSION: Type = 9;
    pub const CS_ERR_DIET: Type = 10;
    pub const CS_ERR_SKIPDATA: Type = 11;
    pub const CS_ERR_X86_ATT: Type = 12;
    pub const CS_ERR_X86_INTEL: Type = 13;
}
extern "C" {
    /// Return combined API version & major and minor version numbers.
    ///
    /// `major`: major number of API version
    /// `minor`: minor number of API version
    ///
    /// return hexical number as (major << 8 | minor), which encodes both
    /// major & minor versions.
    ///
    /// NOTE: This returned value can be compared with version number made
    /// with macro CS_MAKE_VERSION
    ///
    /// For example, second API version would return 1 in @major, and 1 in @minor
    /// The return value would be 0x0101
    ///
    /// NOTE: if you only care about returned value, but not major and minor values,
    /// set both `major` & `minor` arguments to NULL.
    ///
    pub fn cs_version(
        major: *mut ::std::os::raw::c_int,
        minor: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    /// This API can be used to either ask for archs supported by this library,
    /// or check to see if the library was compile with 'diet' option (or called
    /// in 'diet' mode).
    ///
    /// To check if a particular arch is supported by this library, set @query to
    /// arch mode (CS_ARCH_* value).
    /// To verify if this library supports all the archs, use CS_ARCH_ALL.
    ///
    /// To check if this library is in 'diet' mode, set @query to CS_SUPPORT_DIET.
    ///
    /// return True if this library supports the given arch, or in 'diet' mode.
    ///
    pub fn cs_support(query: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    /// Initialize CS handle: this must be done before any usage of CS.
    ///
    /// * `arch`: architecture type (CS_ARCH_*)
    /// * `mode`: hardware mode. This is combined of CS_MODE_*
    /// * `handle`: pointer to handle, which will be updated at return time
    ///
    /// return CS_ERR_OK on success, or other value on failure (refer to cs_err enum
    /// for detailed error).
    ///
    pub fn cs_open(arch: cs_arch, mode: cs_mode, handle: *mut csh) -> cs_err::Type;
}
extern "C" {
    /// Close CS handle: MUST do to release the handle when it is not used anymore.
    /// NOTE: this must be only called when there is no longer usage of Capstone,
    /// not even access to cs_insn array. The reason is the this API releases some
    /// cached memory, thus access to any Capstone API after cs_close() might crash
    /// your application.
    ///
    /// In fact, this API invalidate `handle` by ZERO out its value (i.e *handle = 0).
    ///
    /// `handle`: pointer to a handle returned by cs_open()
    ///
    /// return CS_ERR_OK on success, or other value on failure (refer to cs_err enum
    /// for detailed error).
    ///
    pub fn cs_close(handle: *mut csh) -> cs_err::Type;
}
extern "C" {
    /// Set option for disassembling engine at runtime
    ///
    /// * `handle`: handle returned by cs_open()
    /// * `type`: type of option to be set
    /// * `value`: option value corresponding with @type
    ///
    /// return: CS_ERR_OK on success, or other value on failure.
    /// Refer to cs_err enum for detailed error.
    ///
    /// NOTE: in the case of CS_OPT_MEM, handle's value can be anything,
    /// so that cs_option(handle, CS_OPT_MEM, value) can (i.e must) be called
    /// even before cs_open()
    ///
    pub fn cs_option(handle: csh, type_: cs_opt_type, value: usize) -> cs_err::Type;
}
extern "C" {
    /// Report the last error number when some API function fail.
    /// Like glibc's errno, cs_errno might not retain its old value once accessed.
    ///
    /// `handle`: handle returned by cs_open()
    ///
    /// return: error code of cs_err enum type (CS_ERR_*, see above)
    ///
    pub fn cs_errno(handle: csh) -> cs_err::Type;
}
extern "C" {
    /// Return a string describing given error code.
    ///
    /// `code`: error code (see CS_ERR_* above)
    ///
    /// return: returns a pointer to a string that describes the error code
    /// passed in the argument @code
    ///
    pub fn cs_strerror(code: cs_err::Type) -> *const ::std::os::raw::c_char;
}
extern "C" {
    /// Disassemble binary code, given the code buffer, size, address and number
    /// of instructions to be decoded.
    /// This API dynamically allocate memory to contain disassembled instruction.
    /// Resulted instructions will be put into *`insn`
    ///
    /// NOTE 1: this API will automatically determine memory needed to contain
    /// output disassembled instructions in `insn`.
    ///
    /// NOTE 2: caller must free the allocated memory itself to avoid memory leaking.
    ///
    /// NOTE 3: for system with scarce memory to be dynamically allocated such as
    /// OS kernel or firmware, the API cs_disasm_iter() might be a better choice than
    /// cs_disasm(). The reason is that with cs_disasm(), based on limited available
    /// memory, we have to calculate in advance how many instructions to be disassembled,
    /// which complicates things. This is especially troublesome for the case `count`=0,
    /// when cs_disasm() runs uncontrollably (until either end of input buffer, or
    /// when it encounters an invalid instruction).
    ///
    /// `handle`: handle returned by cs_open()
    ///
    /// `code`: buffer containing raw binary code to be disassembled.
    ///
    /// `code_size`: size of the above code buffer.
    ///
    /// `address`: address of the first instruction in given raw code buffer.
    ///
    /// `insn`: array of instructions filled in by this API. NOTE: `insn` will be allocated by this function, and should be freed with cs_free() API.
    ///
    /// `count`: number of instructions to be disassembled, or 0 to get all of them
    ///
    /// return: the number of successfully disassembled instructions,
    /// or 0 if this function failed to disassemble the given code
    ///
    /// On failure, call cs_errno() for error code.
    ///
    pub fn cs_disasm(
        handle: csh,
        code: *const u8,
        code_size: usize,
        address: u64,
        count: usize,
        insn: *mut *mut cs_insn,
    ) -> usize;
}
extern "C" {

    /// Deprecated function - to be retired in the next version!
    ///
    /// Use cs_disasm() instead of cs_disasm_ex()
    pub fn cs_disasm_ex(
        handle: csh,
        code: *const u8,
        code_size: usize,
        address: u64,
        count: usize,
        insn: *mut *mut cs_insn,
    ) -> usize;
}
extern "C" {
    /// Free memory allocated by cs_malloc() or cs_disasm() (argument @insn)
    ///
    /// `insn`: pointer returned by @insn argument in cs_disasm() or cs_malloc()
    /// `count`: number of cs_insn structures returned by cs_disasm(), or 1
    /// to free memory allocated by cs_malloc().
    ///
    pub fn cs_free(insn: *mut cs_insn, count: usize);
}
extern "C" {
    /// Allocate memory for 1 instruction to be used by cs_disasm_iter().
    ///
    /// `handle`: handle returned by cs_open()
    ///
    /// NOTE: when no longer in use, you can reclaim the memory allocated for
    /// this instruction with cs_free(insn, 1)
    ///
    pub fn cs_malloc(handle: csh) -> *mut cs_insn;
}
extern "C" {
    /// Fast API to disassemble binary code, given the code buffer, size, address
    /// and number of instructions to be decoded.
    /// This API put the resulted instruction into a given cache in @insn.
    /// See tests/test_iter.c for sample code demonstrating this API.
    ///
    /// NOTE 1: this API will update `code`, `size` & `address` to point to the next
    /// instruction in the input buffer. Therefore, it is convenient to use
    /// cs_disasm_iter() inside a loop to quickly iterate all the instructions.
    /// While decoding one instruction at a time can also be achieved with
    /// cs_disasm(count=1), some benchmarks shown that cs_disasm_iter() can be 30%
    /// faster on random input.
    ///
    /// NOTE 2: the cache in `insn` can be created with cs_malloc() API.
    ///
    /// NOTE 3: for system with scarce memory to be dynamically allocated such as
    /// OS kernel or firmware, this API is recommended over cs_disasm(), which
    /// allocates memory based on the number of instructions to be disassembled.
    /// The reason is that with cs_disasm(), based on limited available memory,
    /// we have to calculate in advance how many instructions to be disassembled,
    /// which complicates things. This is especially troublesome for the case
    /// `count`=0, when cs_disasm() runs uncontrollably (until either end of input
    /// buffer, or when it encounters an invalid instruction).
    ///
    /// * `handle`: handle returned by cs_open()
    /// * `code`: buffer containing raw binary code to be disassembled
    /// * `code_size`: size of above code
    /// * `address`: address of the first insn in given raw code buffer
    /// * `insn`: pointer to instruction to be filled in by this API.
    ///
    /// return: true if this API successfully decode 1 instruction,
    /// or false otherwise.
    ///
    /// On failure, call cs_errno() for error code.
    ///
    pub fn cs_disasm_iter(
        handle: csh,
        code: *mut *const u8,
        size: *mut usize,
        address: *mut u64,
        insn: *mut cs_insn,
    ) -> bool;
}
extern "C" {
    /// Return friendly name of register in a string.
    /// Find the instruction id from header file of corresponding architecture (arm.h for ARM,
    /// x86.h for X86, ...)
    ///
    /// WARN: when in 'diet' mode, this API is irrelevant because engine does not
    /// store register name.
    ///
    /// * `handle`: handle returned by cs_open()
    /// * `reg_id`: register id
    ///
    /// return: string name of the register, or NULL if `reg_id` is invalid.
    ///
    pub fn cs_reg_name(
        handle: csh,
        reg_id: ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    /// Return friendly name of an instruction in a string.
    /// Find the instruction id from header file of corresponding architecture (arm.h for ARM, x86.h for X86, ...)
    ///
    /// WARN: when in 'diet' mode, this API is irrelevant because the engine does not
    /// store instruction name.
    ///
    /// * `handle`: handle returned by cs_open()
    /// * `insn_id`: instruction id
    ///
    /// return: string name of the instruction, or NULL if `insn_id` is invalid.
    ///
    pub fn cs_insn_name(
        handle: csh,
        insn_id: ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    /// Return friendly name of a group id (that an instruction can belong to)
    /// Find the group id from header file of corresponding architecture (arm.h for ARM, x86.h for X86, ...)
    ///
    /// WARN: when in 'diet' mode, this API is irrelevant because the engine does not
    /// store group name.
    ///
    /// * `handle`: handle returned by cs_open()
    /// * `group_id`: group id
    ///
    /// return: string name of the group, or NULL if `group_id` is invalid.
    ///
    pub fn cs_group_name(
        handle: csh,
        group_id: ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    /// Check if a disassembled instruction belong to a particular group.
    /// Find the group id from header file of corresponding architecture (arm.h for ARM, x86.h for X86, ...)
    /// Internally, this simply verifies if `group_id` matches any member of insn->groups array.
    ///
    /// NOTE: this API is only valid when detail option is ON (which is OFF by default).
    ///
    /// WARN: when in 'diet' mode, this API is irrelevant because the engine does not
    /// update `groups` array.
    ///
    /// * `handle`: handle returned by cs_open()
    /// * `insn`: disassembled instruction structure received from cs_disasm() or cs_disasm_iter()
    /// * `group_id`: group that you want to check if this instruction belong to.
    ///
    /// return: true if this instruction indeed belongs to aboved group, or false otherwise.
    ///
    pub fn cs_insn_group(
        handle: csh,
        insn: *const cs_insn,
        group_id: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    /// Check if a disassembled instruction IMPLICITLY used a particular register.
    /// Find the register id from header file of corresponding architecture (arm.h for ARM, x86.h for X86, ...)
    /// Internally, this simply verifies if `reg_id` matches any member of insn->regs_read array.
    ///
    /// NOTE: this API is only valid when detail option is ON (which is OFF by default)
    ///
    /// WARN: when in 'diet' mode, this API is irrelevant because the engine does not
    /// update `regs_read` array.
    ///
    /// * `insn`: disassembled instruction structure received from cs_disasm() or cs_disasm_iter()
    /// * `reg_id`: register that you want to check if this instruction used it.
    ///
    /// return: true if this instruction indeed implicitly used aboved register, or false otherwise.
    ///
    pub fn cs_reg_read(handle: csh, insn: *const cs_insn, reg_id: ::std::os::raw::c_uint) -> bool;
}
extern "C" {
    /// Check if a disassembled instruction IMPLICITLY modified a particular register.
    /// Find the register id from header file of corresponding architecture (arm.h for ARM, x86.h for X86, ...)
    /// Internally, this simply verifies if @reg_id matches any member of insn->regs_write array.
    ///
    /// NOTE: this API is only valid when detail option is ON (which is OFF by default)
    ///
    /// WARN: when in 'diet' mode, this API is irrelevant because the engine does not
    /// update @regs_write array.
    ///
    /// * `insn`: disassembled instruction structure received from cs_disasm() or cs_disasm_iter()
    /// * `reg_id`: register that you want to check if this instruction modified it.
    ///
    /// return: true if this instruction indeed implicitly modified aboved register, or false otherwise.
    ///
    pub fn cs_reg_write(handle: csh, insn: *const cs_insn, reg_id: ::std::os::raw::c_uint) -> bool;
}
extern "C" {
    /// Count the number of operands of a given type.
    /// Find the operand type in header file of corresponding architecture (arm.h for ARM, x86.h for X86, ...)
    ///
    /// NOTE: this API is only valid when detail option is ON (which is OFF by default)
    ///
    /// * `handle`: handle returned by cs_open()
    /// * `insn`: disassembled instruction structure received from cs_disasm() or cs_disasm_iter()
    /// * `op_type`: Operand type to be found.
    ///
    /// return: number of operands of given type `op_type` in instruction `insn`,
    /// or -1 on failure.
    ///
    pub fn cs_op_count(
        handle: csh,
        insn: *const cs_insn,
        op_type: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Retrieve the position of operand of given type in <arch>.operands[] array.
    /// Later, the operand can be accessed using the returned position.
    /// Find the operand type in header file of corresponding architecture (arm.h for ARM, x86.h for X86, ...)
    ///
    /// NOTE: this API is only valid when detail option is ON (which is OFF by default)
    ///
    /// * `handle`: handle returned by cs_open()
    /// * `insn`: disassembled instruction structure received from cs_disasm() or cs_disasm_iter()
    /// * `op_type`: Operand type to be found.
    /// * `position`: position of the operand to be found. This must be in the range
    ///   [1, cs_op_count(handle, insn, op_type)]
    ///
    /// return: index of operand of given type `op_type` in <arch>.operands[] array
    /// in instruction `insn`, or -1 on failure.
    ///
    pub fn cs_op_index(
        handle: csh,
        insn: *const cs_insn,
        op_type: ::std::os::raw::c_uint,
        position: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
impl Clone for __va_list_tag {
    fn clone(&self) -> Self {
        *self
    }
}
